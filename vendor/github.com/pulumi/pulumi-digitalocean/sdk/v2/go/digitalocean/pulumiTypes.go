// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AppSpec struct {
	Databases []AppSpecDatabase `pulumi:"databases"`
	// A list of hostnames where the application will be available.
	Domains []string `pulumi:"domains"`
	// The name of the component
	Name string `pulumi:"name"`
	// The slug for the DigitalOcean data center region hosting the app.
	Region      *string             `pulumi:"region"`
	Services    []AppSpecService    `pulumi:"services"`
	StaticSites []AppSpecStaticSite `pulumi:"staticSites"`
	Workers     []AppSpecWorker     `pulumi:"workers"`
}

// AppSpecInput is an input type that accepts AppSpecArgs and AppSpecOutput values.
// You can construct a concrete instance of `AppSpecInput` via:
//
//          AppSpecArgs{...}
type AppSpecInput interface {
	pulumi.Input

	ToAppSpecOutput() AppSpecOutput
	ToAppSpecOutputWithContext(context.Context) AppSpecOutput
}

type AppSpecArgs struct {
	Databases AppSpecDatabaseArrayInput `pulumi:"databases"`
	// A list of hostnames where the application will be available.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// The name of the component
	Name pulumi.StringInput `pulumi:"name"`
	// The slug for the DigitalOcean data center region hosting the app.
	Region      pulumi.StringPtrInput       `pulumi:"region"`
	Services    AppSpecServiceArrayInput    `pulumi:"services"`
	StaticSites AppSpecStaticSiteArrayInput `pulumi:"staticSites"`
	Workers     AppSpecWorkerArrayInput     `pulumi:"workers"`
}

func (AppSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpec)(nil)).Elem()
}

func (i AppSpecArgs) ToAppSpecOutput() AppSpecOutput {
	return i.ToAppSpecOutputWithContext(context.Background())
}

func (i AppSpecArgs) ToAppSpecOutputWithContext(ctx context.Context) AppSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecOutput)
}

func (i AppSpecArgs) ToAppSpecPtrOutput() AppSpecPtrOutput {
	return i.ToAppSpecPtrOutputWithContext(context.Background())
}

func (i AppSpecArgs) ToAppSpecPtrOutputWithContext(ctx context.Context) AppSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecOutput).ToAppSpecPtrOutputWithContext(ctx)
}

// AppSpecPtrInput is an input type that accepts AppSpecArgs, AppSpecPtr and AppSpecPtrOutput values.
// You can construct a concrete instance of `AppSpecPtrInput` via:
//
//          AppSpecArgs{...}
//
//  or:
//
//          nil
type AppSpecPtrInput interface {
	pulumi.Input

	ToAppSpecPtrOutput() AppSpecPtrOutput
	ToAppSpecPtrOutputWithContext(context.Context) AppSpecPtrOutput
}

type appSpecPtrType AppSpecArgs

func AppSpecPtr(v *AppSpecArgs) AppSpecPtrInput {
	return (*appSpecPtrType)(v)
}

func (*appSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpec)(nil)).Elem()
}

func (i *appSpecPtrType) ToAppSpecPtrOutput() AppSpecPtrOutput {
	return i.ToAppSpecPtrOutputWithContext(context.Background())
}

func (i *appSpecPtrType) ToAppSpecPtrOutputWithContext(ctx context.Context) AppSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecPtrOutput)
}

type AppSpecOutput struct{ *pulumi.OutputState }

func (AppSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpec)(nil)).Elem()
}

func (o AppSpecOutput) ToAppSpecOutput() AppSpecOutput {
	return o
}

func (o AppSpecOutput) ToAppSpecOutputWithContext(ctx context.Context) AppSpecOutput {
	return o
}

func (o AppSpecOutput) ToAppSpecPtrOutput() AppSpecPtrOutput {
	return o.ToAppSpecPtrOutputWithContext(context.Background())
}

func (o AppSpecOutput) ToAppSpecPtrOutputWithContext(ctx context.Context) AppSpecPtrOutput {
	return o.ApplyT(func(v AppSpec) *AppSpec {
		return &v
	}).(AppSpecPtrOutput)
}
func (o AppSpecOutput) Databases() AppSpecDatabaseArrayOutput {
	return o.ApplyT(func(v AppSpec) []AppSpecDatabase { return v.Databases }).(AppSpecDatabaseArrayOutput)
}

// A list of hostnames where the application will be available.
func (o AppSpecOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppSpec) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// The name of the component
func (o AppSpecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppSpec) string { return v.Name }).(pulumi.StringOutput)
}

// The slug for the DigitalOcean data center region hosting the app.
func (o AppSpecOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpec) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o AppSpecOutput) Services() AppSpecServiceArrayOutput {
	return o.ApplyT(func(v AppSpec) []AppSpecService { return v.Services }).(AppSpecServiceArrayOutput)
}

func (o AppSpecOutput) StaticSites() AppSpecStaticSiteArrayOutput {
	return o.ApplyT(func(v AppSpec) []AppSpecStaticSite { return v.StaticSites }).(AppSpecStaticSiteArrayOutput)
}

func (o AppSpecOutput) Workers() AppSpecWorkerArrayOutput {
	return o.ApplyT(func(v AppSpec) []AppSpecWorker { return v.Workers }).(AppSpecWorkerArrayOutput)
}

type AppSpecPtrOutput struct{ *pulumi.OutputState }

func (AppSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpec)(nil)).Elem()
}

func (o AppSpecPtrOutput) ToAppSpecPtrOutput() AppSpecPtrOutput {
	return o
}

func (o AppSpecPtrOutput) ToAppSpecPtrOutputWithContext(ctx context.Context) AppSpecPtrOutput {
	return o
}

func (o AppSpecPtrOutput) Elem() AppSpecOutput {
	return o.ApplyT(func(v *AppSpec) AppSpec { return *v }).(AppSpecOutput)
}

func (o AppSpecPtrOutput) Databases() AppSpecDatabaseArrayOutput {
	return o.ApplyT(func(v *AppSpec) []AppSpecDatabase {
		if v == nil {
			return nil
		}
		return v.Databases
	}).(AppSpecDatabaseArrayOutput)
}

// A list of hostnames where the application will be available.
func (o AppSpecPtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSpec) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// The name of the component
func (o AppSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The slug for the DigitalOcean data center region hosting the app.
func (o AppSpecPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpec) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o AppSpecPtrOutput) Services() AppSpecServiceArrayOutput {
	return o.ApplyT(func(v *AppSpec) []AppSpecService {
		if v == nil {
			return nil
		}
		return v.Services
	}).(AppSpecServiceArrayOutput)
}

func (o AppSpecPtrOutput) StaticSites() AppSpecStaticSiteArrayOutput {
	return o.ApplyT(func(v *AppSpec) []AppSpecStaticSite {
		if v == nil {
			return nil
		}
		return v.StaticSites
	}).(AppSpecStaticSiteArrayOutput)
}

func (o AppSpecPtrOutput) Workers() AppSpecWorkerArrayOutput {
	return o.ApplyT(func(v *AppSpec) []AppSpecWorker {
		if v == nil {
			return nil
		}
		return v.Workers
	}).(AppSpecWorkerArrayOutput)
}

type AppSpecDatabase struct {
	ClusterName *string `pulumi:"clusterName"`
	DbName      *string `pulumi:"dbName"`
	DbUser      *string `pulumi:"dbUser"`
	Engine      *string `pulumi:"engine"`
	// The name of the component
	Name       *string `pulumi:"name"`
	Production *bool   `pulumi:"production"`
	Version    *string `pulumi:"version"`
}

// AppSpecDatabaseInput is an input type that accepts AppSpecDatabaseArgs and AppSpecDatabaseOutput values.
// You can construct a concrete instance of `AppSpecDatabaseInput` via:
//
//          AppSpecDatabaseArgs{...}
type AppSpecDatabaseInput interface {
	pulumi.Input

	ToAppSpecDatabaseOutput() AppSpecDatabaseOutput
	ToAppSpecDatabaseOutputWithContext(context.Context) AppSpecDatabaseOutput
}

type AppSpecDatabaseArgs struct {
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	DbName      pulumi.StringPtrInput `pulumi:"dbName"`
	DbUser      pulumi.StringPtrInput `pulumi:"dbUser"`
	Engine      pulumi.StringPtrInput `pulumi:"engine"`
	// The name of the component
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Production pulumi.BoolPtrInput   `pulumi:"production"`
	Version    pulumi.StringPtrInput `pulumi:"version"`
}

func (AppSpecDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecDatabase)(nil)).Elem()
}

func (i AppSpecDatabaseArgs) ToAppSpecDatabaseOutput() AppSpecDatabaseOutput {
	return i.ToAppSpecDatabaseOutputWithContext(context.Background())
}

func (i AppSpecDatabaseArgs) ToAppSpecDatabaseOutputWithContext(ctx context.Context) AppSpecDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecDatabaseOutput)
}

// AppSpecDatabaseArrayInput is an input type that accepts AppSpecDatabaseArray and AppSpecDatabaseArrayOutput values.
// You can construct a concrete instance of `AppSpecDatabaseArrayInput` via:
//
//          AppSpecDatabaseArray{ AppSpecDatabaseArgs{...} }
type AppSpecDatabaseArrayInput interface {
	pulumi.Input

	ToAppSpecDatabaseArrayOutput() AppSpecDatabaseArrayOutput
	ToAppSpecDatabaseArrayOutputWithContext(context.Context) AppSpecDatabaseArrayOutput
}

type AppSpecDatabaseArray []AppSpecDatabaseInput

func (AppSpecDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecDatabase)(nil)).Elem()
}

func (i AppSpecDatabaseArray) ToAppSpecDatabaseArrayOutput() AppSpecDatabaseArrayOutput {
	return i.ToAppSpecDatabaseArrayOutputWithContext(context.Background())
}

func (i AppSpecDatabaseArray) ToAppSpecDatabaseArrayOutputWithContext(ctx context.Context) AppSpecDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecDatabaseArrayOutput)
}

type AppSpecDatabaseOutput struct{ *pulumi.OutputState }

func (AppSpecDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecDatabase)(nil)).Elem()
}

func (o AppSpecDatabaseOutput) ToAppSpecDatabaseOutput() AppSpecDatabaseOutput {
	return o
}

func (o AppSpecDatabaseOutput) ToAppSpecDatabaseOutputWithContext(ctx context.Context) AppSpecDatabaseOutput {
	return o
}

func (o AppSpecDatabaseOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

func (o AppSpecDatabaseOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

func (o AppSpecDatabaseOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *string { return v.DbUser }).(pulumi.StringPtrOutput)
}

func (o AppSpecDatabaseOutput) Engine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *string { return v.Engine }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o AppSpecDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o AppSpecDatabaseOutput) Production() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *bool { return v.Production }).(pulumi.BoolPtrOutput)
}

func (o AppSpecDatabaseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecDatabase) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AppSpecDatabaseArrayOutput struct{ *pulumi.OutputState }

func (AppSpecDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecDatabase)(nil)).Elem()
}

func (o AppSpecDatabaseArrayOutput) ToAppSpecDatabaseArrayOutput() AppSpecDatabaseArrayOutput {
	return o
}

func (o AppSpecDatabaseArrayOutput) ToAppSpecDatabaseArrayOutputWithContext(ctx context.Context) AppSpecDatabaseArrayOutput {
	return o
}

func (o AppSpecDatabaseArrayOutput) Index(i pulumi.IntInput) AppSpecDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecDatabase {
		return vs[0].([]AppSpecDatabase)[vs[1].(int)]
	}).(AppSpecDatabaseOutput)
}

type AppSpecService struct {
	// An optional build command to run while building this component from source.
	BuildCommand *string `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath *string `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs []AppSpecServiceEnv `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git *AppSpecServiceGit `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github *AppSpecServiceGithub `pulumi:"github"`
	// A health check to determine the availability of this component.
	HealthCheck *AppSpecServiceHealthCheck `pulumi:"healthCheck"`
	// The internal port on which this service's run command will listen.
	HttpPort *int `pulumi:"httpPort"`
	// The amount of instances that this component should be scaled to.
	InstanceCount *int `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug *string `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   string                `pulumi:"name"`
	Routes *AppSpecServiceRoutes `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand *string `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir *string `pulumi:"sourceDir"`
}

// AppSpecServiceInput is an input type that accepts AppSpecServiceArgs and AppSpecServiceOutput values.
// You can construct a concrete instance of `AppSpecServiceInput` via:
//
//          AppSpecServiceArgs{...}
type AppSpecServiceInput interface {
	pulumi.Input

	ToAppSpecServiceOutput() AppSpecServiceOutput
	ToAppSpecServiceOutputWithContext(context.Context) AppSpecServiceOutput
}

type AppSpecServiceArgs struct {
	// An optional build command to run while building this component from source.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug pulumi.StringPtrInput `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs AppSpecServiceEnvArrayInput `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git AppSpecServiceGitPtrInput `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github AppSpecServiceGithubPtrInput `pulumi:"github"`
	// A health check to determine the availability of this component.
	HealthCheck AppSpecServiceHealthCheckPtrInput `pulumi:"healthCheck"`
	// The internal port on which this service's run command will listen.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// The amount of instances that this component should be scaled to.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug pulumi.StringPtrInput `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   pulumi.StringInput           `pulumi:"name"`
	Routes AppSpecServiceRoutesPtrInput `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand pulumi.StringPtrInput `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir pulumi.StringPtrInput `pulumi:"sourceDir"`
}

func (AppSpecServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecService)(nil)).Elem()
}

func (i AppSpecServiceArgs) ToAppSpecServiceOutput() AppSpecServiceOutput {
	return i.ToAppSpecServiceOutputWithContext(context.Background())
}

func (i AppSpecServiceArgs) ToAppSpecServiceOutputWithContext(ctx context.Context) AppSpecServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceOutput)
}

// AppSpecServiceArrayInput is an input type that accepts AppSpecServiceArray and AppSpecServiceArrayOutput values.
// You can construct a concrete instance of `AppSpecServiceArrayInput` via:
//
//          AppSpecServiceArray{ AppSpecServiceArgs{...} }
type AppSpecServiceArrayInput interface {
	pulumi.Input

	ToAppSpecServiceArrayOutput() AppSpecServiceArrayOutput
	ToAppSpecServiceArrayOutputWithContext(context.Context) AppSpecServiceArrayOutput
}

type AppSpecServiceArray []AppSpecServiceInput

func (AppSpecServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecService)(nil)).Elem()
}

func (i AppSpecServiceArray) ToAppSpecServiceArrayOutput() AppSpecServiceArrayOutput {
	return i.ToAppSpecServiceArrayOutputWithContext(context.Background())
}

func (i AppSpecServiceArray) ToAppSpecServiceArrayOutputWithContext(ctx context.Context) AppSpecServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceArrayOutput)
}

type AppSpecServiceOutput struct{ *pulumi.OutputState }

func (AppSpecServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecService)(nil)).Elem()
}

func (o AppSpecServiceOutput) ToAppSpecServiceOutput() AppSpecServiceOutput {
	return o
}

func (o AppSpecServiceOutput) ToAppSpecServiceOutputWithContext(ctx context.Context) AppSpecServiceOutput {
	return o
}

// An optional build command to run while building this component from source.
func (o AppSpecServiceOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecService) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
func (o AppSpecServiceOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecService) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

// An environment slug describing the type of this app.
func (o AppSpecServiceOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecService) *string { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// Describes an environment variable made available to an app competent.
func (o AppSpecServiceOutput) Envs() AppSpecServiceEnvArrayOutput {
	return o.ApplyT(func(v AppSpecService) []AppSpecServiceEnv { return v.Envs }).(AppSpecServiceEnvArrayOutput)
}

// A Git repo to use as component's source. Only one of `git` and `github` may be set.
func (o AppSpecServiceOutput) Git() AppSpecServiceGitPtrOutput {
	return o.ApplyT(func(v AppSpecService) *AppSpecServiceGit { return v.Git }).(AppSpecServiceGitPtrOutput)
}

// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
func (o AppSpecServiceOutput) Github() AppSpecServiceGithubPtrOutput {
	return o.ApplyT(func(v AppSpecService) *AppSpecServiceGithub { return v.Github }).(AppSpecServiceGithubPtrOutput)
}

// A health check to determine the availability of this component.
func (o AppSpecServiceOutput) HealthCheck() AppSpecServiceHealthCheckPtrOutput {
	return o.ApplyT(func(v AppSpecService) *AppSpecServiceHealthCheck { return v.HealthCheck }).(AppSpecServiceHealthCheckPtrOutput)
}

// The internal port on which this service's run command will listen.
func (o AppSpecServiceOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecService) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// The amount of instances that this component should be scaled to.
func (o AppSpecServiceOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecService) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// The instance size to use for this component.
func (o AppSpecServiceOutput) InstanceSizeSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecService) *string { return v.InstanceSizeSlug }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o AppSpecServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppSpecService) string { return v.Name }).(pulumi.StringOutput)
}

func (o AppSpecServiceOutput) Routes() AppSpecServiceRoutesPtrOutput {
	return o.ApplyT(func(v AppSpecService) *AppSpecServiceRoutes { return v.Routes }).(AppSpecServiceRoutesPtrOutput)
}

// An optional run command to override the component's default.
func (o AppSpecServiceOutput) RunCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecService) *string { return v.RunCommand }).(pulumi.StringPtrOutput)
}

// An optional path to the working directory to use for the build.
func (o AppSpecServiceOutput) SourceDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecService) *string { return v.SourceDir }).(pulumi.StringPtrOutput)
}

type AppSpecServiceArrayOutput struct{ *pulumi.OutputState }

func (AppSpecServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecService)(nil)).Elem()
}

func (o AppSpecServiceArrayOutput) ToAppSpecServiceArrayOutput() AppSpecServiceArrayOutput {
	return o
}

func (o AppSpecServiceArrayOutput) ToAppSpecServiceArrayOutputWithContext(ctx context.Context) AppSpecServiceArrayOutput {
	return o
}

func (o AppSpecServiceArrayOutput) Index(i pulumi.IntInput) AppSpecServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecService {
		return vs[0].([]AppSpecService)[vs[1].(int)]
	}).(AppSpecServiceOutput)
}

type AppSpecServiceEnv struct {
	// The name of the environment variable.
	Key *string `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope *string `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type *string `pulumi:"type"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// AppSpecServiceEnvInput is an input type that accepts AppSpecServiceEnvArgs and AppSpecServiceEnvOutput values.
// You can construct a concrete instance of `AppSpecServiceEnvInput` via:
//
//          AppSpecServiceEnvArgs{...}
type AppSpecServiceEnvInput interface {
	pulumi.Input

	ToAppSpecServiceEnvOutput() AppSpecServiceEnvOutput
	ToAppSpecServiceEnvOutputWithContext(context.Context) AppSpecServiceEnvOutput
}

type AppSpecServiceEnvArgs struct {
	// The name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AppSpecServiceEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceEnv)(nil)).Elem()
}

func (i AppSpecServiceEnvArgs) ToAppSpecServiceEnvOutput() AppSpecServiceEnvOutput {
	return i.ToAppSpecServiceEnvOutputWithContext(context.Background())
}

func (i AppSpecServiceEnvArgs) ToAppSpecServiceEnvOutputWithContext(ctx context.Context) AppSpecServiceEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceEnvOutput)
}

// AppSpecServiceEnvArrayInput is an input type that accepts AppSpecServiceEnvArray and AppSpecServiceEnvArrayOutput values.
// You can construct a concrete instance of `AppSpecServiceEnvArrayInput` via:
//
//          AppSpecServiceEnvArray{ AppSpecServiceEnvArgs{...} }
type AppSpecServiceEnvArrayInput interface {
	pulumi.Input

	ToAppSpecServiceEnvArrayOutput() AppSpecServiceEnvArrayOutput
	ToAppSpecServiceEnvArrayOutputWithContext(context.Context) AppSpecServiceEnvArrayOutput
}

type AppSpecServiceEnvArray []AppSpecServiceEnvInput

func (AppSpecServiceEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecServiceEnv)(nil)).Elem()
}

func (i AppSpecServiceEnvArray) ToAppSpecServiceEnvArrayOutput() AppSpecServiceEnvArrayOutput {
	return i.ToAppSpecServiceEnvArrayOutputWithContext(context.Background())
}

func (i AppSpecServiceEnvArray) ToAppSpecServiceEnvArrayOutputWithContext(ctx context.Context) AppSpecServiceEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceEnvArrayOutput)
}

type AppSpecServiceEnvOutput struct{ *pulumi.OutputState }

func (AppSpecServiceEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceEnv)(nil)).Elem()
}

func (o AppSpecServiceEnvOutput) ToAppSpecServiceEnvOutput() AppSpecServiceEnvOutput {
	return o
}

func (o AppSpecServiceEnvOutput) ToAppSpecServiceEnvOutputWithContext(ctx context.Context) AppSpecServiceEnvOutput {
	return o
}

// The name of the environment variable.
func (o AppSpecServiceEnvOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceEnv) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
func (o AppSpecServiceEnvOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceEnv) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the environment variable, `GENERAL` or `SECRET`.
func (o AppSpecServiceEnvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceEnv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o AppSpecServiceEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AppSpecServiceEnvArrayOutput struct{ *pulumi.OutputState }

func (AppSpecServiceEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecServiceEnv)(nil)).Elem()
}

func (o AppSpecServiceEnvArrayOutput) ToAppSpecServiceEnvArrayOutput() AppSpecServiceEnvArrayOutput {
	return o
}

func (o AppSpecServiceEnvArrayOutput) ToAppSpecServiceEnvArrayOutputWithContext(ctx context.Context) AppSpecServiceEnvArrayOutput {
	return o
}

func (o AppSpecServiceEnvArrayOutput) Index(i pulumi.IntInput) AppSpecServiceEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecServiceEnv {
		return vs[0].([]AppSpecServiceEnv)[vs[1].(int)]
	}).(AppSpecServiceEnvOutput)
}

type AppSpecServiceGit struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl *string `pulumi:"repoCloneUrl"`
}

// AppSpecServiceGitInput is an input type that accepts AppSpecServiceGitArgs and AppSpecServiceGitOutput values.
// You can construct a concrete instance of `AppSpecServiceGitInput` via:
//
//          AppSpecServiceGitArgs{...}
type AppSpecServiceGitInput interface {
	pulumi.Input

	ToAppSpecServiceGitOutput() AppSpecServiceGitOutput
	ToAppSpecServiceGitOutputWithContext(context.Context) AppSpecServiceGitOutput
}

type AppSpecServiceGitArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl pulumi.StringPtrInput `pulumi:"repoCloneUrl"`
}

func (AppSpecServiceGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceGit)(nil)).Elem()
}

func (i AppSpecServiceGitArgs) ToAppSpecServiceGitOutput() AppSpecServiceGitOutput {
	return i.ToAppSpecServiceGitOutputWithContext(context.Background())
}

func (i AppSpecServiceGitArgs) ToAppSpecServiceGitOutputWithContext(ctx context.Context) AppSpecServiceGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceGitOutput)
}

func (i AppSpecServiceGitArgs) ToAppSpecServiceGitPtrOutput() AppSpecServiceGitPtrOutput {
	return i.ToAppSpecServiceGitPtrOutputWithContext(context.Background())
}

func (i AppSpecServiceGitArgs) ToAppSpecServiceGitPtrOutputWithContext(ctx context.Context) AppSpecServiceGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceGitOutput).ToAppSpecServiceGitPtrOutputWithContext(ctx)
}

// AppSpecServiceGitPtrInput is an input type that accepts AppSpecServiceGitArgs, AppSpecServiceGitPtr and AppSpecServiceGitPtrOutput values.
// You can construct a concrete instance of `AppSpecServiceGitPtrInput` via:
//
//          AppSpecServiceGitArgs{...}
//
//  or:
//
//          nil
type AppSpecServiceGitPtrInput interface {
	pulumi.Input

	ToAppSpecServiceGitPtrOutput() AppSpecServiceGitPtrOutput
	ToAppSpecServiceGitPtrOutputWithContext(context.Context) AppSpecServiceGitPtrOutput
}

type appSpecServiceGitPtrType AppSpecServiceGitArgs

func AppSpecServiceGitPtr(v *AppSpecServiceGitArgs) AppSpecServiceGitPtrInput {
	return (*appSpecServiceGitPtrType)(v)
}

func (*appSpecServiceGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceGit)(nil)).Elem()
}

func (i *appSpecServiceGitPtrType) ToAppSpecServiceGitPtrOutput() AppSpecServiceGitPtrOutput {
	return i.ToAppSpecServiceGitPtrOutputWithContext(context.Background())
}

func (i *appSpecServiceGitPtrType) ToAppSpecServiceGitPtrOutputWithContext(ctx context.Context) AppSpecServiceGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceGitPtrOutput)
}

type AppSpecServiceGitOutput struct{ *pulumi.OutputState }

func (AppSpecServiceGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceGit)(nil)).Elem()
}

func (o AppSpecServiceGitOutput) ToAppSpecServiceGitOutput() AppSpecServiceGitOutput {
	return o
}

func (o AppSpecServiceGitOutput) ToAppSpecServiceGitOutputWithContext(ctx context.Context) AppSpecServiceGitOutput {
	return o
}

func (o AppSpecServiceGitOutput) ToAppSpecServiceGitPtrOutput() AppSpecServiceGitPtrOutput {
	return o.ToAppSpecServiceGitPtrOutputWithContext(context.Background())
}

func (o AppSpecServiceGitOutput) ToAppSpecServiceGitPtrOutputWithContext(ctx context.Context) AppSpecServiceGitPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGit) *AppSpecServiceGit {
		return &v
	}).(AppSpecServiceGitPtrOutput)
}

// The name of the branch to use.
func (o AppSpecServiceGitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGit) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o AppSpecServiceGitOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGit) *string { return v.RepoCloneUrl }).(pulumi.StringPtrOutput)
}

type AppSpecServiceGitPtrOutput struct{ *pulumi.OutputState }

func (AppSpecServiceGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceGit)(nil)).Elem()
}

func (o AppSpecServiceGitPtrOutput) ToAppSpecServiceGitPtrOutput() AppSpecServiceGitPtrOutput {
	return o
}

func (o AppSpecServiceGitPtrOutput) ToAppSpecServiceGitPtrOutputWithContext(ctx context.Context) AppSpecServiceGitPtrOutput {
	return o
}

func (o AppSpecServiceGitPtrOutput) Elem() AppSpecServiceGitOutput {
	return o.ApplyT(func(v *AppSpecServiceGit) AppSpecServiceGit { return *v }).(AppSpecServiceGitOutput)
}

// The name of the branch to use.
func (o AppSpecServiceGitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceGit) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o AppSpecServiceGitPtrOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceGit) *string {
		if v == nil {
			return nil
		}
		return v.RepoCloneUrl
	}).(pulumi.StringPtrOutput)
}

type AppSpecServiceGithub struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush *bool `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo *string `pulumi:"repo"`
}

// AppSpecServiceGithubInput is an input type that accepts AppSpecServiceGithubArgs and AppSpecServiceGithubOutput values.
// You can construct a concrete instance of `AppSpecServiceGithubInput` via:
//
//          AppSpecServiceGithubArgs{...}
type AppSpecServiceGithubInput interface {
	pulumi.Input

	ToAppSpecServiceGithubOutput() AppSpecServiceGithubOutput
	ToAppSpecServiceGithubOutputWithContext(context.Context) AppSpecServiceGithubOutput
}

type AppSpecServiceGithubArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush pulumi.BoolPtrInput `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
}

func (AppSpecServiceGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceGithub)(nil)).Elem()
}

func (i AppSpecServiceGithubArgs) ToAppSpecServiceGithubOutput() AppSpecServiceGithubOutput {
	return i.ToAppSpecServiceGithubOutputWithContext(context.Background())
}

func (i AppSpecServiceGithubArgs) ToAppSpecServiceGithubOutputWithContext(ctx context.Context) AppSpecServiceGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceGithubOutput)
}

func (i AppSpecServiceGithubArgs) ToAppSpecServiceGithubPtrOutput() AppSpecServiceGithubPtrOutput {
	return i.ToAppSpecServiceGithubPtrOutputWithContext(context.Background())
}

func (i AppSpecServiceGithubArgs) ToAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) AppSpecServiceGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceGithubOutput).ToAppSpecServiceGithubPtrOutputWithContext(ctx)
}

// AppSpecServiceGithubPtrInput is an input type that accepts AppSpecServiceGithubArgs, AppSpecServiceGithubPtr and AppSpecServiceGithubPtrOutput values.
// You can construct a concrete instance of `AppSpecServiceGithubPtrInput` via:
//
//          AppSpecServiceGithubArgs{...}
//
//  or:
//
//          nil
type AppSpecServiceGithubPtrInput interface {
	pulumi.Input

	ToAppSpecServiceGithubPtrOutput() AppSpecServiceGithubPtrOutput
	ToAppSpecServiceGithubPtrOutputWithContext(context.Context) AppSpecServiceGithubPtrOutput
}

type appSpecServiceGithubPtrType AppSpecServiceGithubArgs

func AppSpecServiceGithubPtr(v *AppSpecServiceGithubArgs) AppSpecServiceGithubPtrInput {
	return (*appSpecServiceGithubPtrType)(v)
}

func (*appSpecServiceGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceGithub)(nil)).Elem()
}

func (i *appSpecServiceGithubPtrType) ToAppSpecServiceGithubPtrOutput() AppSpecServiceGithubPtrOutput {
	return i.ToAppSpecServiceGithubPtrOutputWithContext(context.Background())
}

func (i *appSpecServiceGithubPtrType) ToAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) AppSpecServiceGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceGithubPtrOutput)
}

type AppSpecServiceGithubOutput struct{ *pulumi.OutputState }

func (AppSpecServiceGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceGithub)(nil)).Elem()
}

func (o AppSpecServiceGithubOutput) ToAppSpecServiceGithubOutput() AppSpecServiceGithubOutput {
	return o
}

func (o AppSpecServiceGithubOutput) ToAppSpecServiceGithubOutputWithContext(ctx context.Context) AppSpecServiceGithubOutput {
	return o
}

func (o AppSpecServiceGithubOutput) ToAppSpecServiceGithubPtrOutput() AppSpecServiceGithubPtrOutput {
	return o.ToAppSpecServiceGithubPtrOutputWithContext(context.Background())
}

func (o AppSpecServiceGithubOutput) ToAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) AppSpecServiceGithubPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGithub) *AppSpecServiceGithub {
		return &v
	}).(AppSpecServiceGithubPtrOutput)
}

// The name of the branch to use.
func (o AppSpecServiceGithubOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGithub) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o AppSpecServiceGithubOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGithub) *bool { return v.DeployOnPush }).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o AppSpecServiceGithubOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceGithub) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

type AppSpecServiceGithubPtrOutput struct{ *pulumi.OutputState }

func (AppSpecServiceGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceGithub)(nil)).Elem()
}

func (o AppSpecServiceGithubPtrOutput) ToAppSpecServiceGithubPtrOutput() AppSpecServiceGithubPtrOutput {
	return o
}

func (o AppSpecServiceGithubPtrOutput) ToAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) AppSpecServiceGithubPtrOutput {
	return o
}

func (o AppSpecServiceGithubPtrOutput) Elem() AppSpecServiceGithubOutput {
	return o.ApplyT(func(v *AppSpecServiceGithub) AppSpecServiceGithub { return *v }).(AppSpecServiceGithubOutput)
}

// The name of the branch to use.
func (o AppSpecServiceGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceGithub) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o AppSpecServiceGithubPtrOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceGithub) *bool {
		if v == nil {
			return nil
		}
		return v.DeployOnPush
	}).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o AppSpecServiceGithubPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceGithub) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

type AppSpecServiceHealthCheck struct {
	// The number of failed health checks before considered unhealthy.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The route path used for the HTTP health check ping.
	HttpPath *string `pulumi:"httpPath"`
	// The number of seconds to wait before beginning health checks.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The number of seconds to wait between health checks.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The number of successful health checks before considered healthy.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The number of seconds after which the check times out.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AppSpecServiceHealthCheckInput is an input type that accepts AppSpecServiceHealthCheckArgs and AppSpecServiceHealthCheckOutput values.
// You can construct a concrete instance of `AppSpecServiceHealthCheckInput` via:
//
//          AppSpecServiceHealthCheckArgs{...}
type AppSpecServiceHealthCheckInput interface {
	pulumi.Input

	ToAppSpecServiceHealthCheckOutput() AppSpecServiceHealthCheckOutput
	ToAppSpecServiceHealthCheckOutputWithContext(context.Context) AppSpecServiceHealthCheckOutput
}

type AppSpecServiceHealthCheckArgs struct {
	// The number of failed health checks before considered unhealthy.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The route path used for the HTTP health check ping.
	HttpPath pulumi.StringPtrInput `pulumi:"httpPath"`
	// The number of seconds to wait before beginning health checks.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The number of seconds to wait between health checks.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The number of successful health checks before considered healthy.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The number of seconds after which the check times out.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AppSpecServiceHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceHealthCheck)(nil)).Elem()
}

func (i AppSpecServiceHealthCheckArgs) ToAppSpecServiceHealthCheckOutput() AppSpecServiceHealthCheckOutput {
	return i.ToAppSpecServiceHealthCheckOutputWithContext(context.Background())
}

func (i AppSpecServiceHealthCheckArgs) ToAppSpecServiceHealthCheckOutputWithContext(ctx context.Context) AppSpecServiceHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceHealthCheckOutput)
}

func (i AppSpecServiceHealthCheckArgs) ToAppSpecServiceHealthCheckPtrOutput() AppSpecServiceHealthCheckPtrOutput {
	return i.ToAppSpecServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (i AppSpecServiceHealthCheckArgs) ToAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) AppSpecServiceHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceHealthCheckOutput).ToAppSpecServiceHealthCheckPtrOutputWithContext(ctx)
}

// AppSpecServiceHealthCheckPtrInput is an input type that accepts AppSpecServiceHealthCheckArgs, AppSpecServiceHealthCheckPtr and AppSpecServiceHealthCheckPtrOutput values.
// You can construct a concrete instance of `AppSpecServiceHealthCheckPtrInput` via:
//
//          AppSpecServiceHealthCheckArgs{...}
//
//  or:
//
//          nil
type AppSpecServiceHealthCheckPtrInput interface {
	pulumi.Input

	ToAppSpecServiceHealthCheckPtrOutput() AppSpecServiceHealthCheckPtrOutput
	ToAppSpecServiceHealthCheckPtrOutputWithContext(context.Context) AppSpecServiceHealthCheckPtrOutput
}

type appSpecServiceHealthCheckPtrType AppSpecServiceHealthCheckArgs

func AppSpecServiceHealthCheckPtr(v *AppSpecServiceHealthCheckArgs) AppSpecServiceHealthCheckPtrInput {
	return (*appSpecServiceHealthCheckPtrType)(v)
}

func (*appSpecServiceHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceHealthCheck)(nil)).Elem()
}

func (i *appSpecServiceHealthCheckPtrType) ToAppSpecServiceHealthCheckPtrOutput() AppSpecServiceHealthCheckPtrOutput {
	return i.ToAppSpecServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (i *appSpecServiceHealthCheckPtrType) ToAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) AppSpecServiceHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceHealthCheckPtrOutput)
}

type AppSpecServiceHealthCheckOutput struct{ *pulumi.OutputState }

func (AppSpecServiceHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceHealthCheck)(nil)).Elem()
}

func (o AppSpecServiceHealthCheckOutput) ToAppSpecServiceHealthCheckOutput() AppSpecServiceHealthCheckOutput {
	return o
}

func (o AppSpecServiceHealthCheckOutput) ToAppSpecServiceHealthCheckOutputWithContext(ctx context.Context) AppSpecServiceHealthCheckOutput {
	return o
}

func (o AppSpecServiceHealthCheckOutput) ToAppSpecServiceHealthCheckPtrOutput() AppSpecServiceHealthCheckPtrOutput {
	return o.ToAppSpecServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (o AppSpecServiceHealthCheckOutput) ToAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) AppSpecServiceHealthCheckPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *AppSpecServiceHealthCheck {
		return &v
	}).(AppSpecServiceHealthCheckPtrOutput)
}

// The number of failed health checks before considered unhealthy.
func (o AppSpecServiceHealthCheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The route path used for the HTTP health check ping.
func (o AppSpecServiceHealthCheckOutput) HttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *string { return v.HttpPath }).(pulumi.StringPtrOutput)
}

// The number of seconds to wait before beginning health checks.
func (o AppSpecServiceHealthCheckOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The number of seconds to wait between health checks.
func (o AppSpecServiceHealthCheckOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The number of successful health checks before considered healthy.
func (o AppSpecServiceHealthCheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The number of seconds after which the check times out.
func (o AppSpecServiceHealthCheckOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecServiceHealthCheck) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AppSpecServiceHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (AppSpecServiceHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceHealthCheck)(nil)).Elem()
}

func (o AppSpecServiceHealthCheckPtrOutput) ToAppSpecServiceHealthCheckPtrOutput() AppSpecServiceHealthCheckPtrOutput {
	return o
}

func (o AppSpecServiceHealthCheckPtrOutput) ToAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) AppSpecServiceHealthCheckPtrOutput {
	return o
}

func (o AppSpecServiceHealthCheckPtrOutput) Elem() AppSpecServiceHealthCheckOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) AppSpecServiceHealthCheck { return *v }).(AppSpecServiceHealthCheckOutput)
}

// The number of failed health checks before considered unhealthy.
func (o AppSpecServiceHealthCheckPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The route path used for the HTTP health check ping.
func (o AppSpecServiceHealthCheckPtrOutput) HttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpPath
	}).(pulumi.StringPtrOutput)
}

// The number of seconds to wait before beginning health checks.
func (o AppSpecServiceHealthCheckPtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The number of seconds to wait between health checks.
func (o AppSpecServiceHealthCheckPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of successful health checks before considered healthy.
func (o AppSpecServiceHealthCheckPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The number of seconds after which the check times out.
func (o AppSpecServiceHealthCheckPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type AppSpecServiceRoutes struct {
	// Paths must start with `/` and must be unique within the app.
	Path *string `pulumi:"path"`
}

// AppSpecServiceRoutesInput is an input type that accepts AppSpecServiceRoutesArgs and AppSpecServiceRoutesOutput values.
// You can construct a concrete instance of `AppSpecServiceRoutesInput` via:
//
//          AppSpecServiceRoutesArgs{...}
type AppSpecServiceRoutesInput interface {
	pulumi.Input

	ToAppSpecServiceRoutesOutput() AppSpecServiceRoutesOutput
	ToAppSpecServiceRoutesOutputWithContext(context.Context) AppSpecServiceRoutesOutput
}

type AppSpecServiceRoutesArgs struct {
	// Paths must start with `/` and must be unique within the app.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (AppSpecServiceRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceRoutes)(nil)).Elem()
}

func (i AppSpecServiceRoutesArgs) ToAppSpecServiceRoutesOutput() AppSpecServiceRoutesOutput {
	return i.ToAppSpecServiceRoutesOutputWithContext(context.Background())
}

func (i AppSpecServiceRoutesArgs) ToAppSpecServiceRoutesOutputWithContext(ctx context.Context) AppSpecServiceRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceRoutesOutput)
}

func (i AppSpecServiceRoutesArgs) ToAppSpecServiceRoutesPtrOutput() AppSpecServiceRoutesPtrOutput {
	return i.ToAppSpecServiceRoutesPtrOutputWithContext(context.Background())
}

func (i AppSpecServiceRoutesArgs) ToAppSpecServiceRoutesPtrOutputWithContext(ctx context.Context) AppSpecServiceRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceRoutesOutput).ToAppSpecServiceRoutesPtrOutputWithContext(ctx)
}

// AppSpecServiceRoutesPtrInput is an input type that accepts AppSpecServiceRoutesArgs, AppSpecServiceRoutesPtr and AppSpecServiceRoutesPtrOutput values.
// You can construct a concrete instance of `AppSpecServiceRoutesPtrInput` via:
//
//          AppSpecServiceRoutesArgs{...}
//
//  or:
//
//          nil
type AppSpecServiceRoutesPtrInput interface {
	pulumi.Input

	ToAppSpecServiceRoutesPtrOutput() AppSpecServiceRoutesPtrOutput
	ToAppSpecServiceRoutesPtrOutputWithContext(context.Context) AppSpecServiceRoutesPtrOutput
}

type appSpecServiceRoutesPtrType AppSpecServiceRoutesArgs

func AppSpecServiceRoutesPtr(v *AppSpecServiceRoutesArgs) AppSpecServiceRoutesPtrInput {
	return (*appSpecServiceRoutesPtrType)(v)
}

func (*appSpecServiceRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceRoutes)(nil)).Elem()
}

func (i *appSpecServiceRoutesPtrType) ToAppSpecServiceRoutesPtrOutput() AppSpecServiceRoutesPtrOutput {
	return i.ToAppSpecServiceRoutesPtrOutputWithContext(context.Background())
}

func (i *appSpecServiceRoutesPtrType) ToAppSpecServiceRoutesPtrOutputWithContext(ctx context.Context) AppSpecServiceRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecServiceRoutesPtrOutput)
}

type AppSpecServiceRoutesOutput struct{ *pulumi.OutputState }

func (AppSpecServiceRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecServiceRoutes)(nil)).Elem()
}

func (o AppSpecServiceRoutesOutput) ToAppSpecServiceRoutesOutput() AppSpecServiceRoutesOutput {
	return o
}

func (o AppSpecServiceRoutesOutput) ToAppSpecServiceRoutesOutputWithContext(ctx context.Context) AppSpecServiceRoutesOutput {
	return o
}

func (o AppSpecServiceRoutesOutput) ToAppSpecServiceRoutesPtrOutput() AppSpecServiceRoutesPtrOutput {
	return o.ToAppSpecServiceRoutesPtrOutputWithContext(context.Background())
}

func (o AppSpecServiceRoutesOutput) ToAppSpecServiceRoutesPtrOutputWithContext(ctx context.Context) AppSpecServiceRoutesPtrOutput {
	return o.ApplyT(func(v AppSpecServiceRoutes) *AppSpecServiceRoutes {
		return &v
	}).(AppSpecServiceRoutesPtrOutput)
}

// Paths must start with `/` and must be unique within the app.
func (o AppSpecServiceRoutesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecServiceRoutes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type AppSpecServiceRoutesPtrOutput struct{ *pulumi.OutputState }

func (AppSpecServiceRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecServiceRoutes)(nil)).Elem()
}

func (o AppSpecServiceRoutesPtrOutput) ToAppSpecServiceRoutesPtrOutput() AppSpecServiceRoutesPtrOutput {
	return o
}

func (o AppSpecServiceRoutesPtrOutput) ToAppSpecServiceRoutesPtrOutputWithContext(ctx context.Context) AppSpecServiceRoutesPtrOutput {
	return o
}

func (o AppSpecServiceRoutesPtrOutput) Elem() AppSpecServiceRoutesOutput {
	return o.ApplyT(func(v *AppSpecServiceRoutes) AppSpecServiceRoutes { return *v }).(AppSpecServiceRoutesOutput)
}

// Paths must start with `/` and must be unique within the app.
func (o AppSpecServiceRoutesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecServiceRoutes) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type AppSpecStaticSite struct {
	// An optional build command to run while building this component from source.
	BuildCommand *string `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath *string `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs []AppSpecStaticSiteEnv `pulumi:"envs"`
	// The name of the error document to use when serving this static site*
	ErrorDocument *string `pulumi:"errorDocument"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git *AppSpecStaticSiteGit `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github *AppSpecStaticSiteGithub `pulumi:"github"`
	// The name of the index document to use when serving this static site.
	IndexDocument *string `pulumi:"indexDocument"`
	// The name of the component
	Name string `pulumi:"name"`
	// An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
	OutputDir *string                  `pulumi:"outputDir"`
	Routes    *AppSpecStaticSiteRoutes `pulumi:"routes"`
	// An optional path to the working directory to use for the build.
	SourceDir *string `pulumi:"sourceDir"`
}

// AppSpecStaticSiteInput is an input type that accepts AppSpecStaticSiteArgs and AppSpecStaticSiteOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteInput` via:
//
//          AppSpecStaticSiteArgs{...}
type AppSpecStaticSiteInput interface {
	pulumi.Input

	ToAppSpecStaticSiteOutput() AppSpecStaticSiteOutput
	ToAppSpecStaticSiteOutputWithContext(context.Context) AppSpecStaticSiteOutput
}

type AppSpecStaticSiteArgs struct {
	// An optional build command to run while building this component from source.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug pulumi.StringPtrInput `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs AppSpecStaticSiteEnvArrayInput `pulumi:"envs"`
	// The name of the error document to use when serving this static site*
	ErrorDocument pulumi.StringPtrInput `pulumi:"errorDocument"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git AppSpecStaticSiteGitPtrInput `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github AppSpecStaticSiteGithubPtrInput `pulumi:"github"`
	// The name of the index document to use when serving this static site.
	IndexDocument pulumi.StringPtrInput `pulumi:"indexDocument"`
	// The name of the component
	Name pulumi.StringInput `pulumi:"name"`
	// An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
	OutputDir pulumi.StringPtrInput           `pulumi:"outputDir"`
	Routes    AppSpecStaticSiteRoutesPtrInput `pulumi:"routes"`
	// An optional path to the working directory to use for the build.
	SourceDir pulumi.StringPtrInput `pulumi:"sourceDir"`
}

func (AppSpecStaticSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSite)(nil)).Elem()
}

func (i AppSpecStaticSiteArgs) ToAppSpecStaticSiteOutput() AppSpecStaticSiteOutput {
	return i.ToAppSpecStaticSiteOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteArgs) ToAppSpecStaticSiteOutputWithContext(ctx context.Context) AppSpecStaticSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteOutput)
}

// AppSpecStaticSiteArrayInput is an input type that accepts AppSpecStaticSiteArray and AppSpecStaticSiteArrayOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteArrayInput` via:
//
//          AppSpecStaticSiteArray{ AppSpecStaticSiteArgs{...} }
type AppSpecStaticSiteArrayInput interface {
	pulumi.Input

	ToAppSpecStaticSiteArrayOutput() AppSpecStaticSiteArrayOutput
	ToAppSpecStaticSiteArrayOutputWithContext(context.Context) AppSpecStaticSiteArrayOutput
}

type AppSpecStaticSiteArray []AppSpecStaticSiteInput

func (AppSpecStaticSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecStaticSite)(nil)).Elem()
}

func (i AppSpecStaticSiteArray) ToAppSpecStaticSiteArrayOutput() AppSpecStaticSiteArrayOutput {
	return i.ToAppSpecStaticSiteArrayOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteArray) ToAppSpecStaticSiteArrayOutputWithContext(ctx context.Context) AppSpecStaticSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteArrayOutput)
}

type AppSpecStaticSiteOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSite)(nil)).Elem()
}

func (o AppSpecStaticSiteOutput) ToAppSpecStaticSiteOutput() AppSpecStaticSiteOutput {
	return o
}

func (o AppSpecStaticSiteOutput) ToAppSpecStaticSiteOutputWithContext(ctx context.Context) AppSpecStaticSiteOutput {
	return o
}

// An optional build command to run while building this component from source.
func (o AppSpecStaticSiteOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
func (o AppSpecStaticSiteOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

// An environment slug describing the type of this app.
func (o AppSpecStaticSiteOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// Describes an environment variable made available to an app competent.
func (o AppSpecStaticSiteOutput) Envs() AppSpecStaticSiteEnvArrayOutput {
	return o.ApplyT(func(v AppSpecStaticSite) []AppSpecStaticSiteEnv { return v.Envs }).(AppSpecStaticSiteEnvArrayOutput)
}

// The name of the error document to use when serving this static site*
func (o AppSpecStaticSiteOutput) ErrorDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.ErrorDocument }).(pulumi.StringPtrOutput)
}

// A Git repo to use as component's source. Only one of `git` and `github` may be set.
func (o AppSpecStaticSiteOutput) Git() AppSpecStaticSiteGitPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *AppSpecStaticSiteGit { return v.Git }).(AppSpecStaticSiteGitPtrOutput)
}

// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
func (o AppSpecStaticSiteOutput) Github() AppSpecStaticSiteGithubPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *AppSpecStaticSiteGithub { return v.Github }).(AppSpecStaticSiteGithubPtrOutput)
}

// The name of the index document to use when serving this static site.
func (o AppSpecStaticSiteOutput) IndexDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.IndexDocument }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o AppSpecStaticSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppSpecStaticSite) string { return v.Name }).(pulumi.StringOutput)
}

// An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
func (o AppSpecStaticSiteOutput) OutputDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.OutputDir }).(pulumi.StringPtrOutput)
}

func (o AppSpecStaticSiteOutput) Routes() AppSpecStaticSiteRoutesPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *AppSpecStaticSiteRoutes { return v.Routes }).(AppSpecStaticSiteRoutesPtrOutput)
}

// An optional path to the working directory to use for the build.
func (o AppSpecStaticSiteOutput) SourceDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSite) *string { return v.SourceDir }).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteArrayOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecStaticSite)(nil)).Elem()
}

func (o AppSpecStaticSiteArrayOutput) ToAppSpecStaticSiteArrayOutput() AppSpecStaticSiteArrayOutput {
	return o
}

func (o AppSpecStaticSiteArrayOutput) ToAppSpecStaticSiteArrayOutputWithContext(ctx context.Context) AppSpecStaticSiteArrayOutput {
	return o
}

func (o AppSpecStaticSiteArrayOutput) Index(i pulumi.IntInput) AppSpecStaticSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecStaticSite {
		return vs[0].([]AppSpecStaticSite)[vs[1].(int)]
	}).(AppSpecStaticSiteOutput)
}

type AppSpecStaticSiteEnv struct {
	// The name of the environment variable.
	Key *string `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope *string `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type *string `pulumi:"type"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// AppSpecStaticSiteEnvInput is an input type that accepts AppSpecStaticSiteEnvArgs and AppSpecStaticSiteEnvOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteEnvInput` via:
//
//          AppSpecStaticSiteEnvArgs{...}
type AppSpecStaticSiteEnvInput interface {
	pulumi.Input

	ToAppSpecStaticSiteEnvOutput() AppSpecStaticSiteEnvOutput
	ToAppSpecStaticSiteEnvOutputWithContext(context.Context) AppSpecStaticSiteEnvOutput
}

type AppSpecStaticSiteEnvArgs struct {
	// The name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AppSpecStaticSiteEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteEnv)(nil)).Elem()
}

func (i AppSpecStaticSiteEnvArgs) ToAppSpecStaticSiteEnvOutput() AppSpecStaticSiteEnvOutput {
	return i.ToAppSpecStaticSiteEnvOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteEnvArgs) ToAppSpecStaticSiteEnvOutputWithContext(ctx context.Context) AppSpecStaticSiteEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteEnvOutput)
}

// AppSpecStaticSiteEnvArrayInput is an input type that accepts AppSpecStaticSiteEnvArray and AppSpecStaticSiteEnvArrayOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteEnvArrayInput` via:
//
//          AppSpecStaticSiteEnvArray{ AppSpecStaticSiteEnvArgs{...} }
type AppSpecStaticSiteEnvArrayInput interface {
	pulumi.Input

	ToAppSpecStaticSiteEnvArrayOutput() AppSpecStaticSiteEnvArrayOutput
	ToAppSpecStaticSiteEnvArrayOutputWithContext(context.Context) AppSpecStaticSiteEnvArrayOutput
}

type AppSpecStaticSiteEnvArray []AppSpecStaticSiteEnvInput

func (AppSpecStaticSiteEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecStaticSiteEnv)(nil)).Elem()
}

func (i AppSpecStaticSiteEnvArray) ToAppSpecStaticSiteEnvArrayOutput() AppSpecStaticSiteEnvArrayOutput {
	return i.ToAppSpecStaticSiteEnvArrayOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteEnvArray) ToAppSpecStaticSiteEnvArrayOutputWithContext(ctx context.Context) AppSpecStaticSiteEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteEnvArrayOutput)
}

type AppSpecStaticSiteEnvOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteEnv)(nil)).Elem()
}

func (o AppSpecStaticSiteEnvOutput) ToAppSpecStaticSiteEnvOutput() AppSpecStaticSiteEnvOutput {
	return o
}

func (o AppSpecStaticSiteEnvOutput) ToAppSpecStaticSiteEnvOutputWithContext(ctx context.Context) AppSpecStaticSiteEnvOutput {
	return o
}

// The name of the environment variable.
func (o AppSpecStaticSiteEnvOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteEnv) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
func (o AppSpecStaticSiteEnvOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteEnv) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the environment variable, `GENERAL` or `SECRET`.
func (o AppSpecStaticSiteEnvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteEnv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o AppSpecStaticSiteEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteEnvArrayOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecStaticSiteEnv)(nil)).Elem()
}

func (o AppSpecStaticSiteEnvArrayOutput) ToAppSpecStaticSiteEnvArrayOutput() AppSpecStaticSiteEnvArrayOutput {
	return o
}

func (o AppSpecStaticSiteEnvArrayOutput) ToAppSpecStaticSiteEnvArrayOutputWithContext(ctx context.Context) AppSpecStaticSiteEnvArrayOutput {
	return o
}

func (o AppSpecStaticSiteEnvArrayOutput) Index(i pulumi.IntInput) AppSpecStaticSiteEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecStaticSiteEnv {
		return vs[0].([]AppSpecStaticSiteEnv)[vs[1].(int)]
	}).(AppSpecStaticSiteEnvOutput)
}

type AppSpecStaticSiteGit struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl *string `pulumi:"repoCloneUrl"`
}

// AppSpecStaticSiteGitInput is an input type that accepts AppSpecStaticSiteGitArgs and AppSpecStaticSiteGitOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteGitInput` via:
//
//          AppSpecStaticSiteGitArgs{...}
type AppSpecStaticSiteGitInput interface {
	pulumi.Input

	ToAppSpecStaticSiteGitOutput() AppSpecStaticSiteGitOutput
	ToAppSpecStaticSiteGitOutputWithContext(context.Context) AppSpecStaticSiteGitOutput
}

type AppSpecStaticSiteGitArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl pulumi.StringPtrInput `pulumi:"repoCloneUrl"`
}

func (AppSpecStaticSiteGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteGit)(nil)).Elem()
}

func (i AppSpecStaticSiteGitArgs) ToAppSpecStaticSiteGitOutput() AppSpecStaticSiteGitOutput {
	return i.ToAppSpecStaticSiteGitOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteGitArgs) ToAppSpecStaticSiteGitOutputWithContext(ctx context.Context) AppSpecStaticSiteGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteGitOutput)
}

func (i AppSpecStaticSiteGitArgs) ToAppSpecStaticSiteGitPtrOutput() AppSpecStaticSiteGitPtrOutput {
	return i.ToAppSpecStaticSiteGitPtrOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteGitArgs) ToAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteGitOutput).ToAppSpecStaticSiteGitPtrOutputWithContext(ctx)
}

// AppSpecStaticSiteGitPtrInput is an input type that accepts AppSpecStaticSiteGitArgs, AppSpecStaticSiteGitPtr and AppSpecStaticSiteGitPtrOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteGitPtrInput` via:
//
//          AppSpecStaticSiteGitArgs{...}
//
//  or:
//
//          nil
type AppSpecStaticSiteGitPtrInput interface {
	pulumi.Input

	ToAppSpecStaticSiteGitPtrOutput() AppSpecStaticSiteGitPtrOutput
	ToAppSpecStaticSiteGitPtrOutputWithContext(context.Context) AppSpecStaticSiteGitPtrOutput
}

type appSpecStaticSiteGitPtrType AppSpecStaticSiteGitArgs

func AppSpecStaticSiteGitPtr(v *AppSpecStaticSiteGitArgs) AppSpecStaticSiteGitPtrInput {
	return (*appSpecStaticSiteGitPtrType)(v)
}

func (*appSpecStaticSiteGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecStaticSiteGit)(nil)).Elem()
}

func (i *appSpecStaticSiteGitPtrType) ToAppSpecStaticSiteGitPtrOutput() AppSpecStaticSiteGitPtrOutput {
	return i.ToAppSpecStaticSiteGitPtrOutputWithContext(context.Background())
}

func (i *appSpecStaticSiteGitPtrType) ToAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteGitPtrOutput)
}

type AppSpecStaticSiteGitOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteGit)(nil)).Elem()
}

func (o AppSpecStaticSiteGitOutput) ToAppSpecStaticSiteGitOutput() AppSpecStaticSiteGitOutput {
	return o
}

func (o AppSpecStaticSiteGitOutput) ToAppSpecStaticSiteGitOutputWithContext(ctx context.Context) AppSpecStaticSiteGitOutput {
	return o
}

func (o AppSpecStaticSiteGitOutput) ToAppSpecStaticSiteGitPtrOutput() AppSpecStaticSiteGitPtrOutput {
	return o.ToAppSpecStaticSiteGitPtrOutputWithContext(context.Background())
}

func (o AppSpecStaticSiteGitOutput) ToAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGitPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGit) *AppSpecStaticSiteGit {
		return &v
	}).(AppSpecStaticSiteGitPtrOutput)
}

// The name of the branch to use.
func (o AppSpecStaticSiteGitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGit) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o AppSpecStaticSiteGitOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGit) *string { return v.RepoCloneUrl }).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteGitPtrOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecStaticSiteGit)(nil)).Elem()
}

func (o AppSpecStaticSiteGitPtrOutput) ToAppSpecStaticSiteGitPtrOutput() AppSpecStaticSiteGitPtrOutput {
	return o
}

func (o AppSpecStaticSiteGitPtrOutput) ToAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGitPtrOutput {
	return o
}

func (o AppSpecStaticSiteGitPtrOutput) Elem() AppSpecStaticSiteGitOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGit) AppSpecStaticSiteGit { return *v }).(AppSpecStaticSiteGitOutput)
}

// The name of the branch to use.
func (o AppSpecStaticSiteGitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGit) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o AppSpecStaticSiteGitPtrOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGit) *string {
		if v == nil {
			return nil
		}
		return v.RepoCloneUrl
	}).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteGithub struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush *bool `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo *string `pulumi:"repo"`
}

// AppSpecStaticSiteGithubInput is an input type that accepts AppSpecStaticSiteGithubArgs and AppSpecStaticSiteGithubOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteGithubInput` via:
//
//          AppSpecStaticSiteGithubArgs{...}
type AppSpecStaticSiteGithubInput interface {
	pulumi.Input

	ToAppSpecStaticSiteGithubOutput() AppSpecStaticSiteGithubOutput
	ToAppSpecStaticSiteGithubOutputWithContext(context.Context) AppSpecStaticSiteGithubOutput
}

type AppSpecStaticSiteGithubArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush pulumi.BoolPtrInput `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
}

func (AppSpecStaticSiteGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteGithub)(nil)).Elem()
}

func (i AppSpecStaticSiteGithubArgs) ToAppSpecStaticSiteGithubOutput() AppSpecStaticSiteGithubOutput {
	return i.ToAppSpecStaticSiteGithubOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteGithubArgs) ToAppSpecStaticSiteGithubOutputWithContext(ctx context.Context) AppSpecStaticSiteGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteGithubOutput)
}

func (i AppSpecStaticSiteGithubArgs) ToAppSpecStaticSiteGithubPtrOutput() AppSpecStaticSiteGithubPtrOutput {
	return i.ToAppSpecStaticSiteGithubPtrOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteGithubArgs) ToAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteGithubOutput).ToAppSpecStaticSiteGithubPtrOutputWithContext(ctx)
}

// AppSpecStaticSiteGithubPtrInput is an input type that accepts AppSpecStaticSiteGithubArgs, AppSpecStaticSiteGithubPtr and AppSpecStaticSiteGithubPtrOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteGithubPtrInput` via:
//
//          AppSpecStaticSiteGithubArgs{...}
//
//  or:
//
//          nil
type AppSpecStaticSiteGithubPtrInput interface {
	pulumi.Input

	ToAppSpecStaticSiteGithubPtrOutput() AppSpecStaticSiteGithubPtrOutput
	ToAppSpecStaticSiteGithubPtrOutputWithContext(context.Context) AppSpecStaticSiteGithubPtrOutput
}

type appSpecStaticSiteGithubPtrType AppSpecStaticSiteGithubArgs

func AppSpecStaticSiteGithubPtr(v *AppSpecStaticSiteGithubArgs) AppSpecStaticSiteGithubPtrInput {
	return (*appSpecStaticSiteGithubPtrType)(v)
}

func (*appSpecStaticSiteGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecStaticSiteGithub)(nil)).Elem()
}

func (i *appSpecStaticSiteGithubPtrType) ToAppSpecStaticSiteGithubPtrOutput() AppSpecStaticSiteGithubPtrOutput {
	return i.ToAppSpecStaticSiteGithubPtrOutputWithContext(context.Background())
}

func (i *appSpecStaticSiteGithubPtrType) ToAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteGithubPtrOutput)
}

type AppSpecStaticSiteGithubOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteGithub)(nil)).Elem()
}

func (o AppSpecStaticSiteGithubOutput) ToAppSpecStaticSiteGithubOutput() AppSpecStaticSiteGithubOutput {
	return o
}

func (o AppSpecStaticSiteGithubOutput) ToAppSpecStaticSiteGithubOutputWithContext(ctx context.Context) AppSpecStaticSiteGithubOutput {
	return o
}

func (o AppSpecStaticSiteGithubOutput) ToAppSpecStaticSiteGithubPtrOutput() AppSpecStaticSiteGithubPtrOutput {
	return o.ToAppSpecStaticSiteGithubPtrOutputWithContext(context.Background())
}

func (o AppSpecStaticSiteGithubOutput) ToAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGithubPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGithub) *AppSpecStaticSiteGithub {
		return &v
	}).(AppSpecStaticSiteGithubPtrOutput)
}

// The name of the branch to use.
func (o AppSpecStaticSiteGithubOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGithub) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o AppSpecStaticSiteGithubOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGithub) *bool { return v.DeployOnPush }).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o AppSpecStaticSiteGithubOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteGithub) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteGithubPtrOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecStaticSiteGithub)(nil)).Elem()
}

func (o AppSpecStaticSiteGithubPtrOutput) ToAppSpecStaticSiteGithubPtrOutput() AppSpecStaticSiteGithubPtrOutput {
	return o
}

func (o AppSpecStaticSiteGithubPtrOutput) ToAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteGithubPtrOutput {
	return o
}

func (o AppSpecStaticSiteGithubPtrOutput) Elem() AppSpecStaticSiteGithubOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGithub) AppSpecStaticSiteGithub { return *v }).(AppSpecStaticSiteGithubOutput)
}

// The name of the branch to use.
func (o AppSpecStaticSiteGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGithub) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o AppSpecStaticSiteGithubPtrOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGithub) *bool {
		if v == nil {
			return nil
		}
		return v.DeployOnPush
	}).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o AppSpecStaticSiteGithubPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteGithub) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteRoutes struct {
	// Paths must start with `/` and must be unique within the app.
	Path *string `pulumi:"path"`
}

// AppSpecStaticSiteRoutesInput is an input type that accepts AppSpecStaticSiteRoutesArgs and AppSpecStaticSiteRoutesOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteRoutesInput` via:
//
//          AppSpecStaticSiteRoutesArgs{...}
type AppSpecStaticSiteRoutesInput interface {
	pulumi.Input

	ToAppSpecStaticSiteRoutesOutput() AppSpecStaticSiteRoutesOutput
	ToAppSpecStaticSiteRoutesOutputWithContext(context.Context) AppSpecStaticSiteRoutesOutput
}

type AppSpecStaticSiteRoutesArgs struct {
	// Paths must start with `/` and must be unique within the app.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (AppSpecStaticSiteRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteRoutes)(nil)).Elem()
}

func (i AppSpecStaticSiteRoutesArgs) ToAppSpecStaticSiteRoutesOutput() AppSpecStaticSiteRoutesOutput {
	return i.ToAppSpecStaticSiteRoutesOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteRoutesArgs) ToAppSpecStaticSiteRoutesOutputWithContext(ctx context.Context) AppSpecStaticSiteRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteRoutesOutput)
}

func (i AppSpecStaticSiteRoutesArgs) ToAppSpecStaticSiteRoutesPtrOutput() AppSpecStaticSiteRoutesPtrOutput {
	return i.ToAppSpecStaticSiteRoutesPtrOutputWithContext(context.Background())
}

func (i AppSpecStaticSiteRoutesArgs) ToAppSpecStaticSiteRoutesPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteRoutesOutput).ToAppSpecStaticSiteRoutesPtrOutputWithContext(ctx)
}

// AppSpecStaticSiteRoutesPtrInput is an input type that accepts AppSpecStaticSiteRoutesArgs, AppSpecStaticSiteRoutesPtr and AppSpecStaticSiteRoutesPtrOutput values.
// You can construct a concrete instance of `AppSpecStaticSiteRoutesPtrInput` via:
//
//          AppSpecStaticSiteRoutesArgs{...}
//
//  or:
//
//          nil
type AppSpecStaticSiteRoutesPtrInput interface {
	pulumi.Input

	ToAppSpecStaticSiteRoutesPtrOutput() AppSpecStaticSiteRoutesPtrOutput
	ToAppSpecStaticSiteRoutesPtrOutputWithContext(context.Context) AppSpecStaticSiteRoutesPtrOutput
}

type appSpecStaticSiteRoutesPtrType AppSpecStaticSiteRoutesArgs

func AppSpecStaticSiteRoutesPtr(v *AppSpecStaticSiteRoutesArgs) AppSpecStaticSiteRoutesPtrInput {
	return (*appSpecStaticSiteRoutesPtrType)(v)
}

func (*appSpecStaticSiteRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecStaticSiteRoutes)(nil)).Elem()
}

func (i *appSpecStaticSiteRoutesPtrType) ToAppSpecStaticSiteRoutesPtrOutput() AppSpecStaticSiteRoutesPtrOutput {
	return i.ToAppSpecStaticSiteRoutesPtrOutputWithContext(context.Background())
}

func (i *appSpecStaticSiteRoutesPtrType) ToAppSpecStaticSiteRoutesPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecStaticSiteRoutesPtrOutput)
}

type AppSpecStaticSiteRoutesOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecStaticSiteRoutes)(nil)).Elem()
}

func (o AppSpecStaticSiteRoutesOutput) ToAppSpecStaticSiteRoutesOutput() AppSpecStaticSiteRoutesOutput {
	return o
}

func (o AppSpecStaticSiteRoutesOutput) ToAppSpecStaticSiteRoutesOutputWithContext(ctx context.Context) AppSpecStaticSiteRoutesOutput {
	return o
}

func (o AppSpecStaticSiteRoutesOutput) ToAppSpecStaticSiteRoutesPtrOutput() AppSpecStaticSiteRoutesPtrOutput {
	return o.ToAppSpecStaticSiteRoutesPtrOutputWithContext(context.Background())
}

func (o AppSpecStaticSiteRoutesOutput) ToAppSpecStaticSiteRoutesPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteRoutesPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteRoutes) *AppSpecStaticSiteRoutes {
		return &v
	}).(AppSpecStaticSiteRoutesPtrOutput)
}

// Paths must start with `/` and must be unique within the app.
func (o AppSpecStaticSiteRoutesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecStaticSiteRoutes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type AppSpecStaticSiteRoutesPtrOutput struct{ *pulumi.OutputState }

func (AppSpecStaticSiteRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecStaticSiteRoutes)(nil)).Elem()
}

func (o AppSpecStaticSiteRoutesPtrOutput) ToAppSpecStaticSiteRoutesPtrOutput() AppSpecStaticSiteRoutesPtrOutput {
	return o
}

func (o AppSpecStaticSiteRoutesPtrOutput) ToAppSpecStaticSiteRoutesPtrOutputWithContext(ctx context.Context) AppSpecStaticSiteRoutesPtrOutput {
	return o
}

func (o AppSpecStaticSiteRoutesPtrOutput) Elem() AppSpecStaticSiteRoutesOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteRoutes) AppSpecStaticSiteRoutes { return *v }).(AppSpecStaticSiteRoutesOutput)
}

// Paths must start with `/` and must be unique within the app.
func (o AppSpecStaticSiteRoutesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecStaticSiteRoutes) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type AppSpecWorker struct {
	// An optional build command to run while building this component from source.
	BuildCommand *string `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath *string `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs []AppSpecWorkerEnv `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git *AppSpecWorkerGit `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github *AppSpecWorkerGithub `pulumi:"github"`
	// The amount of instances that this component should be scaled to.
	InstanceCount *int `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug *string `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   string               `pulumi:"name"`
	Routes *AppSpecWorkerRoutes `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand *string `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir *string `pulumi:"sourceDir"`
}

// AppSpecWorkerInput is an input type that accepts AppSpecWorkerArgs and AppSpecWorkerOutput values.
// You can construct a concrete instance of `AppSpecWorkerInput` via:
//
//          AppSpecWorkerArgs{...}
type AppSpecWorkerInput interface {
	pulumi.Input

	ToAppSpecWorkerOutput() AppSpecWorkerOutput
	ToAppSpecWorkerOutputWithContext(context.Context) AppSpecWorkerOutput
}

type AppSpecWorkerArgs struct {
	// An optional build command to run while building this component from source.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug pulumi.StringPtrInput `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs AppSpecWorkerEnvArrayInput `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git AppSpecWorkerGitPtrInput `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github AppSpecWorkerGithubPtrInput `pulumi:"github"`
	// The amount of instances that this component should be scaled to.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug pulumi.StringPtrInput `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   pulumi.StringInput          `pulumi:"name"`
	Routes AppSpecWorkerRoutesPtrInput `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand pulumi.StringPtrInput `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir pulumi.StringPtrInput `pulumi:"sourceDir"`
}

func (AppSpecWorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorker)(nil)).Elem()
}

func (i AppSpecWorkerArgs) ToAppSpecWorkerOutput() AppSpecWorkerOutput {
	return i.ToAppSpecWorkerOutputWithContext(context.Background())
}

func (i AppSpecWorkerArgs) ToAppSpecWorkerOutputWithContext(ctx context.Context) AppSpecWorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerOutput)
}

// AppSpecWorkerArrayInput is an input type that accepts AppSpecWorkerArray and AppSpecWorkerArrayOutput values.
// You can construct a concrete instance of `AppSpecWorkerArrayInput` via:
//
//          AppSpecWorkerArray{ AppSpecWorkerArgs{...} }
type AppSpecWorkerArrayInput interface {
	pulumi.Input

	ToAppSpecWorkerArrayOutput() AppSpecWorkerArrayOutput
	ToAppSpecWorkerArrayOutputWithContext(context.Context) AppSpecWorkerArrayOutput
}

type AppSpecWorkerArray []AppSpecWorkerInput

func (AppSpecWorkerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecWorker)(nil)).Elem()
}

func (i AppSpecWorkerArray) ToAppSpecWorkerArrayOutput() AppSpecWorkerArrayOutput {
	return i.ToAppSpecWorkerArrayOutputWithContext(context.Background())
}

func (i AppSpecWorkerArray) ToAppSpecWorkerArrayOutputWithContext(ctx context.Context) AppSpecWorkerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerArrayOutput)
}

type AppSpecWorkerOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorker)(nil)).Elem()
}

func (o AppSpecWorkerOutput) ToAppSpecWorkerOutput() AppSpecWorkerOutput {
	return o
}

func (o AppSpecWorkerOutput) ToAppSpecWorkerOutputWithContext(ctx context.Context) AppSpecWorkerOutput {
	return o
}

// An optional build command to run while building this component from source.
func (o AppSpecWorkerOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
func (o AppSpecWorkerOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

// An environment slug describing the type of this app.
func (o AppSpecWorkerOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *string { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// Describes an environment variable made available to an app competent.
func (o AppSpecWorkerOutput) Envs() AppSpecWorkerEnvArrayOutput {
	return o.ApplyT(func(v AppSpecWorker) []AppSpecWorkerEnv { return v.Envs }).(AppSpecWorkerEnvArrayOutput)
}

// A Git repo to use as component's source. Only one of `git` and `github` may be set.
func (o AppSpecWorkerOutput) Git() AppSpecWorkerGitPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *AppSpecWorkerGit { return v.Git }).(AppSpecWorkerGitPtrOutput)
}

// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
func (o AppSpecWorkerOutput) Github() AppSpecWorkerGithubPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *AppSpecWorkerGithub { return v.Github }).(AppSpecWorkerGithubPtrOutput)
}

// The amount of instances that this component should be scaled to.
func (o AppSpecWorkerOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// The instance size to use for this component.
func (o AppSpecWorkerOutput) InstanceSizeSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *string { return v.InstanceSizeSlug }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o AppSpecWorkerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppSpecWorker) string { return v.Name }).(pulumi.StringOutput)
}

func (o AppSpecWorkerOutput) Routes() AppSpecWorkerRoutesPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *AppSpecWorkerRoutes { return v.Routes }).(AppSpecWorkerRoutesPtrOutput)
}

// An optional run command to override the component's default.
func (o AppSpecWorkerOutput) RunCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *string { return v.RunCommand }).(pulumi.StringPtrOutput)
}

// An optional path to the working directory to use for the build.
func (o AppSpecWorkerOutput) SourceDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorker) *string { return v.SourceDir }).(pulumi.StringPtrOutput)
}

type AppSpecWorkerArrayOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecWorker)(nil)).Elem()
}

func (o AppSpecWorkerArrayOutput) ToAppSpecWorkerArrayOutput() AppSpecWorkerArrayOutput {
	return o
}

func (o AppSpecWorkerArrayOutput) ToAppSpecWorkerArrayOutputWithContext(ctx context.Context) AppSpecWorkerArrayOutput {
	return o
}

func (o AppSpecWorkerArrayOutput) Index(i pulumi.IntInput) AppSpecWorkerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecWorker {
		return vs[0].([]AppSpecWorker)[vs[1].(int)]
	}).(AppSpecWorkerOutput)
}

type AppSpecWorkerEnv struct {
	// The name of the environment variable.
	Key *string `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope *string `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type *string `pulumi:"type"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// AppSpecWorkerEnvInput is an input type that accepts AppSpecWorkerEnvArgs and AppSpecWorkerEnvOutput values.
// You can construct a concrete instance of `AppSpecWorkerEnvInput` via:
//
//          AppSpecWorkerEnvArgs{...}
type AppSpecWorkerEnvInput interface {
	pulumi.Input

	ToAppSpecWorkerEnvOutput() AppSpecWorkerEnvOutput
	ToAppSpecWorkerEnvOutputWithContext(context.Context) AppSpecWorkerEnvOutput
}

type AppSpecWorkerEnvArgs struct {
	// The name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AppSpecWorkerEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerEnv)(nil)).Elem()
}

func (i AppSpecWorkerEnvArgs) ToAppSpecWorkerEnvOutput() AppSpecWorkerEnvOutput {
	return i.ToAppSpecWorkerEnvOutputWithContext(context.Background())
}

func (i AppSpecWorkerEnvArgs) ToAppSpecWorkerEnvOutputWithContext(ctx context.Context) AppSpecWorkerEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerEnvOutput)
}

// AppSpecWorkerEnvArrayInput is an input type that accepts AppSpecWorkerEnvArray and AppSpecWorkerEnvArrayOutput values.
// You can construct a concrete instance of `AppSpecWorkerEnvArrayInput` via:
//
//          AppSpecWorkerEnvArray{ AppSpecWorkerEnvArgs{...} }
type AppSpecWorkerEnvArrayInput interface {
	pulumi.Input

	ToAppSpecWorkerEnvArrayOutput() AppSpecWorkerEnvArrayOutput
	ToAppSpecWorkerEnvArrayOutputWithContext(context.Context) AppSpecWorkerEnvArrayOutput
}

type AppSpecWorkerEnvArray []AppSpecWorkerEnvInput

func (AppSpecWorkerEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecWorkerEnv)(nil)).Elem()
}

func (i AppSpecWorkerEnvArray) ToAppSpecWorkerEnvArrayOutput() AppSpecWorkerEnvArrayOutput {
	return i.ToAppSpecWorkerEnvArrayOutputWithContext(context.Background())
}

func (i AppSpecWorkerEnvArray) ToAppSpecWorkerEnvArrayOutputWithContext(ctx context.Context) AppSpecWorkerEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerEnvArrayOutput)
}

type AppSpecWorkerEnvOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerEnv)(nil)).Elem()
}

func (o AppSpecWorkerEnvOutput) ToAppSpecWorkerEnvOutput() AppSpecWorkerEnvOutput {
	return o
}

func (o AppSpecWorkerEnvOutput) ToAppSpecWorkerEnvOutputWithContext(ctx context.Context) AppSpecWorkerEnvOutput {
	return o
}

// The name of the environment variable.
func (o AppSpecWorkerEnvOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerEnv) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
func (o AppSpecWorkerEnvOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerEnv) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the environment variable, `GENERAL` or `SECRET`.
func (o AppSpecWorkerEnvOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerEnv) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o AppSpecWorkerEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AppSpecWorkerEnvArrayOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSpecWorkerEnv)(nil)).Elem()
}

func (o AppSpecWorkerEnvArrayOutput) ToAppSpecWorkerEnvArrayOutput() AppSpecWorkerEnvArrayOutput {
	return o
}

func (o AppSpecWorkerEnvArrayOutput) ToAppSpecWorkerEnvArrayOutputWithContext(ctx context.Context) AppSpecWorkerEnvArrayOutput {
	return o
}

func (o AppSpecWorkerEnvArrayOutput) Index(i pulumi.IntInput) AppSpecWorkerEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSpecWorkerEnv {
		return vs[0].([]AppSpecWorkerEnv)[vs[1].(int)]
	}).(AppSpecWorkerEnvOutput)
}

type AppSpecWorkerGit struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl *string `pulumi:"repoCloneUrl"`
}

// AppSpecWorkerGitInput is an input type that accepts AppSpecWorkerGitArgs and AppSpecWorkerGitOutput values.
// You can construct a concrete instance of `AppSpecWorkerGitInput` via:
//
//          AppSpecWorkerGitArgs{...}
type AppSpecWorkerGitInput interface {
	pulumi.Input

	ToAppSpecWorkerGitOutput() AppSpecWorkerGitOutput
	ToAppSpecWorkerGitOutputWithContext(context.Context) AppSpecWorkerGitOutput
}

type AppSpecWorkerGitArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl pulumi.StringPtrInput `pulumi:"repoCloneUrl"`
}

func (AppSpecWorkerGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerGit)(nil)).Elem()
}

func (i AppSpecWorkerGitArgs) ToAppSpecWorkerGitOutput() AppSpecWorkerGitOutput {
	return i.ToAppSpecWorkerGitOutputWithContext(context.Background())
}

func (i AppSpecWorkerGitArgs) ToAppSpecWorkerGitOutputWithContext(ctx context.Context) AppSpecWorkerGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerGitOutput)
}

func (i AppSpecWorkerGitArgs) ToAppSpecWorkerGitPtrOutput() AppSpecWorkerGitPtrOutput {
	return i.ToAppSpecWorkerGitPtrOutputWithContext(context.Background())
}

func (i AppSpecWorkerGitArgs) ToAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) AppSpecWorkerGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerGitOutput).ToAppSpecWorkerGitPtrOutputWithContext(ctx)
}

// AppSpecWorkerGitPtrInput is an input type that accepts AppSpecWorkerGitArgs, AppSpecWorkerGitPtr and AppSpecWorkerGitPtrOutput values.
// You can construct a concrete instance of `AppSpecWorkerGitPtrInput` via:
//
//          AppSpecWorkerGitArgs{...}
//
//  or:
//
//          nil
type AppSpecWorkerGitPtrInput interface {
	pulumi.Input

	ToAppSpecWorkerGitPtrOutput() AppSpecWorkerGitPtrOutput
	ToAppSpecWorkerGitPtrOutputWithContext(context.Context) AppSpecWorkerGitPtrOutput
}

type appSpecWorkerGitPtrType AppSpecWorkerGitArgs

func AppSpecWorkerGitPtr(v *AppSpecWorkerGitArgs) AppSpecWorkerGitPtrInput {
	return (*appSpecWorkerGitPtrType)(v)
}

func (*appSpecWorkerGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecWorkerGit)(nil)).Elem()
}

func (i *appSpecWorkerGitPtrType) ToAppSpecWorkerGitPtrOutput() AppSpecWorkerGitPtrOutput {
	return i.ToAppSpecWorkerGitPtrOutputWithContext(context.Background())
}

func (i *appSpecWorkerGitPtrType) ToAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) AppSpecWorkerGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerGitPtrOutput)
}

type AppSpecWorkerGitOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerGit)(nil)).Elem()
}

func (o AppSpecWorkerGitOutput) ToAppSpecWorkerGitOutput() AppSpecWorkerGitOutput {
	return o
}

func (o AppSpecWorkerGitOutput) ToAppSpecWorkerGitOutputWithContext(ctx context.Context) AppSpecWorkerGitOutput {
	return o
}

func (o AppSpecWorkerGitOutput) ToAppSpecWorkerGitPtrOutput() AppSpecWorkerGitPtrOutput {
	return o.ToAppSpecWorkerGitPtrOutputWithContext(context.Background())
}

func (o AppSpecWorkerGitOutput) ToAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) AppSpecWorkerGitPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGit) *AppSpecWorkerGit {
		return &v
	}).(AppSpecWorkerGitPtrOutput)
}

// The name of the branch to use.
func (o AppSpecWorkerGitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGit) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o AppSpecWorkerGitOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGit) *string { return v.RepoCloneUrl }).(pulumi.StringPtrOutput)
}

type AppSpecWorkerGitPtrOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecWorkerGit)(nil)).Elem()
}

func (o AppSpecWorkerGitPtrOutput) ToAppSpecWorkerGitPtrOutput() AppSpecWorkerGitPtrOutput {
	return o
}

func (o AppSpecWorkerGitPtrOutput) ToAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) AppSpecWorkerGitPtrOutput {
	return o
}

func (o AppSpecWorkerGitPtrOutput) Elem() AppSpecWorkerGitOutput {
	return o.ApplyT(func(v *AppSpecWorkerGit) AppSpecWorkerGit { return *v }).(AppSpecWorkerGitOutput)
}

// The name of the branch to use.
func (o AppSpecWorkerGitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecWorkerGit) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o AppSpecWorkerGitPtrOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecWorkerGit) *string {
		if v == nil {
			return nil
		}
		return v.RepoCloneUrl
	}).(pulumi.StringPtrOutput)
}

type AppSpecWorkerGithub struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush *bool `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo *string `pulumi:"repo"`
}

// AppSpecWorkerGithubInput is an input type that accepts AppSpecWorkerGithubArgs and AppSpecWorkerGithubOutput values.
// You can construct a concrete instance of `AppSpecWorkerGithubInput` via:
//
//          AppSpecWorkerGithubArgs{...}
type AppSpecWorkerGithubInput interface {
	pulumi.Input

	ToAppSpecWorkerGithubOutput() AppSpecWorkerGithubOutput
	ToAppSpecWorkerGithubOutputWithContext(context.Context) AppSpecWorkerGithubOutput
}

type AppSpecWorkerGithubArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush pulumi.BoolPtrInput `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
}

func (AppSpecWorkerGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerGithub)(nil)).Elem()
}

func (i AppSpecWorkerGithubArgs) ToAppSpecWorkerGithubOutput() AppSpecWorkerGithubOutput {
	return i.ToAppSpecWorkerGithubOutputWithContext(context.Background())
}

func (i AppSpecWorkerGithubArgs) ToAppSpecWorkerGithubOutputWithContext(ctx context.Context) AppSpecWorkerGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerGithubOutput)
}

func (i AppSpecWorkerGithubArgs) ToAppSpecWorkerGithubPtrOutput() AppSpecWorkerGithubPtrOutput {
	return i.ToAppSpecWorkerGithubPtrOutputWithContext(context.Background())
}

func (i AppSpecWorkerGithubArgs) ToAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) AppSpecWorkerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerGithubOutput).ToAppSpecWorkerGithubPtrOutputWithContext(ctx)
}

// AppSpecWorkerGithubPtrInput is an input type that accepts AppSpecWorkerGithubArgs, AppSpecWorkerGithubPtr and AppSpecWorkerGithubPtrOutput values.
// You can construct a concrete instance of `AppSpecWorkerGithubPtrInput` via:
//
//          AppSpecWorkerGithubArgs{...}
//
//  or:
//
//          nil
type AppSpecWorkerGithubPtrInput interface {
	pulumi.Input

	ToAppSpecWorkerGithubPtrOutput() AppSpecWorkerGithubPtrOutput
	ToAppSpecWorkerGithubPtrOutputWithContext(context.Context) AppSpecWorkerGithubPtrOutput
}

type appSpecWorkerGithubPtrType AppSpecWorkerGithubArgs

func AppSpecWorkerGithubPtr(v *AppSpecWorkerGithubArgs) AppSpecWorkerGithubPtrInput {
	return (*appSpecWorkerGithubPtrType)(v)
}

func (*appSpecWorkerGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecWorkerGithub)(nil)).Elem()
}

func (i *appSpecWorkerGithubPtrType) ToAppSpecWorkerGithubPtrOutput() AppSpecWorkerGithubPtrOutput {
	return i.ToAppSpecWorkerGithubPtrOutputWithContext(context.Background())
}

func (i *appSpecWorkerGithubPtrType) ToAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) AppSpecWorkerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerGithubPtrOutput)
}

type AppSpecWorkerGithubOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerGithub)(nil)).Elem()
}

func (o AppSpecWorkerGithubOutput) ToAppSpecWorkerGithubOutput() AppSpecWorkerGithubOutput {
	return o
}

func (o AppSpecWorkerGithubOutput) ToAppSpecWorkerGithubOutputWithContext(ctx context.Context) AppSpecWorkerGithubOutput {
	return o
}

func (o AppSpecWorkerGithubOutput) ToAppSpecWorkerGithubPtrOutput() AppSpecWorkerGithubPtrOutput {
	return o.ToAppSpecWorkerGithubPtrOutputWithContext(context.Background())
}

func (o AppSpecWorkerGithubOutput) ToAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) AppSpecWorkerGithubPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGithub) *AppSpecWorkerGithub {
		return &v
	}).(AppSpecWorkerGithubPtrOutput)
}

// The name of the branch to use.
func (o AppSpecWorkerGithubOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGithub) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o AppSpecWorkerGithubOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGithub) *bool { return v.DeployOnPush }).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o AppSpecWorkerGithubOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerGithub) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

type AppSpecWorkerGithubPtrOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecWorkerGithub)(nil)).Elem()
}

func (o AppSpecWorkerGithubPtrOutput) ToAppSpecWorkerGithubPtrOutput() AppSpecWorkerGithubPtrOutput {
	return o
}

func (o AppSpecWorkerGithubPtrOutput) ToAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) AppSpecWorkerGithubPtrOutput {
	return o
}

func (o AppSpecWorkerGithubPtrOutput) Elem() AppSpecWorkerGithubOutput {
	return o.ApplyT(func(v *AppSpecWorkerGithub) AppSpecWorkerGithub { return *v }).(AppSpecWorkerGithubOutput)
}

// The name of the branch to use.
func (o AppSpecWorkerGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecWorkerGithub) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o AppSpecWorkerGithubPtrOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppSpecWorkerGithub) *bool {
		if v == nil {
			return nil
		}
		return v.DeployOnPush
	}).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o AppSpecWorkerGithubPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecWorkerGithub) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

type AppSpecWorkerRoutes struct {
	// Paths must start with `/` and must be unique within the app.
	Path *string `pulumi:"path"`
}

// AppSpecWorkerRoutesInput is an input type that accepts AppSpecWorkerRoutesArgs and AppSpecWorkerRoutesOutput values.
// You can construct a concrete instance of `AppSpecWorkerRoutesInput` via:
//
//          AppSpecWorkerRoutesArgs{...}
type AppSpecWorkerRoutesInput interface {
	pulumi.Input

	ToAppSpecWorkerRoutesOutput() AppSpecWorkerRoutesOutput
	ToAppSpecWorkerRoutesOutputWithContext(context.Context) AppSpecWorkerRoutesOutput
}

type AppSpecWorkerRoutesArgs struct {
	// Paths must start with `/` and must be unique within the app.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (AppSpecWorkerRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerRoutes)(nil)).Elem()
}

func (i AppSpecWorkerRoutesArgs) ToAppSpecWorkerRoutesOutput() AppSpecWorkerRoutesOutput {
	return i.ToAppSpecWorkerRoutesOutputWithContext(context.Background())
}

func (i AppSpecWorkerRoutesArgs) ToAppSpecWorkerRoutesOutputWithContext(ctx context.Context) AppSpecWorkerRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerRoutesOutput)
}

func (i AppSpecWorkerRoutesArgs) ToAppSpecWorkerRoutesPtrOutput() AppSpecWorkerRoutesPtrOutput {
	return i.ToAppSpecWorkerRoutesPtrOutputWithContext(context.Background())
}

func (i AppSpecWorkerRoutesArgs) ToAppSpecWorkerRoutesPtrOutputWithContext(ctx context.Context) AppSpecWorkerRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerRoutesOutput).ToAppSpecWorkerRoutesPtrOutputWithContext(ctx)
}

// AppSpecWorkerRoutesPtrInput is an input type that accepts AppSpecWorkerRoutesArgs, AppSpecWorkerRoutesPtr and AppSpecWorkerRoutesPtrOutput values.
// You can construct a concrete instance of `AppSpecWorkerRoutesPtrInput` via:
//
//          AppSpecWorkerRoutesArgs{...}
//
//  or:
//
//          nil
type AppSpecWorkerRoutesPtrInput interface {
	pulumi.Input

	ToAppSpecWorkerRoutesPtrOutput() AppSpecWorkerRoutesPtrOutput
	ToAppSpecWorkerRoutesPtrOutputWithContext(context.Context) AppSpecWorkerRoutesPtrOutput
}

type appSpecWorkerRoutesPtrType AppSpecWorkerRoutesArgs

func AppSpecWorkerRoutesPtr(v *AppSpecWorkerRoutesArgs) AppSpecWorkerRoutesPtrInput {
	return (*appSpecWorkerRoutesPtrType)(v)
}

func (*appSpecWorkerRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecWorkerRoutes)(nil)).Elem()
}

func (i *appSpecWorkerRoutesPtrType) ToAppSpecWorkerRoutesPtrOutput() AppSpecWorkerRoutesPtrOutput {
	return i.ToAppSpecWorkerRoutesPtrOutputWithContext(context.Background())
}

func (i *appSpecWorkerRoutesPtrType) ToAppSpecWorkerRoutesPtrOutputWithContext(ctx context.Context) AppSpecWorkerRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSpecWorkerRoutesPtrOutput)
}

type AppSpecWorkerRoutesOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSpecWorkerRoutes)(nil)).Elem()
}

func (o AppSpecWorkerRoutesOutput) ToAppSpecWorkerRoutesOutput() AppSpecWorkerRoutesOutput {
	return o
}

func (o AppSpecWorkerRoutesOutput) ToAppSpecWorkerRoutesOutputWithContext(ctx context.Context) AppSpecWorkerRoutesOutput {
	return o
}

func (o AppSpecWorkerRoutesOutput) ToAppSpecWorkerRoutesPtrOutput() AppSpecWorkerRoutesPtrOutput {
	return o.ToAppSpecWorkerRoutesPtrOutputWithContext(context.Background())
}

func (o AppSpecWorkerRoutesOutput) ToAppSpecWorkerRoutesPtrOutputWithContext(ctx context.Context) AppSpecWorkerRoutesPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerRoutes) *AppSpecWorkerRoutes {
		return &v
	}).(AppSpecWorkerRoutesPtrOutput)
}

// Paths must start with `/` and must be unique within the app.
func (o AppSpecWorkerRoutesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppSpecWorkerRoutes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type AppSpecWorkerRoutesPtrOutput struct{ *pulumi.OutputState }

func (AppSpecWorkerRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSpecWorkerRoutes)(nil)).Elem()
}

func (o AppSpecWorkerRoutesPtrOutput) ToAppSpecWorkerRoutesPtrOutput() AppSpecWorkerRoutesPtrOutput {
	return o
}

func (o AppSpecWorkerRoutesPtrOutput) ToAppSpecWorkerRoutesPtrOutputWithContext(ctx context.Context) AppSpecWorkerRoutesPtrOutput {
	return o
}

func (o AppSpecWorkerRoutesPtrOutput) Elem() AppSpecWorkerRoutesOutput {
	return o.ApplyT(func(v *AppSpecWorkerRoutes) AppSpecWorkerRoutes { return *v }).(AppSpecWorkerRoutesOutput)
}

// Paths must start with `/` and must be unique within the app.
func (o AppSpecWorkerRoutesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSpecWorkerRoutes) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type DatabaseClusterMaintenanceWindow struct {
	// The day of the week on which to apply maintenance updates.
	Day string `pulumi:"day"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour string `pulumi:"hour"`
}

// DatabaseClusterMaintenanceWindowInput is an input type that accepts DatabaseClusterMaintenanceWindowArgs and DatabaseClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `DatabaseClusterMaintenanceWindowInput` via:
//
//          DatabaseClusterMaintenanceWindowArgs{...}
type DatabaseClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToDatabaseClusterMaintenanceWindowOutput() DatabaseClusterMaintenanceWindowOutput
	ToDatabaseClusterMaintenanceWindowOutputWithContext(context.Context) DatabaseClusterMaintenanceWindowOutput
}

type DatabaseClusterMaintenanceWindowArgs struct {
	// The day of the week on which to apply maintenance updates.
	Day pulumi.StringInput `pulumi:"day"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour pulumi.StringInput `pulumi:"hour"`
}

func (DatabaseClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (i DatabaseClusterMaintenanceWindowArgs) ToDatabaseClusterMaintenanceWindowOutput() DatabaseClusterMaintenanceWindowOutput {
	return i.ToDatabaseClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i DatabaseClusterMaintenanceWindowArgs) ToDatabaseClusterMaintenanceWindowOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterMaintenanceWindowOutput)
}

// DatabaseClusterMaintenanceWindowArrayInput is an input type that accepts DatabaseClusterMaintenanceWindowArray and DatabaseClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `DatabaseClusterMaintenanceWindowArrayInput` via:
//
//          DatabaseClusterMaintenanceWindowArray{ DatabaseClusterMaintenanceWindowArgs{...} }
type DatabaseClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToDatabaseClusterMaintenanceWindowArrayOutput() DatabaseClusterMaintenanceWindowArrayOutput
	ToDatabaseClusterMaintenanceWindowArrayOutputWithContext(context.Context) DatabaseClusterMaintenanceWindowArrayOutput
}

type DatabaseClusterMaintenanceWindowArray []DatabaseClusterMaintenanceWindowInput

func (DatabaseClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (i DatabaseClusterMaintenanceWindowArray) ToDatabaseClusterMaintenanceWindowArrayOutput() DatabaseClusterMaintenanceWindowArrayOutput {
	return i.ToDatabaseClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i DatabaseClusterMaintenanceWindowArray) ToDatabaseClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterMaintenanceWindowArrayOutput)
}

type DatabaseClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (DatabaseClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (o DatabaseClusterMaintenanceWindowOutput) ToDatabaseClusterMaintenanceWindowOutput() DatabaseClusterMaintenanceWindowOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowOutput) ToDatabaseClusterMaintenanceWindowOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowOutput {
	return o
}

// The day of the week on which to apply maintenance updates.
func (o DatabaseClusterMaintenanceWindowOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseClusterMaintenanceWindow) string { return v.Day }).(pulumi.StringOutput)
}

// The hour in UTC at which maintenance updates will be applied in 24 hour format.
func (o DatabaseClusterMaintenanceWindowOutput) Hour() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseClusterMaintenanceWindow) string { return v.Hour }).(pulumi.StringOutput)
}

type DatabaseClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (DatabaseClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (o DatabaseClusterMaintenanceWindowArrayOutput) ToDatabaseClusterMaintenanceWindowArrayOutput() DatabaseClusterMaintenanceWindowArrayOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowArrayOutput) ToDatabaseClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowArrayOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) DatabaseClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseClusterMaintenanceWindow {
		return vs[0].([]DatabaseClusterMaintenanceWindow)[vs[1].(int)]
	}).(DatabaseClusterMaintenanceWindowOutput)
}

type DatabaseFirewallRule struct {
	// The date and time when the firewall rule was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The type of resource that the firewall rule allows to access the database cluster. The possible values are: `droplet`, `k8s`, `ipAddr`, or `tag`.
	Type string `pulumi:"type"`
	// A unique identifier for the firewall rule.
	Uuid *string `pulumi:"uuid"`
	// The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
	Value string `pulumi:"value"`
}

// DatabaseFirewallRuleInput is an input type that accepts DatabaseFirewallRuleArgs and DatabaseFirewallRuleOutput values.
// You can construct a concrete instance of `DatabaseFirewallRuleInput` via:
//
//          DatabaseFirewallRuleArgs{...}
type DatabaseFirewallRuleInput interface {
	pulumi.Input

	ToDatabaseFirewallRuleOutput() DatabaseFirewallRuleOutput
	ToDatabaseFirewallRuleOutputWithContext(context.Context) DatabaseFirewallRuleOutput
}

type DatabaseFirewallRuleArgs struct {
	// The date and time when the firewall rule was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The type of resource that the firewall rule allows to access the database cluster. The possible values are: `droplet`, `k8s`, `ipAddr`, or `tag`.
	Type pulumi.StringInput `pulumi:"type"`
	// A unique identifier for the firewall rule.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
	Value pulumi.StringInput `pulumi:"value"`
}

func (DatabaseFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFirewallRule)(nil)).Elem()
}

func (i DatabaseFirewallRuleArgs) ToDatabaseFirewallRuleOutput() DatabaseFirewallRuleOutput {
	return i.ToDatabaseFirewallRuleOutputWithContext(context.Background())
}

func (i DatabaseFirewallRuleArgs) ToDatabaseFirewallRuleOutputWithContext(ctx context.Context) DatabaseFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFirewallRuleOutput)
}

// DatabaseFirewallRuleArrayInput is an input type that accepts DatabaseFirewallRuleArray and DatabaseFirewallRuleArrayOutput values.
// You can construct a concrete instance of `DatabaseFirewallRuleArrayInput` via:
//
//          DatabaseFirewallRuleArray{ DatabaseFirewallRuleArgs{...} }
type DatabaseFirewallRuleArrayInput interface {
	pulumi.Input

	ToDatabaseFirewallRuleArrayOutput() DatabaseFirewallRuleArrayOutput
	ToDatabaseFirewallRuleArrayOutputWithContext(context.Context) DatabaseFirewallRuleArrayOutput
}

type DatabaseFirewallRuleArray []DatabaseFirewallRuleInput

func (DatabaseFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFirewallRule)(nil)).Elem()
}

func (i DatabaseFirewallRuleArray) ToDatabaseFirewallRuleArrayOutput() DatabaseFirewallRuleArrayOutput {
	return i.ToDatabaseFirewallRuleArrayOutputWithContext(context.Background())
}

func (i DatabaseFirewallRuleArray) ToDatabaseFirewallRuleArrayOutputWithContext(ctx context.Context) DatabaseFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFirewallRuleArrayOutput)
}

type DatabaseFirewallRuleOutput struct{ *pulumi.OutputState }

func (DatabaseFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFirewallRule)(nil)).Elem()
}

func (o DatabaseFirewallRuleOutput) ToDatabaseFirewallRuleOutput() DatabaseFirewallRuleOutput {
	return o
}

func (o DatabaseFirewallRuleOutput) ToDatabaseFirewallRuleOutputWithContext(ctx context.Context) DatabaseFirewallRuleOutput {
	return o
}

// The date and time when the firewall rule was created.
func (o DatabaseFirewallRuleOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFirewallRule) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The type of resource that the firewall rule allows to access the database cluster. The possible values are: `droplet`, `k8s`, `ipAddr`, or `tag`.
func (o DatabaseFirewallRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseFirewallRule) string { return v.Type }).(pulumi.StringOutput)
}

// A unique identifier for the firewall rule.
func (o DatabaseFirewallRuleOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFirewallRule) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
func (o DatabaseFirewallRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseFirewallRule) string { return v.Value }).(pulumi.StringOutput)
}

type DatabaseFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFirewallRule)(nil)).Elem()
}

func (o DatabaseFirewallRuleArrayOutput) ToDatabaseFirewallRuleArrayOutput() DatabaseFirewallRuleArrayOutput {
	return o
}

func (o DatabaseFirewallRuleArrayOutput) ToDatabaseFirewallRuleArrayOutputWithContext(ctx context.Context) DatabaseFirewallRuleArrayOutput {
	return o
}

func (o DatabaseFirewallRuleArrayOutput) Index(i pulumi.IntInput) DatabaseFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFirewallRule {
		return vs[0].([]DatabaseFirewallRule)[vs[1].(int)]
	}).(DatabaseFirewallRuleOutput)
}

type FirewallInboundRule struct {
	// The ports on which traffic will be allowed
	// specified as a string containing a single port, a range (e.g. "8000-9000"),
	// or "1-65535" to open all ports for a protocol. Required for when protocol is
	// `tcp` or `udp`.
	PortRange *string `pulumi:"portRange"`
	// The type of traffic to be allowed.
	// This may be one of "tcp", "udp", or "icmp".
	Protocol string `pulumi:"protocol"`
	// An array of strings containing the IPv4
	// addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
	// inbound traffic will be accepted.
	SourceAddresses []string `pulumi:"sourceAddresses"`
	// An array containing the IDs of
	// the Droplets from which the inbound traffic will be accepted.
	SourceDropletIds []int `pulumi:"sourceDropletIds"`
	// An array containing the IDs
	// of the Load Balancers from which the inbound traffic will be accepted.
	SourceLoadBalancerUids []string `pulumi:"sourceLoadBalancerUids"`
	// An array containing the names of Tags
	// corresponding to groups of Droplets from which the inbound traffic
	// will be accepted.
	SourceTags []string `pulumi:"sourceTags"`
}

// FirewallInboundRuleInput is an input type that accepts FirewallInboundRuleArgs and FirewallInboundRuleOutput values.
// You can construct a concrete instance of `FirewallInboundRuleInput` via:
//
//          FirewallInboundRuleArgs{...}
type FirewallInboundRuleInput interface {
	pulumi.Input

	ToFirewallInboundRuleOutput() FirewallInboundRuleOutput
	ToFirewallInboundRuleOutputWithContext(context.Context) FirewallInboundRuleOutput
}

type FirewallInboundRuleArgs struct {
	// The ports on which traffic will be allowed
	// specified as a string containing a single port, a range (e.g. "8000-9000"),
	// or "1-65535" to open all ports for a protocol. Required for when protocol is
	// `tcp` or `udp`.
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The type of traffic to be allowed.
	// This may be one of "tcp", "udp", or "icmp".
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// An array of strings containing the IPv4
	// addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
	// inbound traffic will be accepted.
	SourceAddresses pulumi.StringArrayInput `pulumi:"sourceAddresses"`
	// An array containing the IDs of
	// the Droplets from which the inbound traffic will be accepted.
	SourceDropletIds pulumi.IntArrayInput `pulumi:"sourceDropletIds"`
	// An array containing the IDs
	// of the Load Balancers from which the inbound traffic will be accepted.
	SourceLoadBalancerUids pulumi.StringArrayInput `pulumi:"sourceLoadBalancerUids"`
	// An array containing the names of Tags
	// corresponding to groups of Droplets from which the inbound traffic
	// will be accepted.
	SourceTags pulumi.StringArrayInput `pulumi:"sourceTags"`
}

func (FirewallInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallInboundRule)(nil)).Elem()
}

func (i FirewallInboundRuleArgs) ToFirewallInboundRuleOutput() FirewallInboundRuleOutput {
	return i.ToFirewallInboundRuleOutputWithContext(context.Background())
}

func (i FirewallInboundRuleArgs) ToFirewallInboundRuleOutputWithContext(ctx context.Context) FirewallInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInboundRuleOutput)
}

// FirewallInboundRuleArrayInput is an input type that accepts FirewallInboundRuleArray and FirewallInboundRuleArrayOutput values.
// You can construct a concrete instance of `FirewallInboundRuleArrayInput` via:
//
//          FirewallInboundRuleArray{ FirewallInboundRuleArgs{...} }
type FirewallInboundRuleArrayInput interface {
	pulumi.Input

	ToFirewallInboundRuleArrayOutput() FirewallInboundRuleArrayOutput
	ToFirewallInboundRuleArrayOutputWithContext(context.Context) FirewallInboundRuleArrayOutput
}

type FirewallInboundRuleArray []FirewallInboundRuleInput

func (FirewallInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallInboundRule)(nil)).Elem()
}

func (i FirewallInboundRuleArray) ToFirewallInboundRuleArrayOutput() FirewallInboundRuleArrayOutput {
	return i.ToFirewallInboundRuleArrayOutputWithContext(context.Background())
}

func (i FirewallInboundRuleArray) ToFirewallInboundRuleArrayOutputWithContext(ctx context.Context) FirewallInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInboundRuleArrayOutput)
}

type FirewallInboundRuleOutput struct{ *pulumi.OutputState }

func (FirewallInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallInboundRule)(nil)).Elem()
}

func (o FirewallInboundRuleOutput) ToFirewallInboundRuleOutput() FirewallInboundRuleOutput {
	return o
}

func (o FirewallInboundRuleOutput) ToFirewallInboundRuleOutputWithContext(ctx context.Context) FirewallInboundRuleOutput {
	return o
}

// The ports on which traffic will be allowed
// specified as a string containing a single port, a range (e.g. "8000-9000"),
// or "1-65535" to open all ports for a protocol. Required for when protocol is
// `tcp` or `udp`.
func (o FirewallInboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The type of traffic to be allowed.
// This may be one of "tcp", "udp", or "icmp".
func (o FirewallInboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

// An array of strings containing the IPv4
// addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
// inbound traffic will be accepted.
func (o FirewallInboundRuleOutput) SourceAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInboundRule) []string { return v.SourceAddresses }).(pulumi.StringArrayOutput)
}

// An array containing the IDs of
// the Droplets from which the inbound traffic will be accepted.
func (o FirewallInboundRuleOutput) SourceDropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v FirewallInboundRule) []int { return v.SourceDropletIds }).(pulumi.IntArrayOutput)
}

// An array containing the IDs
// of the Load Balancers from which the inbound traffic will be accepted.
func (o FirewallInboundRuleOutput) SourceLoadBalancerUids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInboundRule) []string { return v.SourceLoadBalancerUids }).(pulumi.StringArrayOutput)
}

// An array containing the names of Tags
// corresponding to groups of Droplets from which the inbound traffic
// will be accepted.
func (o FirewallInboundRuleOutput) SourceTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInboundRule) []string { return v.SourceTags }).(pulumi.StringArrayOutput)
}

type FirewallInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallInboundRule)(nil)).Elem()
}

func (o FirewallInboundRuleArrayOutput) ToFirewallInboundRuleArrayOutput() FirewallInboundRuleArrayOutput {
	return o
}

func (o FirewallInboundRuleArrayOutput) ToFirewallInboundRuleArrayOutputWithContext(ctx context.Context) FirewallInboundRuleArrayOutput {
	return o
}

func (o FirewallInboundRuleArrayOutput) Index(i pulumi.IntInput) FirewallInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallInboundRule {
		return vs[0].([]FirewallInboundRule)[vs[1].(int)]
	}).(FirewallInboundRuleOutput)
}

type FirewallOutboundRule struct {
	// An array of strings containing the IPv4
	// addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs to which the
	// outbound traffic will be allowed.
	DestinationAddresses []string `pulumi:"destinationAddresses"`
	// An array containing the IDs of
	// the Droplets to which the outbound traffic will be allowed.
	DestinationDropletIds []int `pulumi:"destinationDropletIds"`
	// An array containing the IDs
	// of the Load Balancers to which the outbound traffic will be allowed.
	DestinationLoadBalancerUids []string `pulumi:"destinationLoadBalancerUids"`
	// An array containing the names of Tags
	// corresponding to groups of Droplets to which the outbound traffic will
	// be allowed.
	// traffic.
	DestinationTags []string `pulumi:"destinationTags"`
	// The ports on which traffic will be allowed
	// specified as a string containing a single port, a range (e.g. "8000-9000"),
	// or "1-65535" to open all ports for a protocol. Required for when protocol is
	// `tcp` or `udp`.
	PortRange *string `pulumi:"portRange"`
	// The type of traffic to be allowed.
	// This may be one of "tcp", "udp", or "icmp".
	Protocol string `pulumi:"protocol"`
}

// FirewallOutboundRuleInput is an input type that accepts FirewallOutboundRuleArgs and FirewallOutboundRuleOutput values.
// You can construct a concrete instance of `FirewallOutboundRuleInput` via:
//
//          FirewallOutboundRuleArgs{...}
type FirewallOutboundRuleInput interface {
	pulumi.Input

	ToFirewallOutboundRuleOutput() FirewallOutboundRuleOutput
	ToFirewallOutboundRuleOutputWithContext(context.Context) FirewallOutboundRuleOutput
}

type FirewallOutboundRuleArgs struct {
	// An array of strings containing the IPv4
	// addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs to which the
	// outbound traffic will be allowed.
	DestinationAddresses pulumi.StringArrayInput `pulumi:"destinationAddresses"`
	// An array containing the IDs of
	// the Droplets to which the outbound traffic will be allowed.
	DestinationDropletIds pulumi.IntArrayInput `pulumi:"destinationDropletIds"`
	// An array containing the IDs
	// of the Load Balancers to which the outbound traffic will be allowed.
	DestinationLoadBalancerUids pulumi.StringArrayInput `pulumi:"destinationLoadBalancerUids"`
	// An array containing the names of Tags
	// corresponding to groups of Droplets to which the outbound traffic will
	// be allowed.
	// traffic.
	DestinationTags pulumi.StringArrayInput `pulumi:"destinationTags"`
	// The ports on which traffic will be allowed
	// specified as a string containing a single port, a range (e.g. "8000-9000"),
	// or "1-65535" to open all ports for a protocol. Required for when protocol is
	// `tcp` or `udp`.
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The type of traffic to be allowed.
	// This may be one of "tcp", "udp", or "icmp".
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (FirewallOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallOutboundRule)(nil)).Elem()
}

func (i FirewallOutboundRuleArgs) ToFirewallOutboundRuleOutput() FirewallOutboundRuleOutput {
	return i.ToFirewallOutboundRuleOutputWithContext(context.Background())
}

func (i FirewallOutboundRuleArgs) ToFirewallOutboundRuleOutputWithContext(ctx context.Context) FirewallOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutboundRuleOutput)
}

// FirewallOutboundRuleArrayInput is an input type that accepts FirewallOutboundRuleArray and FirewallOutboundRuleArrayOutput values.
// You can construct a concrete instance of `FirewallOutboundRuleArrayInput` via:
//
//          FirewallOutboundRuleArray{ FirewallOutboundRuleArgs{...} }
type FirewallOutboundRuleArrayInput interface {
	pulumi.Input

	ToFirewallOutboundRuleArrayOutput() FirewallOutboundRuleArrayOutput
	ToFirewallOutboundRuleArrayOutputWithContext(context.Context) FirewallOutboundRuleArrayOutput
}

type FirewallOutboundRuleArray []FirewallOutboundRuleInput

func (FirewallOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallOutboundRule)(nil)).Elem()
}

func (i FirewallOutboundRuleArray) ToFirewallOutboundRuleArrayOutput() FirewallOutboundRuleArrayOutput {
	return i.ToFirewallOutboundRuleArrayOutputWithContext(context.Background())
}

func (i FirewallOutboundRuleArray) ToFirewallOutboundRuleArrayOutputWithContext(ctx context.Context) FirewallOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutboundRuleArrayOutput)
}

type FirewallOutboundRuleOutput struct{ *pulumi.OutputState }

func (FirewallOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallOutboundRule)(nil)).Elem()
}

func (o FirewallOutboundRuleOutput) ToFirewallOutboundRuleOutput() FirewallOutboundRuleOutput {
	return o
}

func (o FirewallOutboundRuleOutput) ToFirewallOutboundRuleOutputWithContext(ctx context.Context) FirewallOutboundRuleOutput {
	return o
}

// An array of strings containing the IPv4
// addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs to which the
// outbound traffic will be allowed.
func (o FirewallOutboundRuleOutput) DestinationAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallOutboundRule) []string { return v.DestinationAddresses }).(pulumi.StringArrayOutput)
}

// An array containing the IDs of
// the Droplets to which the outbound traffic will be allowed.
func (o FirewallOutboundRuleOutput) DestinationDropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v FirewallOutboundRule) []int { return v.DestinationDropletIds }).(pulumi.IntArrayOutput)
}

// An array containing the IDs
// of the Load Balancers to which the outbound traffic will be allowed.
func (o FirewallOutboundRuleOutput) DestinationLoadBalancerUids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallOutboundRule) []string { return v.DestinationLoadBalancerUids }).(pulumi.StringArrayOutput)
}

// An array containing the names of Tags
// corresponding to groups of Droplets to which the outbound traffic will
// be allowed.
// traffic.
func (o FirewallOutboundRuleOutput) DestinationTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallOutboundRule) []string { return v.DestinationTags }).(pulumi.StringArrayOutput)
}

// The ports on which traffic will be allowed
// specified as a string containing a single port, a range (e.g. "8000-9000"),
// or "1-65535" to open all ports for a protocol. Required for when protocol is
// `tcp` or `udp`.
func (o FirewallOutboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallOutboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The type of traffic to be allowed.
// This may be one of "tcp", "udp", or "icmp".
func (o FirewallOutboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallOutboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type FirewallOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallOutboundRule)(nil)).Elem()
}

func (o FirewallOutboundRuleArrayOutput) ToFirewallOutboundRuleArrayOutput() FirewallOutboundRuleArrayOutput {
	return o
}

func (o FirewallOutboundRuleArrayOutput) ToFirewallOutboundRuleArrayOutputWithContext(ctx context.Context) FirewallOutboundRuleArrayOutput {
	return o
}

func (o FirewallOutboundRuleArrayOutput) Index(i pulumi.IntInput) FirewallOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallOutboundRule {
		return vs[0].([]FirewallOutboundRule)[vs[1].(int)]
	}).(FirewallOutboundRuleOutput)
}

type FirewallPendingChange struct {
	DropletId *int  `pulumi:"dropletId"`
	Removing  *bool `pulumi:"removing"`
	// A status string indicating the current state of the Firewall.
	// This can be "waiting", "succeeded", or "failed".
	Status *string `pulumi:"status"`
}

// FirewallPendingChangeInput is an input type that accepts FirewallPendingChangeArgs and FirewallPendingChangeOutput values.
// You can construct a concrete instance of `FirewallPendingChangeInput` via:
//
//          FirewallPendingChangeArgs{...}
type FirewallPendingChangeInput interface {
	pulumi.Input

	ToFirewallPendingChangeOutput() FirewallPendingChangeOutput
	ToFirewallPendingChangeOutputWithContext(context.Context) FirewallPendingChangeOutput
}

type FirewallPendingChangeArgs struct {
	DropletId pulumi.IntPtrInput  `pulumi:"dropletId"`
	Removing  pulumi.BoolPtrInput `pulumi:"removing"`
	// A status string indicating the current state of the Firewall.
	// This can be "waiting", "succeeded", or "failed".
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (FirewallPendingChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPendingChange)(nil)).Elem()
}

func (i FirewallPendingChangeArgs) ToFirewallPendingChangeOutput() FirewallPendingChangeOutput {
	return i.ToFirewallPendingChangeOutputWithContext(context.Background())
}

func (i FirewallPendingChangeArgs) ToFirewallPendingChangeOutputWithContext(ctx context.Context) FirewallPendingChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPendingChangeOutput)
}

// FirewallPendingChangeArrayInput is an input type that accepts FirewallPendingChangeArray and FirewallPendingChangeArrayOutput values.
// You can construct a concrete instance of `FirewallPendingChangeArrayInput` via:
//
//          FirewallPendingChangeArray{ FirewallPendingChangeArgs{...} }
type FirewallPendingChangeArrayInput interface {
	pulumi.Input

	ToFirewallPendingChangeArrayOutput() FirewallPendingChangeArrayOutput
	ToFirewallPendingChangeArrayOutputWithContext(context.Context) FirewallPendingChangeArrayOutput
}

type FirewallPendingChangeArray []FirewallPendingChangeInput

func (FirewallPendingChangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPendingChange)(nil)).Elem()
}

func (i FirewallPendingChangeArray) ToFirewallPendingChangeArrayOutput() FirewallPendingChangeArrayOutput {
	return i.ToFirewallPendingChangeArrayOutputWithContext(context.Background())
}

func (i FirewallPendingChangeArray) ToFirewallPendingChangeArrayOutputWithContext(ctx context.Context) FirewallPendingChangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPendingChangeArrayOutput)
}

type FirewallPendingChangeOutput struct{ *pulumi.OutputState }

func (FirewallPendingChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPendingChange)(nil)).Elem()
}

func (o FirewallPendingChangeOutput) ToFirewallPendingChangeOutput() FirewallPendingChangeOutput {
	return o
}

func (o FirewallPendingChangeOutput) ToFirewallPendingChangeOutputWithContext(ctx context.Context) FirewallPendingChangeOutput {
	return o
}

func (o FirewallPendingChangeOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPendingChange) *int { return v.DropletId }).(pulumi.IntPtrOutput)
}

func (o FirewallPendingChangeOutput) Removing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPendingChange) *bool { return v.Removing }).(pulumi.BoolPtrOutput)
}

// A status string indicating the current state of the Firewall.
// This can be "waiting", "succeeded", or "failed".
func (o FirewallPendingChangeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPendingChange) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type FirewallPendingChangeArrayOutput struct{ *pulumi.OutputState }

func (FirewallPendingChangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPendingChange)(nil)).Elem()
}

func (o FirewallPendingChangeArrayOutput) ToFirewallPendingChangeArrayOutput() FirewallPendingChangeArrayOutput {
	return o
}

func (o FirewallPendingChangeArrayOutput) ToFirewallPendingChangeArrayOutputWithContext(ctx context.Context) FirewallPendingChangeArrayOutput {
	return o
}

func (o FirewallPendingChangeArrayOutput) Index(i pulumi.IntInput) FirewallPendingChangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPendingChange {
		return vs[0].([]FirewallPendingChange)[vs[1].(int)]
	}).(FirewallPendingChangeOutput)
}

type KubernetesClusterKubeConfig struct {
	// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientKey *string `pulumi:"clientKey"`
	// The base64 encoded public certificate for the cluster's certificate authority.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// The date and time when the credentials will expire and need to be regenerated.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The URL of the API server on the Kubernetes master node.
	Host *string `pulumi:"host"`
	// The full contents of the Kubernetes cluster's kubeconfig file.
	RawConfig *string `pulumi:"rawConfig"`
	// The DigitalOcean API access token used by clients to access the cluster.
	Token *string `pulumi:"token"`
}

// KubernetesClusterKubeConfigInput is an input type that accepts KubernetesClusterKubeConfigArgs and KubernetesClusterKubeConfigOutput values.
// You can construct a concrete instance of `KubernetesClusterKubeConfigInput` via:
//
//          KubernetesClusterKubeConfigArgs{...}
type KubernetesClusterKubeConfigInput interface {
	pulumi.Input

	ToKubernetesClusterKubeConfigOutput() KubernetesClusterKubeConfigOutput
	ToKubernetesClusterKubeConfigOutputWithContext(context.Context) KubernetesClusterKubeConfigOutput
}

type KubernetesClusterKubeConfigArgs struct {
	// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The base64 encoded public certificate for the cluster's certificate authority.
	ClusterCaCertificate pulumi.StringPtrInput `pulumi:"clusterCaCertificate"`
	// The date and time when the credentials will expire and need to be regenerated.
	ExpiresAt pulumi.StringPtrInput `pulumi:"expiresAt"`
	// The URL of the API server on the Kubernetes master node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The full contents of the Kubernetes cluster's kubeconfig file.
	RawConfig pulumi.StringPtrInput `pulumi:"rawConfig"`
	// The DigitalOcean API access token used by clients to access the cluster.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (KubernetesClusterKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterKubeConfig)(nil)).Elem()
}

func (i KubernetesClusterKubeConfigArgs) ToKubernetesClusterKubeConfigOutput() KubernetesClusterKubeConfigOutput {
	return i.ToKubernetesClusterKubeConfigOutputWithContext(context.Background())
}

func (i KubernetesClusterKubeConfigArgs) ToKubernetesClusterKubeConfigOutputWithContext(ctx context.Context) KubernetesClusterKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterKubeConfigOutput)
}

// KubernetesClusterKubeConfigArrayInput is an input type that accepts KubernetesClusterKubeConfigArray and KubernetesClusterKubeConfigArrayOutput values.
// You can construct a concrete instance of `KubernetesClusterKubeConfigArrayInput` via:
//
//          KubernetesClusterKubeConfigArray{ KubernetesClusterKubeConfigArgs{...} }
type KubernetesClusterKubeConfigArrayInput interface {
	pulumi.Input

	ToKubernetesClusterKubeConfigArrayOutput() KubernetesClusterKubeConfigArrayOutput
	ToKubernetesClusterKubeConfigArrayOutputWithContext(context.Context) KubernetesClusterKubeConfigArrayOutput
}

type KubernetesClusterKubeConfigArray []KubernetesClusterKubeConfigInput

func (KubernetesClusterKubeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterKubeConfig)(nil)).Elem()
}

func (i KubernetesClusterKubeConfigArray) ToKubernetesClusterKubeConfigArrayOutput() KubernetesClusterKubeConfigArrayOutput {
	return i.ToKubernetesClusterKubeConfigArrayOutputWithContext(context.Background())
}

func (i KubernetesClusterKubeConfigArray) ToKubernetesClusterKubeConfigArrayOutputWithContext(ctx context.Context) KubernetesClusterKubeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterKubeConfigArrayOutput)
}

type KubernetesClusterKubeConfigOutput struct{ *pulumi.OutputState }

func (KubernetesClusterKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterKubeConfig)(nil)).Elem()
}

func (o KubernetesClusterKubeConfigOutput) ToKubernetesClusterKubeConfigOutput() KubernetesClusterKubeConfigOutput {
	return o
}

func (o KubernetesClusterKubeConfigOutput) ToKubernetesClusterKubeConfigOutputWithContext(ctx context.Context) KubernetesClusterKubeConfigOutput {
	return o
}

// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
func (o KubernetesClusterKubeConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
func (o KubernetesClusterKubeConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The base64 encoded public certificate for the cluster's certificate authority.
func (o KubernetesClusterKubeConfigOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

// The date and time when the credentials will expire and need to be regenerated.
func (o KubernetesClusterKubeConfigOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The URL of the API server on the Kubernetes master node.
func (o KubernetesClusterKubeConfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The full contents of the Kubernetes cluster's kubeconfig file.
func (o KubernetesClusterKubeConfigOutput) RawConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.RawConfig }).(pulumi.StringPtrOutput)
}

// The DigitalOcean API access token used by clients to access the cluster.
func (o KubernetesClusterKubeConfigOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterKubeConfig) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type KubernetesClusterKubeConfigArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterKubeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterKubeConfig)(nil)).Elem()
}

func (o KubernetesClusterKubeConfigArrayOutput) ToKubernetesClusterKubeConfigArrayOutput() KubernetesClusterKubeConfigArrayOutput {
	return o
}

func (o KubernetesClusterKubeConfigArrayOutput) ToKubernetesClusterKubeConfigArrayOutputWithContext(ctx context.Context) KubernetesClusterKubeConfigArrayOutput {
	return o
}

func (o KubernetesClusterKubeConfigArrayOutput) Index(i pulumi.IntInput) KubernetesClusterKubeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterKubeConfig {
		return vs[0].([]KubernetesClusterKubeConfig)[vs[1].(int)]
	}).(KubernetesClusterKubeConfigOutput)
}

type KubernetesClusterNodePool struct {
	// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount *int `pulumi:"actualNodeCount"`
	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale *bool `pulumi:"autoScale"`
	// A unique ID that can be used to identify and reference the node.
	Id *string `pulumi:"id"`
	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
	Labels map[string]string `pulumi:"labels"`
	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes *int `pulumi:"maxNodes"`
	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes *int `pulumi:"minNodes"`
	// A name for the node pool.
	Name string `pulumi:"name"`
	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount *int `pulumi:"nodeCount"`
	// A list of nodes in the pool. Each node exports the following attributes:
	Nodes []KubernetesClusterNodePoolNode `pulumi:"nodes"`
	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size string `pulumi:"size"`
	// A list of tag names to be applied to the Kubernetes cluster.
	Tags []string `pulumi:"tags"`
}

// KubernetesClusterNodePoolInput is an input type that accepts KubernetesClusterNodePoolArgs and KubernetesClusterNodePoolOutput values.
// You can construct a concrete instance of `KubernetesClusterNodePoolInput` via:
//
//          KubernetesClusterNodePoolArgs{...}
type KubernetesClusterNodePoolInput interface {
	pulumi.Input

	ToKubernetesClusterNodePoolOutput() KubernetesClusterNodePoolOutput
	ToKubernetesClusterNodePoolOutputWithContext(context.Context) KubernetesClusterNodePoolOutput
}

type KubernetesClusterNodePoolArgs struct {
	// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount pulumi.IntPtrInput `pulumi:"actualNodeCount"`
	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale pulumi.BoolPtrInput `pulumi:"autoScale"`
	// A unique ID that can be used to identify and reference the node.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes pulumi.IntPtrInput `pulumi:"minNodes"`
	// A name for the node pool.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// A list of nodes in the pool. Each node exports the following attributes:
	Nodes KubernetesClusterNodePoolNodeArrayInput `pulumi:"nodes"`
	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size pulumi.StringInput `pulumi:"size"`
	// A list of tag names to be applied to the Kubernetes cluster.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (KubernetesClusterNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterNodePool)(nil)).Elem()
}

func (i KubernetesClusterNodePoolArgs) ToKubernetesClusterNodePoolOutput() KubernetesClusterNodePoolOutput {
	return i.ToKubernetesClusterNodePoolOutputWithContext(context.Background())
}

func (i KubernetesClusterNodePoolArgs) ToKubernetesClusterNodePoolOutputWithContext(ctx context.Context) KubernetesClusterNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterNodePoolOutput)
}

func (i KubernetesClusterNodePoolArgs) ToKubernetesClusterNodePoolPtrOutput() KubernetesClusterNodePoolPtrOutput {
	return i.ToKubernetesClusterNodePoolPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterNodePoolArgs) ToKubernetesClusterNodePoolPtrOutputWithContext(ctx context.Context) KubernetesClusterNodePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterNodePoolOutput).ToKubernetesClusterNodePoolPtrOutputWithContext(ctx)
}

// KubernetesClusterNodePoolPtrInput is an input type that accepts KubernetesClusterNodePoolArgs, KubernetesClusterNodePoolPtr and KubernetesClusterNodePoolPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterNodePoolPtrInput` via:
//
//          KubernetesClusterNodePoolArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterNodePoolPtrInput interface {
	pulumi.Input

	ToKubernetesClusterNodePoolPtrOutput() KubernetesClusterNodePoolPtrOutput
	ToKubernetesClusterNodePoolPtrOutputWithContext(context.Context) KubernetesClusterNodePoolPtrOutput
}

type kubernetesClusterNodePoolPtrType KubernetesClusterNodePoolArgs

func KubernetesClusterNodePoolPtr(v *KubernetesClusterNodePoolArgs) KubernetesClusterNodePoolPtrInput {
	return (*kubernetesClusterNodePoolPtrType)(v)
}

func (*kubernetesClusterNodePoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterNodePool)(nil)).Elem()
}

func (i *kubernetesClusterNodePoolPtrType) ToKubernetesClusterNodePoolPtrOutput() KubernetesClusterNodePoolPtrOutput {
	return i.ToKubernetesClusterNodePoolPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterNodePoolPtrType) ToKubernetesClusterNodePoolPtrOutputWithContext(ctx context.Context) KubernetesClusterNodePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterNodePoolPtrOutput)
}

type KubernetesClusterNodePoolOutput struct{ *pulumi.OutputState }

func (KubernetesClusterNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterNodePool)(nil)).Elem()
}

func (o KubernetesClusterNodePoolOutput) ToKubernetesClusterNodePoolOutput() KubernetesClusterNodePoolOutput {
	return o
}

func (o KubernetesClusterNodePoolOutput) ToKubernetesClusterNodePoolOutputWithContext(ctx context.Context) KubernetesClusterNodePoolOutput {
	return o
}

func (o KubernetesClusterNodePoolOutput) ToKubernetesClusterNodePoolPtrOutput() KubernetesClusterNodePoolPtrOutput {
	return o.ToKubernetesClusterNodePoolPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterNodePoolOutput) ToKubernetesClusterNodePoolPtrOutputWithContext(ctx context.Context) KubernetesClusterNodePoolPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *KubernetesClusterNodePool {
		return &v
	}).(KubernetesClusterNodePoolPtrOutput)
}

// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
func (o KubernetesClusterNodePoolOutput) ActualNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *int { return v.ActualNodeCount }).(pulumi.IntPtrOutput)
}

// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
func (o KubernetesClusterNodePoolOutput) AutoScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *bool { return v.AutoScale }).(pulumi.BoolPtrOutput)
}

// A unique ID that can be used to identify and reference the node.
func (o KubernetesClusterNodePoolOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
func (o KubernetesClusterNodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
func (o KubernetesClusterNodePoolOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
func (o KubernetesClusterNodePoolOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *int { return v.MinNodes }).(pulumi.IntPtrOutput)
}

// A name for the node pool.
func (o KubernetesClusterNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) string { return v.Name }).(pulumi.StringOutput)
}

// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
func (o KubernetesClusterNodePoolOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// A list of nodes in the pool. Each node exports the following attributes:
func (o KubernetesClusterNodePoolOutput) Nodes() KubernetesClusterNodePoolNodeArrayOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) []KubernetesClusterNodePoolNode { return v.Nodes }).(KubernetesClusterNodePoolNodeArrayOutput)
}

// The slug identifier for the type of Droplet to be used as workers in the node pool.
func (o KubernetesClusterNodePoolOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) string { return v.Size }).(pulumi.StringOutput)
}

// A list of tag names to be applied to the Kubernetes cluster.
func (o KubernetesClusterNodePoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubernetesClusterNodePool) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type KubernetesClusterNodePoolPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterNodePoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterNodePool)(nil)).Elem()
}

func (o KubernetesClusterNodePoolPtrOutput) ToKubernetesClusterNodePoolPtrOutput() KubernetesClusterNodePoolPtrOutput {
	return o
}

func (o KubernetesClusterNodePoolPtrOutput) ToKubernetesClusterNodePoolPtrOutputWithContext(ctx context.Context) KubernetesClusterNodePoolPtrOutput {
	return o
}

func (o KubernetesClusterNodePoolPtrOutput) Elem() KubernetesClusterNodePoolOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) KubernetesClusterNodePool { return *v }).(KubernetesClusterNodePoolOutput)
}

// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
func (o KubernetesClusterNodePoolPtrOutput) ActualNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *int {
		if v == nil {
			return nil
		}
		return v.ActualNodeCount
	}).(pulumi.IntPtrOutput)
}

// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
func (o KubernetesClusterNodePoolPtrOutput) AutoScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *bool {
		if v == nil {
			return nil
		}
		return v.AutoScale
	}).(pulumi.BoolPtrOutput)
}

// A unique ID that can be used to identify and reference the node.
func (o KubernetesClusterNodePoolPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
func (o KubernetesClusterNodePoolPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
func (o KubernetesClusterNodePoolPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
func (o KubernetesClusterNodePoolPtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *int {
		if v == nil {
			return nil
		}
		return v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// A name for the node pool.
func (o KubernetesClusterNodePoolPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
func (o KubernetesClusterNodePoolPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// A list of nodes in the pool. Each node exports the following attributes:
func (o KubernetesClusterNodePoolPtrOutput) Nodes() KubernetesClusterNodePoolNodeArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) []KubernetesClusterNodePoolNode {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(KubernetesClusterNodePoolNodeArrayOutput)
}

// The slug identifier for the type of Droplet to be used as workers in the node pool.
func (o KubernetesClusterNodePoolPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) *string {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.StringPtrOutput)
}

// A list of tag names to be applied to the Kubernetes cluster.
func (o KubernetesClusterNodePoolPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterNodePool) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type KubernetesClusterNodePoolNode struct {
	// The date and time when the node was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The id of the node's droplet
	DropletId *string `pulumi:"dropletId"`
	// A unique ID that can be used to identify and reference the node.
	Id *string `pulumi:"id"`
	// A name for the node pool.
	Name *string `pulumi:"name"`
	// A string indicating the current status of the individual node.
	Status *string `pulumi:"status"`
	// The date and time when the node was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// KubernetesClusterNodePoolNodeInput is an input type that accepts KubernetesClusterNodePoolNodeArgs and KubernetesClusterNodePoolNodeOutput values.
// You can construct a concrete instance of `KubernetesClusterNodePoolNodeInput` via:
//
//          KubernetesClusterNodePoolNodeArgs{...}
type KubernetesClusterNodePoolNodeInput interface {
	pulumi.Input

	ToKubernetesClusterNodePoolNodeOutput() KubernetesClusterNodePoolNodeOutput
	ToKubernetesClusterNodePoolNodeOutputWithContext(context.Context) KubernetesClusterNodePoolNodeOutput
}

type KubernetesClusterNodePoolNodeArgs struct {
	// The date and time when the node was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The id of the node's droplet
	DropletId pulumi.StringPtrInput `pulumi:"dropletId"`
	// A unique ID that can be used to identify and reference the node.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A name for the node pool.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A string indicating the current status of the individual node.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The date and time when the node was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (KubernetesClusterNodePoolNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterNodePoolNode)(nil)).Elem()
}

func (i KubernetesClusterNodePoolNodeArgs) ToKubernetesClusterNodePoolNodeOutput() KubernetesClusterNodePoolNodeOutput {
	return i.ToKubernetesClusterNodePoolNodeOutputWithContext(context.Background())
}

func (i KubernetesClusterNodePoolNodeArgs) ToKubernetesClusterNodePoolNodeOutputWithContext(ctx context.Context) KubernetesClusterNodePoolNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterNodePoolNodeOutput)
}

// KubernetesClusterNodePoolNodeArrayInput is an input type that accepts KubernetesClusterNodePoolNodeArray and KubernetesClusterNodePoolNodeArrayOutput values.
// You can construct a concrete instance of `KubernetesClusterNodePoolNodeArrayInput` via:
//
//          KubernetesClusterNodePoolNodeArray{ KubernetesClusterNodePoolNodeArgs{...} }
type KubernetesClusterNodePoolNodeArrayInput interface {
	pulumi.Input

	ToKubernetesClusterNodePoolNodeArrayOutput() KubernetesClusterNodePoolNodeArrayOutput
	ToKubernetesClusterNodePoolNodeArrayOutputWithContext(context.Context) KubernetesClusterNodePoolNodeArrayOutput
}

type KubernetesClusterNodePoolNodeArray []KubernetesClusterNodePoolNodeInput

func (KubernetesClusterNodePoolNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterNodePoolNode)(nil)).Elem()
}

func (i KubernetesClusterNodePoolNodeArray) ToKubernetesClusterNodePoolNodeArrayOutput() KubernetesClusterNodePoolNodeArrayOutput {
	return i.ToKubernetesClusterNodePoolNodeArrayOutputWithContext(context.Background())
}

func (i KubernetesClusterNodePoolNodeArray) ToKubernetesClusterNodePoolNodeArrayOutputWithContext(ctx context.Context) KubernetesClusterNodePoolNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterNodePoolNodeArrayOutput)
}

type KubernetesClusterNodePoolNodeOutput struct{ *pulumi.OutputState }

func (KubernetesClusterNodePoolNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterNodePoolNode)(nil)).Elem()
}

func (o KubernetesClusterNodePoolNodeOutput) ToKubernetesClusterNodePoolNodeOutput() KubernetesClusterNodePoolNodeOutput {
	return o
}

func (o KubernetesClusterNodePoolNodeOutput) ToKubernetesClusterNodePoolNodeOutputWithContext(ctx context.Context) KubernetesClusterNodePoolNodeOutput {
	return o
}

// The date and time when the node was created.
func (o KubernetesClusterNodePoolNodeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePoolNode) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The id of the node's droplet
func (o KubernetesClusterNodePoolNodeOutput) DropletId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePoolNode) *string { return v.DropletId }).(pulumi.StringPtrOutput)
}

// A unique ID that can be used to identify and reference the node.
func (o KubernetesClusterNodePoolNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePoolNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A name for the node pool.
func (o KubernetesClusterNodePoolNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePoolNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A string indicating the current status of the individual node.
func (o KubernetesClusterNodePoolNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePoolNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The date and time when the node was last updated.
func (o KubernetesClusterNodePoolNodeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterNodePoolNode) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type KubernetesClusterNodePoolNodeArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterNodePoolNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterNodePoolNode)(nil)).Elem()
}

func (o KubernetesClusterNodePoolNodeArrayOutput) ToKubernetesClusterNodePoolNodeArrayOutput() KubernetesClusterNodePoolNodeArrayOutput {
	return o
}

func (o KubernetesClusterNodePoolNodeArrayOutput) ToKubernetesClusterNodePoolNodeArrayOutputWithContext(ctx context.Context) KubernetesClusterNodePoolNodeArrayOutput {
	return o
}

func (o KubernetesClusterNodePoolNodeArrayOutput) Index(i pulumi.IntInput) KubernetesClusterNodePoolNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterNodePoolNode {
		return vs[0].([]KubernetesClusterNodePoolNode)[vs[1].(int)]
	}).(KubernetesClusterNodePoolNodeOutput)
}

type KubernetesNodePoolNode struct {
	// The date and time when the node was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The id of the node's droplet
	DropletId *string `pulumi:"dropletId"`
	// A unique ID that can be used to identify and reference the node.
	Id *string `pulumi:"id"`
	// A name for the node pool.
	Name *string `pulumi:"name"`
	// A string indicating the current status of the individual node.
	Status *string `pulumi:"status"`
	// The date and time when the node was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// KubernetesNodePoolNodeInput is an input type that accepts KubernetesNodePoolNodeArgs and KubernetesNodePoolNodeOutput values.
// You can construct a concrete instance of `KubernetesNodePoolNodeInput` via:
//
//          KubernetesNodePoolNodeArgs{...}
type KubernetesNodePoolNodeInput interface {
	pulumi.Input

	ToKubernetesNodePoolNodeOutput() KubernetesNodePoolNodeOutput
	ToKubernetesNodePoolNodeOutputWithContext(context.Context) KubernetesNodePoolNodeOutput
}

type KubernetesNodePoolNodeArgs struct {
	// The date and time when the node was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The id of the node's droplet
	DropletId pulumi.StringPtrInput `pulumi:"dropletId"`
	// A unique ID that can be used to identify and reference the node.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A name for the node pool.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A string indicating the current status of the individual node.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The date and time when the node was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (KubernetesNodePoolNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolNode)(nil)).Elem()
}

func (i KubernetesNodePoolNodeArgs) ToKubernetesNodePoolNodeOutput() KubernetesNodePoolNodeOutput {
	return i.ToKubernetesNodePoolNodeOutputWithContext(context.Background())
}

func (i KubernetesNodePoolNodeArgs) ToKubernetesNodePoolNodeOutputWithContext(ctx context.Context) KubernetesNodePoolNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolNodeOutput)
}

// KubernetesNodePoolNodeArrayInput is an input type that accepts KubernetesNodePoolNodeArray and KubernetesNodePoolNodeArrayOutput values.
// You can construct a concrete instance of `KubernetesNodePoolNodeArrayInput` via:
//
//          KubernetesNodePoolNodeArray{ KubernetesNodePoolNodeArgs{...} }
type KubernetesNodePoolNodeArrayInput interface {
	pulumi.Input

	ToKubernetesNodePoolNodeArrayOutput() KubernetesNodePoolNodeArrayOutput
	ToKubernetesNodePoolNodeArrayOutputWithContext(context.Context) KubernetesNodePoolNodeArrayOutput
}

type KubernetesNodePoolNodeArray []KubernetesNodePoolNodeInput

func (KubernetesNodePoolNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesNodePoolNode)(nil)).Elem()
}

func (i KubernetesNodePoolNodeArray) ToKubernetesNodePoolNodeArrayOutput() KubernetesNodePoolNodeArrayOutput {
	return i.ToKubernetesNodePoolNodeArrayOutputWithContext(context.Background())
}

func (i KubernetesNodePoolNodeArray) ToKubernetesNodePoolNodeArrayOutputWithContext(ctx context.Context) KubernetesNodePoolNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolNodeArrayOutput)
}

type KubernetesNodePoolNodeOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesNodePoolNode)(nil)).Elem()
}

func (o KubernetesNodePoolNodeOutput) ToKubernetesNodePoolNodeOutput() KubernetesNodePoolNodeOutput {
	return o
}

func (o KubernetesNodePoolNodeOutput) ToKubernetesNodePoolNodeOutputWithContext(ctx context.Context) KubernetesNodePoolNodeOutput {
	return o
}

// The date and time when the node was created.
func (o KubernetesNodePoolNodeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolNode) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The id of the node's droplet
func (o KubernetesNodePoolNodeOutput) DropletId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolNode) *string { return v.DropletId }).(pulumi.StringPtrOutput)
}

// A unique ID that can be used to identify and reference the node.
func (o KubernetesNodePoolNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A name for the node pool.
func (o KubernetesNodePoolNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A string indicating the current status of the individual node.
func (o KubernetesNodePoolNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The date and time when the node was last updated.
func (o KubernetesNodePoolNodeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesNodePoolNode) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type KubernetesNodePoolNodeArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesNodePoolNode)(nil)).Elem()
}

func (o KubernetesNodePoolNodeArrayOutput) ToKubernetesNodePoolNodeArrayOutput() KubernetesNodePoolNodeArrayOutput {
	return o
}

func (o KubernetesNodePoolNodeArrayOutput) ToKubernetesNodePoolNodeArrayOutputWithContext(ctx context.Context) KubernetesNodePoolNodeArrayOutput {
	return o
}

func (o KubernetesNodePoolNodeArrayOutput) Index(i pulumi.IntInput) KubernetesNodePoolNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesNodePoolNode {
		return vs[0].([]KubernetesNodePoolNode)[vs[1].(int)]
	}).(KubernetesNodePoolNodeOutput)
}

type LoadBalancerForwardingRule struct {
	// The ID of the TLS certificate to be used for SSL termination.
	CertificateId *string `pulumi:"certificateId"`
	// An integer representing the port on which the Load Balancer instance will listen.
	EntryPort int `pulumi:"entryPort"`
	// The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2` or `tcp`.
	EntryProtocol string `pulumi:"entryProtocol"`
	// An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
	TargetPort int `pulumi:"targetPort"`
	// The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2` or `tcp`.
	TargetProtocol string `pulumi:"targetProtocol"`
	// A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
	TlsPassthrough *bool `pulumi:"tlsPassthrough"`
}

// LoadBalancerForwardingRuleInput is an input type that accepts LoadBalancerForwardingRuleArgs and LoadBalancerForwardingRuleOutput values.
// You can construct a concrete instance of `LoadBalancerForwardingRuleInput` via:
//
//          LoadBalancerForwardingRuleArgs{...}
type LoadBalancerForwardingRuleInput interface {
	pulumi.Input

	ToLoadBalancerForwardingRuleOutput() LoadBalancerForwardingRuleOutput
	ToLoadBalancerForwardingRuleOutputWithContext(context.Context) LoadBalancerForwardingRuleOutput
}

type LoadBalancerForwardingRuleArgs struct {
	// The ID of the TLS certificate to be used for SSL termination.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// An integer representing the port on which the Load Balancer instance will listen.
	EntryPort pulumi.IntInput `pulumi:"entryPort"`
	// The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2` or `tcp`.
	EntryProtocol pulumi.StringInput `pulumi:"entryProtocol"`
	// An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
	// The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2` or `tcp`.
	TargetProtocol pulumi.StringInput `pulumi:"targetProtocol"`
	// A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
	TlsPassthrough pulumi.BoolPtrInput `pulumi:"tlsPassthrough"`
}

func (LoadBalancerForwardingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerForwardingRule)(nil)).Elem()
}

func (i LoadBalancerForwardingRuleArgs) ToLoadBalancerForwardingRuleOutput() LoadBalancerForwardingRuleOutput {
	return i.ToLoadBalancerForwardingRuleOutputWithContext(context.Background())
}

func (i LoadBalancerForwardingRuleArgs) ToLoadBalancerForwardingRuleOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerForwardingRuleOutput)
}

// LoadBalancerForwardingRuleArrayInput is an input type that accepts LoadBalancerForwardingRuleArray and LoadBalancerForwardingRuleArrayOutput values.
// You can construct a concrete instance of `LoadBalancerForwardingRuleArrayInput` via:
//
//          LoadBalancerForwardingRuleArray{ LoadBalancerForwardingRuleArgs{...} }
type LoadBalancerForwardingRuleArrayInput interface {
	pulumi.Input

	ToLoadBalancerForwardingRuleArrayOutput() LoadBalancerForwardingRuleArrayOutput
	ToLoadBalancerForwardingRuleArrayOutputWithContext(context.Context) LoadBalancerForwardingRuleArrayOutput
}

type LoadBalancerForwardingRuleArray []LoadBalancerForwardingRuleInput

func (LoadBalancerForwardingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerForwardingRule)(nil)).Elem()
}

func (i LoadBalancerForwardingRuleArray) ToLoadBalancerForwardingRuleArrayOutput() LoadBalancerForwardingRuleArrayOutput {
	return i.ToLoadBalancerForwardingRuleArrayOutputWithContext(context.Background())
}

func (i LoadBalancerForwardingRuleArray) ToLoadBalancerForwardingRuleArrayOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerForwardingRuleArrayOutput)
}

type LoadBalancerForwardingRuleOutput struct{ *pulumi.OutputState }

func (LoadBalancerForwardingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerForwardingRule)(nil)).Elem()
}

func (o LoadBalancerForwardingRuleOutput) ToLoadBalancerForwardingRuleOutput() LoadBalancerForwardingRuleOutput {
	return o
}

func (o LoadBalancerForwardingRuleOutput) ToLoadBalancerForwardingRuleOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleOutput {
	return o
}

// The ID of the TLS certificate to be used for SSL termination.
func (o LoadBalancerForwardingRuleOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// An integer representing the port on which the Load Balancer instance will listen.
func (o LoadBalancerForwardingRuleOutput) EntryPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) int { return v.EntryPort }).(pulumi.IntOutput)
}

// The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2` or `tcp`.
func (o LoadBalancerForwardingRuleOutput) EntryProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) string { return v.EntryProtocol }).(pulumi.StringOutput)
}

// An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
func (o LoadBalancerForwardingRuleOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) int { return v.TargetPort }).(pulumi.IntOutput)
}

// The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2` or `tcp`.
func (o LoadBalancerForwardingRuleOutput) TargetProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) string { return v.TargetProtocol }).(pulumi.StringOutput)
}

// A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
func (o LoadBalancerForwardingRuleOutput) TlsPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerForwardingRule) *bool { return v.TlsPassthrough }).(pulumi.BoolPtrOutput)
}

type LoadBalancerForwardingRuleArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerForwardingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerForwardingRule)(nil)).Elem()
}

func (o LoadBalancerForwardingRuleArrayOutput) ToLoadBalancerForwardingRuleArrayOutput() LoadBalancerForwardingRuleArrayOutput {
	return o
}

func (o LoadBalancerForwardingRuleArrayOutput) ToLoadBalancerForwardingRuleArrayOutputWithContext(ctx context.Context) LoadBalancerForwardingRuleArrayOutput {
	return o
}

func (o LoadBalancerForwardingRuleArrayOutput) Index(i pulumi.IntInput) LoadBalancerForwardingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerForwardingRule {
		return vs[0].([]LoadBalancerForwardingRule)[vs[1].(int)]
	}).(LoadBalancerForwardingRuleOutput)
}

type LoadBalancerHealthcheck struct {
	// The number of seconds between between two consecutive health checks. If not specified, the default value is `10`.
	CheckIntervalSeconds *int `pulumi:"checkIntervalSeconds"`
	// The number of times a health check must pass for a backend Droplet to be marked "healthy" and be re-added to the pool. If not specified, the default value is `5`.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The path on the backend Droplets to which the Load Balancer instance will send a request.
	Path *string `pulumi:"path"`
	// An integer representing the port on the backend Droplets on which the health check will attempt a connection.
	Port int `pulumi:"port"`
	// The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https` or `tcp`.
	Protocol string `pulumi:"protocol"`
	// The number of seconds the Load Balancer instance will wait for a response until marking a health check as failed. If not specified, the default value is `5`.
	ResponseTimeoutSeconds *int `pulumi:"responseTimeoutSeconds"`
	// The number of times a health check must fail for a backend Droplet to be marked "unhealthy" and be removed from the pool. If not specified, the default value is `3`.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// LoadBalancerHealthcheckInput is an input type that accepts LoadBalancerHealthcheckArgs and LoadBalancerHealthcheckOutput values.
// You can construct a concrete instance of `LoadBalancerHealthcheckInput` via:
//
//          LoadBalancerHealthcheckArgs{...}
type LoadBalancerHealthcheckInput interface {
	pulumi.Input

	ToLoadBalancerHealthcheckOutput() LoadBalancerHealthcheckOutput
	ToLoadBalancerHealthcheckOutputWithContext(context.Context) LoadBalancerHealthcheckOutput
}

type LoadBalancerHealthcheckArgs struct {
	// The number of seconds between between two consecutive health checks. If not specified, the default value is `10`.
	CheckIntervalSeconds pulumi.IntPtrInput `pulumi:"checkIntervalSeconds"`
	// The number of times a health check must pass for a backend Droplet to be marked "healthy" and be re-added to the pool. If not specified, the default value is `5`.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The path on the backend Droplets to which the Load Balancer instance will send a request.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// An integer representing the port on the backend Droplets on which the health check will attempt a connection.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https` or `tcp`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The number of seconds the Load Balancer instance will wait for a response until marking a health check as failed. If not specified, the default value is `5`.
	ResponseTimeoutSeconds pulumi.IntPtrInput `pulumi:"responseTimeoutSeconds"`
	// The number of times a health check must fail for a backend Droplet to be marked "unhealthy" and be removed from the pool. If not specified, the default value is `3`.
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (LoadBalancerHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthcheck)(nil)).Elem()
}

func (i LoadBalancerHealthcheckArgs) ToLoadBalancerHealthcheckOutput() LoadBalancerHealthcheckOutput {
	return i.ToLoadBalancerHealthcheckOutputWithContext(context.Background())
}

func (i LoadBalancerHealthcheckArgs) ToLoadBalancerHealthcheckOutputWithContext(ctx context.Context) LoadBalancerHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthcheckOutput)
}

func (i LoadBalancerHealthcheckArgs) ToLoadBalancerHealthcheckPtrOutput() LoadBalancerHealthcheckPtrOutput {
	return i.ToLoadBalancerHealthcheckPtrOutputWithContext(context.Background())
}

func (i LoadBalancerHealthcheckArgs) ToLoadBalancerHealthcheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthcheckOutput).ToLoadBalancerHealthcheckPtrOutputWithContext(ctx)
}

// LoadBalancerHealthcheckPtrInput is an input type that accepts LoadBalancerHealthcheckArgs, LoadBalancerHealthcheckPtr and LoadBalancerHealthcheckPtrOutput values.
// You can construct a concrete instance of `LoadBalancerHealthcheckPtrInput` via:
//
//          LoadBalancerHealthcheckArgs{...}
//
//  or:
//
//          nil
type LoadBalancerHealthcheckPtrInput interface {
	pulumi.Input

	ToLoadBalancerHealthcheckPtrOutput() LoadBalancerHealthcheckPtrOutput
	ToLoadBalancerHealthcheckPtrOutputWithContext(context.Context) LoadBalancerHealthcheckPtrOutput
}

type loadBalancerHealthcheckPtrType LoadBalancerHealthcheckArgs

func LoadBalancerHealthcheckPtr(v *LoadBalancerHealthcheckArgs) LoadBalancerHealthcheckPtrInput {
	return (*loadBalancerHealthcheckPtrType)(v)
}

func (*loadBalancerHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthcheck)(nil)).Elem()
}

func (i *loadBalancerHealthcheckPtrType) ToLoadBalancerHealthcheckPtrOutput() LoadBalancerHealthcheckPtrOutput {
	return i.ToLoadBalancerHealthcheckPtrOutputWithContext(context.Background())
}

func (i *loadBalancerHealthcheckPtrType) ToLoadBalancerHealthcheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerHealthcheckPtrOutput)
}

type LoadBalancerHealthcheckOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerHealthcheck)(nil)).Elem()
}

func (o LoadBalancerHealthcheckOutput) ToLoadBalancerHealthcheckOutput() LoadBalancerHealthcheckOutput {
	return o
}

func (o LoadBalancerHealthcheckOutput) ToLoadBalancerHealthcheckOutputWithContext(ctx context.Context) LoadBalancerHealthcheckOutput {
	return o
}

func (o LoadBalancerHealthcheckOutput) ToLoadBalancerHealthcheckPtrOutput() LoadBalancerHealthcheckPtrOutput {
	return o.ToLoadBalancerHealthcheckPtrOutputWithContext(context.Background())
}

func (o LoadBalancerHealthcheckOutput) ToLoadBalancerHealthcheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthcheckPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) *LoadBalancerHealthcheck {
		return &v
	}).(LoadBalancerHealthcheckPtrOutput)
}

// The number of seconds between between two consecutive health checks. If not specified, the default value is `10`.
func (o LoadBalancerHealthcheckOutput) CheckIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) *int { return v.CheckIntervalSeconds }).(pulumi.IntPtrOutput)
}

// The number of times a health check must pass for a backend Droplet to be marked "healthy" and be re-added to the pool. If not specified, the default value is `5`.
func (o LoadBalancerHealthcheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The path on the backend Droplets to which the Load Balancer instance will send a request.
func (o LoadBalancerHealthcheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// An integer representing the port on the backend Droplets on which the health check will attempt a connection.
func (o LoadBalancerHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https` or `tcp`.
func (o LoadBalancerHealthcheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// The number of seconds the Load Balancer instance will wait for a response until marking a health check as failed. If not specified, the default value is `5`.
func (o LoadBalancerHealthcheckOutput) ResponseTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) *int { return v.ResponseTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The number of times a health check must fail for a backend Droplet to be marked "unhealthy" and be removed from the pool. If not specified, the default value is `3`.
func (o LoadBalancerHealthcheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerHealthcheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type LoadBalancerHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerHealthcheck)(nil)).Elem()
}

func (o LoadBalancerHealthcheckPtrOutput) ToLoadBalancerHealthcheckPtrOutput() LoadBalancerHealthcheckPtrOutput {
	return o
}

func (o LoadBalancerHealthcheckPtrOutput) ToLoadBalancerHealthcheckPtrOutputWithContext(ctx context.Context) LoadBalancerHealthcheckPtrOutput {
	return o
}

func (o LoadBalancerHealthcheckPtrOutput) Elem() LoadBalancerHealthcheckOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) LoadBalancerHealthcheck { return *v }).(LoadBalancerHealthcheckOutput)
}

// The number of seconds between between two consecutive health checks. If not specified, the default value is `10`.
func (o LoadBalancerHealthcheckPtrOutput) CheckIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.CheckIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of times a health check must pass for a backend Droplet to be marked "healthy" and be re-added to the pool. If not specified, the default value is `5`.
func (o LoadBalancerHealthcheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The path on the backend Droplets to which the Load Balancer instance will send a request.
func (o LoadBalancerHealthcheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// An integer representing the port on the backend Droplets on which the health check will attempt a connection.
func (o LoadBalancerHealthcheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https` or `tcp`.
func (o LoadBalancerHealthcheckPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

// The number of seconds the Load Balancer instance will wait for a response until marking a health check as failed. If not specified, the default value is `5`.
func (o LoadBalancerHealthcheckPtrOutput) ResponseTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.ResponseTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of times a health check must fail for a backend Droplet to be marked "unhealthy" and be removed from the pool. If not specified, the default value is `3`.
func (o LoadBalancerHealthcheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

type LoadBalancerStickySessions struct {
	// The name to be used for the cookie sent to the client. This attribute is required when using `cookies` for the sticky sessions type.
	CookieName *string `pulumi:"cookieName"`
	// The number of seconds until the cookie set by the Load Balancer expires. This attribute is required when using `cookies` for the sticky sessions type.
	CookieTtlSeconds *int `pulumi:"cookieTtlSeconds"`
	// An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
	Type *string `pulumi:"type"`
}

// LoadBalancerStickySessionsInput is an input type that accepts LoadBalancerStickySessionsArgs and LoadBalancerStickySessionsOutput values.
// You can construct a concrete instance of `LoadBalancerStickySessionsInput` via:
//
//          LoadBalancerStickySessionsArgs{...}
type LoadBalancerStickySessionsInput interface {
	pulumi.Input

	ToLoadBalancerStickySessionsOutput() LoadBalancerStickySessionsOutput
	ToLoadBalancerStickySessionsOutputWithContext(context.Context) LoadBalancerStickySessionsOutput
}

type LoadBalancerStickySessionsArgs struct {
	// The name to be used for the cookie sent to the client. This attribute is required when using `cookies` for the sticky sessions type.
	CookieName pulumi.StringPtrInput `pulumi:"cookieName"`
	// The number of seconds until the cookie set by the Load Balancer expires. This attribute is required when using `cookies` for the sticky sessions type.
	CookieTtlSeconds pulumi.IntPtrInput `pulumi:"cookieTtlSeconds"`
	// An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LoadBalancerStickySessionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerStickySessions)(nil)).Elem()
}

func (i LoadBalancerStickySessionsArgs) ToLoadBalancerStickySessionsOutput() LoadBalancerStickySessionsOutput {
	return i.ToLoadBalancerStickySessionsOutputWithContext(context.Background())
}

func (i LoadBalancerStickySessionsArgs) ToLoadBalancerStickySessionsOutputWithContext(ctx context.Context) LoadBalancerStickySessionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStickySessionsOutput)
}

func (i LoadBalancerStickySessionsArgs) ToLoadBalancerStickySessionsPtrOutput() LoadBalancerStickySessionsPtrOutput {
	return i.ToLoadBalancerStickySessionsPtrOutputWithContext(context.Background())
}

func (i LoadBalancerStickySessionsArgs) ToLoadBalancerStickySessionsPtrOutputWithContext(ctx context.Context) LoadBalancerStickySessionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStickySessionsOutput).ToLoadBalancerStickySessionsPtrOutputWithContext(ctx)
}

// LoadBalancerStickySessionsPtrInput is an input type that accepts LoadBalancerStickySessionsArgs, LoadBalancerStickySessionsPtr and LoadBalancerStickySessionsPtrOutput values.
// You can construct a concrete instance of `LoadBalancerStickySessionsPtrInput` via:
//
//          LoadBalancerStickySessionsArgs{...}
//
//  or:
//
//          nil
type LoadBalancerStickySessionsPtrInput interface {
	pulumi.Input

	ToLoadBalancerStickySessionsPtrOutput() LoadBalancerStickySessionsPtrOutput
	ToLoadBalancerStickySessionsPtrOutputWithContext(context.Context) LoadBalancerStickySessionsPtrOutput
}

type loadBalancerStickySessionsPtrType LoadBalancerStickySessionsArgs

func LoadBalancerStickySessionsPtr(v *LoadBalancerStickySessionsArgs) LoadBalancerStickySessionsPtrInput {
	return (*loadBalancerStickySessionsPtrType)(v)
}

func (*loadBalancerStickySessionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerStickySessions)(nil)).Elem()
}

func (i *loadBalancerStickySessionsPtrType) ToLoadBalancerStickySessionsPtrOutput() LoadBalancerStickySessionsPtrOutput {
	return i.ToLoadBalancerStickySessionsPtrOutputWithContext(context.Background())
}

func (i *loadBalancerStickySessionsPtrType) ToLoadBalancerStickySessionsPtrOutputWithContext(ctx context.Context) LoadBalancerStickySessionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerStickySessionsPtrOutput)
}

type LoadBalancerStickySessionsOutput struct{ *pulumi.OutputState }

func (LoadBalancerStickySessionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerStickySessions)(nil)).Elem()
}

func (o LoadBalancerStickySessionsOutput) ToLoadBalancerStickySessionsOutput() LoadBalancerStickySessionsOutput {
	return o
}

func (o LoadBalancerStickySessionsOutput) ToLoadBalancerStickySessionsOutputWithContext(ctx context.Context) LoadBalancerStickySessionsOutput {
	return o
}

func (o LoadBalancerStickySessionsOutput) ToLoadBalancerStickySessionsPtrOutput() LoadBalancerStickySessionsPtrOutput {
	return o.ToLoadBalancerStickySessionsPtrOutputWithContext(context.Background())
}

func (o LoadBalancerStickySessionsOutput) ToLoadBalancerStickySessionsPtrOutputWithContext(ctx context.Context) LoadBalancerStickySessionsPtrOutput {
	return o.ApplyT(func(v LoadBalancerStickySessions) *LoadBalancerStickySessions {
		return &v
	}).(LoadBalancerStickySessionsPtrOutput)
}

// The name to be used for the cookie sent to the client. This attribute is required when using `cookies` for the sticky sessions type.
func (o LoadBalancerStickySessionsOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerStickySessions) *string { return v.CookieName }).(pulumi.StringPtrOutput)
}

// The number of seconds until the cookie set by the Load Balancer expires. This attribute is required when using `cookies` for the sticky sessions type.
func (o LoadBalancerStickySessionsOutput) CookieTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerStickySessions) *int { return v.CookieTtlSeconds }).(pulumi.IntPtrOutput)
}

// An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
func (o LoadBalancerStickySessionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerStickySessions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LoadBalancerStickySessionsPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerStickySessionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerStickySessions)(nil)).Elem()
}

func (o LoadBalancerStickySessionsPtrOutput) ToLoadBalancerStickySessionsPtrOutput() LoadBalancerStickySessionsPtrOutput {
	return o
}

func (o LoadBalancerStickySessionsPtrOutput) ToLoadBalancerStickySessionsPtrOutputWithContext(ctx context.Context) LoadBalancerStickySessionsPtrOutput {
	return o
}

func (o LoadBalancerStickySessionsPtrOutput) Elem() LoadBalancerStickySessionsOutput {
	return o.ApplyT(func(v *LoadBalancerStickySessions) LoadBalancerStickySessions { return *v }).(LoadBalancerStickySessionsOutput)
}

// The name to be used for the cookie sent to the client. This attribute is required when using `cookies` for the sticky sessions type.
func (o LoadBalancerStickySessionsPtrOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerStickySessions) *string {
		if v == nil {
			return nil
		}
		return v.CookieName
	}).(pulumi.StringPtrOutput)
}

// The number of seconds until the cookie set by the Load Balancer expires. This attribute is required when using `cookies` for the sticky sessions type.
func (o LoadBalancerStickySessionsPtrOutput) CookieTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerStickySessions) *int {
		if v == nil {
			return nil
		}
		return v.CookieTtlSeconds
	}).(pulumi.IntPtrOutput)
}

// An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
func (o LoadBalancerStickySessionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerStickySessions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type SpacesBucketCorsRule struct {
	// A list of headers that will be included in the CORS preflight request's `Access-Control-Request-Headers`. A header may contain one wildcard (e.g. `x-amz-*`).
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// A list of HTTP methods (e.g. `GET`) which are allowed from the specified origin.
	AllowedMethods []string `pulumi:"allowedMethods"`
	// A list of hosts from which requests using the specified methods are allowed. A host may contain one wildcard (e.g. http://*.example.com).
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// The time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds *int `pulumi:"maxAgeSeconds"`
}

// SpacesBucketCorsRuleInput is an input type that accepts SpacesBucketCorsRuleArgs and SpacesBucketCorsRuleOutput values.
// You can construct a concrete instance of `SpacesBucketCorsRuleInput` via:
//
//          SpacesBucketCorsRuleArgs{...}
type SpacesBucketCorsRuleInput interface {
	pulumi.Input

	ToSpacesBucketCorsRuleOutput() SpacesBucketCorsRuleOutput
	ToSpacesBucketCorsRuleOutputWithContext(context.Context) SpacesBucketCorsRuleOutput
}

type SpacesBucketCorsRuleArgs struct {
	// A list of headers that will be included in the CORS preflight request's `Access-Control-Request-Headers`. A header may contain one wildcard (e.g. `x-amz-*`).
	AllowedHeaders pulumi.StringArrayInput `pulumi:"allowedHeaders"`
	// A list of HTTP methods (e.g. `GET`) which are allowed from the specified origin.
	AllowedMethods pulumi.StringArrayInput `pulumi:"allowedMethods"`
	// A list of hosts from which requests using the specified methods are allowed. A host may contain one wildcard (e.g. http://*.example.com).
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
	// The time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds pulumi.IntPtrInput `pulumi:"maxAgeSeconds"`
}

func (SpacesBucketCorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketCorsRule)(nil)).Elem()
}

func (i SpacesBucketCorsRuleArgs) ToSpacesBucketCorsRuleOutput() SpacesBucketCorsRuleOutput {
	return i.ToSpacesBucketCorsRuleOutputWithContext(context.Background())
}

func (i SpacesBucketCorsRuleArgs) ToSpacesBucketCorsRuleOutputWithContext(ctx context.Context) SpacesBucketCorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketCorsRuleOutput)
}

// SpacesBucketCorsRuleArrayInput is an input type that accepts SpacesBucketCorsRuleArray and SpacesBucketCorsRuleArrayOutput values.
// You can construct a concrete instance of `SpacesBucketCorsRuleArrayInput` via:
//
//          SpacesBucketCorsRuleArray{ SpacesBucketCorsRuleArgs{...} }
type SpacesBucketCorsRuleArrayInput interface {
	pulumi.Input

	ToSpacesBucketCorsRuleArrayOutput() SpacesBucketCorsRuleArrayOutput
	ToSpacesBucketCorsRuleArrayOutputWithContext(context.Context) SpacesBucketCorsRuleArrayOutput
}

type SpacesBucketCorsRuleArray []SpacesBucketCorsRuleInput

func (SpacesBucketCorsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpacesBucketCorsRule)(nil)).Elem()
}

func (i SpacesBucketCorsRuleArray) ToSpacesBucketCorsRuleArrayOutput() SpacesBucketCorsRuleArrayOutput {
	return i.ToSpacesBucketCorsRuleArrayOutputWithContext(context.Background())
}

func (i SpacesBucketCorsRuleArray) ToSpacesBucketCorsRuleArrayOutputWithContext(ctx context.Context) SpacesBucketCorsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketCorsRuleArrayOutput)
}

type SpacesBucketCorsRuleOutput struct{ *pulumi.OutputState }

func (SpacesBucketCorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketCorsRule)(nil)).Elem()
}

func (o SpacesBucketCorsRuleOutput) ToSpacesBucketCorsRuleOutput() SpacesBucketCorsRuleOutput {
	return o
}

func (o SpacesBucketCorsRuleOutput) ToSpacesBucketCorsRuleOutputWithContext(ctx context.Context) SpacesBucketCorsRuleOutput {
	return o
}

// A list of headers that will be included in the CORS preflight request's `Access-Control-Request-Headers`. A header may contain one wildcard (e.g. `x-amz-*`).
func (o SpacesBucketCorsRuleOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpacesBucketCorsRule) []string { return v.AllowedHeaders }).(pulumi.StringArrayOutput)
}

// A list of HTTP methods (e.g. `GET`) which are allowed from the specified origin.
func (o SpacesBucketCorsRuleOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpacesBucketCorsRule) []string { return v.AllowedMethods }).(pulumi.StringArrayOutput)
}

// A list of hosts from which requests using the specified methods are allowed. A host may contain one wildcard (e.g. http://*.example.com).
func (o SpacesBucketCorsRuleOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpacesBucketCorsRule) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// The time in seconds that browser can cache the response for a preflight request.
func (o SpacesBucketCorsRuleOutput) MaxAgeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpacesBucketCorsRule) *int { return v.MaxAgeSeconds }).(pulumi.IntPtrOutput)
}

type SpacesBucketCorsRuleArrayOutput struct{ *pulumi.OutputState }

func (SpacesBucketCorsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpacesBucketCorsRule)(nil)).Elem()
}

func (o SpacesBucketCorsRuleArrayOutput) ToSpacesBucketCorsRuleArrayOutput() SpacesBucketCorsRuleArrayOutput {
	return o
}

func (o SpacesBucketCorsRuleArrayOutput) ToSpacesBucketCorsRuleArrayOutputWithContext(ctx context.Context) SpacesBucketCorsRuleArrayOutput {
	return o
}

func (o SpacesBucketCorsRuleArrayOutput) Index(i pulumi.IntInput) SpacesBucketCorsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpacesBucketCorsRule {
		return vs[0].([]SpacesBucketCorsRule)[vs[1].(int)]
	}).(SpacesBucketCorsRuleOutput)
}

type SpacesBucketLifecycleRule struct {
	// Specifies the number of days after initiating a multipart
	// upload when the multipart upload must be completed or else Spaces will abort the upload.
	AbortIncompleteMultipartUploadDays *int `pulumi:"abortIncompleteMultipartUploadDays"`
	// Specifies lifecycle rule status.
	Enabled bool `pulumi:"enabled"`
	// Specifies a time period after which applicable objects expire (documented below).
	Expiration *SpacesBucketLifecycleRuleExpiration `pulumi:"expiration"`
	// Unique identifier for the rule.
	Id *string `pulumi:"id"`
	// Specifies when non-current object versions expire (documented below).
	NoncurrentVersionExpiration *SpacesBucketLifecycleRuleNoncurrentVersionExpiration `pulumi:"noncurrentVersionExpiration"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix *string `pulumi:"prefix"`
}

// SpacesBucketLifecycleRuleInput is an input type that accepts SpacesBucketLifecycleRuleArgs and SpacesBucketLifecycleRuleOutput values.
// You can construct a concrete instance of `SpacesBucketLifecycleRuleInput` via:
//
//          SpacesBucketLifecycleRuleArgs{...}
type SpacesBucketLifecycleRuleInput interface {
	pulumi.Input

	ToSpacesBucketLifecycleRuleOutput() SpacesBucketLifecycleRuleOutput
	ToSpacesBucketLifecycleRuleOutputWithContext(context.Context) SpacesBucketLifecycleRuleOutput
}

type SpacesBucketLifecycleRuleArgs struct {
	// Specifies the number of days after initiating a multipart
	// upload when the multipart upload must be completed or else Spaces will abort the upload.
	AbortIncompleteMultipartUploadDays pulumi.IntPtrInput `pulumi:"abortIncompleteMultipartUploadDays"`
	// Specifies lifecycle rule status.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies a time period after which applicable objects expire (documented below).
	Expiration SpacesBucketLifecycleRuleExpirationPtrInput `pulumi:"expiration"`
	// Unique identifier for the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies when non-current object versions expire (documented below).
	NoncurrentVersionExpiration SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrInput `pulumi:"noncurrentVersionExpiration"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (SpacesBucketLifecycleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketLifecycleRule)(nil)).Elem()
}

func (i SpacesBucketLifecycleRuleArgs) ToSpacesBucketLifecycleRuleOutput() SpacesBucketLifecycleRuleOutput {
	return i.ToSpacesBucketLifecycleRuleOutputWithContext(context.Background())
}

func (i SpacesBucketLifecycleRuleArgs) ToSpacesBucketLifecycleRuleOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleOutput)
}

// SpacesBucketLifecycleRuleArrayInput is an input type that accepts SpacesBucketLifecycleRuleArray and SpacesBucketLifecycleRuleArrayOutput values.
// You can construct a concrete instance of `SpacesBucketLifecycleRuleArrayInput` via:
//
//          SpacesBucketLifecycleRuleArray{ SpacesBucketLifecycleRuleArgs{...} }
type SpacesBucketLifecycleRuleArrayInput interface {
	pulumi.Input

	ToSpacesBucketLifecycleRuleArrayOutput() SpacesBucketLifecycleRuleArrayOutput
	ToSpacesBucketLifecycleRuleArrayOutputWithContext(context.Context) SpacesBucketLifecycleRuleArrayOutput
}

type SpacesBucketLifecycleRuleArray []SpacesBucketLifecycleRuleInput

func (SpacesBucketLifecycleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpacesBucketLifecycleRule)(nil)).Elem()
}

func (i SpacesBucketLifecycleRuleArray) ToSpacesBucketLifecycleRuleArrayOutput() SpacesBucketLifecycleRuleArrayOutput {
	return i.ToSpacesBucketLifecycleRuleArrayOutputWithContext(context.Background())
}

func (i SpacesBucketLifecycleRuleArray) ToSpacesBucketLifecycleRuleArrayOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleArrayOutput)
}

type SpacesBucketLifecycleRuleOutput struct{ *pulumi.OutputState }

func (SpacesBucketLifecycleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketLifecycleRule)(nil)).Elem()
}

func (o SpacesBucketLifecycleRuleOutput) ToSpacesBucketLifecycleRuleOutput() SpacesBucketLifecycleRuleOutput {
	return o
}

func (o SpacesBucketLifecycleRuleOutput) ToSpacesBucketLifecycleRuleOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleOutput {
	return o
}

// Specifies the number of days after initiating a multipart
// upload when the multipart upload must be completed or else Spaces will abort the upload.
func (o SpacesBucketLifecycleRuleOutput) AbortIncompleteMultipartUploadDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRule) *int { return v.AbortIncompleteMultipartUploadDays }).(pulumi.IntPtrOutput)
}

// Specifies lifecycle rule status.
func (o SpacesBucketLifecycleRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRule) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies a time period after which applicable objects expire (documented below).
func (o SpacesBucketLifecycleRuleOutput) Expiration() SpacesBucketLifecycleRuleExpirationPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRule) *SpacesBucketLifecycleRuleExpiration { return v.Expiration }).(SpacesBucketLifecycleRuleExpirationPtrOutput)
}

// Unique identifier for the rule.
func (o SpacesBucketLifecycleRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies when non-current object versions expire (documented below).
func (o SpacesBucketLifecycleRuleOutput) NoncurrentVersionExpiration() SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRule) *SpacesBucketLifecycleRuleNoncurrentVersionExpiration {
		return v.NoncurrentVersionExpiration
	}).(SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput)
}

// Object key prefix identifying one or more objects to which the rule applies.
func (o SpacesBucketLifecycleRuleOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRule) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type SpacesBucketLifecycleRuleArrayOutput struct{ *pulumi.OutputState }

func (SpacesBucketLifecycleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpacesBucketLifecycleRule)(nil)).Elem()
}

func (o SpacesBucketLifecycleRuleArrayOutput) ToSpacesBucketLifecycleRuleArrayOutput() SpacesBucketLifecycleRuleArrayOutput {
	return o
}

func (o SpacesBucketLifecycleRuleArrayOutput) ToSpacesBucketLifecycleRuleArrayOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleArrayOutput {
	return o
}

func (o SpacesBucketLifecycleRuleArrayOutput) Index(i pulumi.IntInput) SpacesBucketLifecycleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpacesBucketLifecycleRule {
		return vs[0].([]SpacesBucketLifecycleRule)[vs[1].(int)]
	}).(SpacesBucketLifecycleRuleOutput)
}

type SpacesBucketLifecycleRuleExpiration struct {
	// Specifies the date/time after which you want applicable objects to expire. The argument uses
	// RFC3339 format, e.g. "2020-03-22T15:03:55Z" or parts thereof e.g. "2019-02-28".
	Date *string `pulumi:"date"`
	// Specifies the number of days after object creation when the applicable objects will expire.
	Days *int `pulumi:"days"`
	// On a versioned bucket (versioning-enabled or versioning-suspended
	// bucket), setting this to true directs Spaces to delete expired object delete markers.
	ExpiredObjectDeleteMarker *bool `pulumi:"expiredObjectDeleteMarker"`
}

// SpacesBucketLifecycleRuleExpirationInput is an input type that accepts SpacesBucketLifecycleRuleExpirationArgs and SpacesBucketLifecycleRuleExpirationOutput values.
// You can construct a concrete instance of `SpacesBucketLifecycleRuleExpirationInput` via:
//
//          SpacesBucketLifecycleRuleExpirationArgs{...}
type SpacesBucketLifecycleRuleExpirationInput interface {
	pulumi.Input

	ToSpacesBucketLifecycleRuleExpirationOutput() SpacesBucketLifecycleRuleExpirationOutput
	ToSpacesBucketLifecycleRuleExpirationOutputWithContext(context.Context) SpacesBucketLifecycleRuleExpirationOutput
}

type SpacesBucketLifecycleRuleExpirationArgs struct {
	// Specifies the date/time after which you want applicable objects to expire. The argument uses
	// RFC3339 format, e.g. "2020-03-22T15:03:55Z" or parts thereof e.g. "2019-02-28".
	Date pulumi.StringPtrInput `pulumi:"date"`
	// Specifies the number of days after object creation when the applicable objects will expire.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// On a versioned bucket (versioning-enabled or versioning-suspended
	// bucket), setting this to true directs Spaces to delete expired object delete markers.
	ExpiredObjectDeleteMarker pulumi.BoolPtrInput `pulumi:"expiredObjectDeleteMarker"`
}

func (SpacesBucketLifecycleRuleExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i SpacesBucketLifecycleRuleExpirationArgs) ToSpacesBucketLifecycleRuleExpirationOutput() SpacesBucketLifecycleRuleExpirationOutput {
	return i.ToSpacesBucketLifecycleRuleExpirationOutputWithContext(context.Background())
}

func (i SpacesBucketLifecycleRuleExpirationArgs) ToSpacesBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleExpirationOutput)
}

func (i SpacesBucketLifecycleRuleExpirationArgs) ToSpacesBucketLifecycleRuleExpirationPtrOutput() SpacesBucketLifecycleRuleExpirationPtrOutput {
	return i.ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(context.Background())
}

func (i SpacesBucketLifecycleRuleExpirationArgs) ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleExpirationOutput).ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(ctx)
}

// SpacesBucketLifecycleRuleExpirationPtrInput is an input type that accepts SpacesBucketLifecycleRuleExpirationArgs, SpacesBucketLifecycleRuleExpirationPtr and SpacesBucketLifecycleRuleExpirationPtrOutput values.
// You can construct a concrete instance of `SpacesBucketLifecycleRuleExpirationPtrInput` via:
//
//          SpacesBucketLifecycleRuleExpirationArgs{...}
//
//  or:
//
//          nil
type SpacesBucketLifecycleRuleExpirationPtrInput interface {
	pulumi.Input

	ToSpacesBucketLifecycleRuleExpirationPtrOutput() SpacesBucketLifecycleRuleExpirationPtrOutput
	ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(context.Context) SpacesBucketLifecycleRuleExpirationPtrOutput
}

type spacesBucketLifecycleRuleExpirationPtrType SpacesBucketLifecycleRuleExpirationArgs

func SpacesBucketLifecycleRuleExpirationPtr(v *SpacesBucketLifecycleRuleExpirationArgs) SpacesBucketLifecycleRuleExpirationPtrInput {
	return (*spacesBucketLifecycleRuleExpirationPtrType)(v)
}

func (*spacesBucketLifecycleRuleExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i *spacesBucketLifecycleRuleExpirationPtrType) ToSpacesBucketLifecycleRuleExpirationPtrOutput() SpacesBucketLifecycleRuleExpirationPtrOutput {
	return i.ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(context.Background())
}

func (i *spacesBucketLifecycleRuleExpirationPtrType) ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleExpirationPtrOutput)
}

type SpacesBucketLifecycleRuleExpirationOutput struct{ *pulumi.OutputState }

func (SpacesBucketLifecycleRuleExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o SpacesBucketLifecycleRuleExpirationOutput) ToSpacesBucketLifecycleRuleExpirationOutput() SpacesBucketLifecycleRuleExpirationOutput {
	return o
}

func (o SpacesBucketLifecycleRuleExpirationOutput) ToSpacesBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleExpirationOutput {
	return o
}

func (o SpacesBucketLifecycleRuleExpirationOutput) ToSpacesBucketLifecycleRuleExpirationPtrOutput() SpacesBucketLifecycleRuleExpirationPtrOutput {
	return o.ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(context.Background())
}

func (o SpacesBucketLifecycleRuleExpirationOutput) ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleExpirationPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRuleExpiration) *SpacesBucketLifecycleRuleExpiration {
		return &v
	}).(SpacesBucketLifecycleRuleExpirationPtrOutput)
}

// Specifies the date/time after which you want applicable objects to expire. The argument uses
// RFC3339 format, e.g. "2020-03-22T15:03:55Z" or parts thereof e.g. "2019-02-28".
func (o SpacesBucketLifecycleRuleExpirationOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRuleExpiration) *string { return v.Date }).(pulumi.StringPtrOutput)
}

// Specifies the number of days after object creation when the applicable objects will expire.
func (o SpacesBucketLifecycleRuleExpirationOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRuleExpiration) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// On a versioned bucket (versioning-enabled or versioning-suspended
// bucket), setting this to true directs Spaces to delete expired object delete markers.
func (o SpacesBucketLifecycleRuleExpirationOutput) ExpiredObjectDeleteMarker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRuleExpiration) *bool { return v.ExpiredObjectDeleteMarker }).(pulumi.BoolPtrOutput)
}

type SpacesBucketLifecycleRuleExpirationPtrOutput struct{ *pulumi.OutputState }

func (SpacesBucketLifecycleRuleExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o SpacesBucketLifecycleRuleExpirationPtrOutput) ToSpacesBucketLifecycleRuleExpirationPtrOutput() SpacesBucketLifecycleRuleExpirationPtrOutput {
	return o
}

func (o SpacesBucketLifecycleRuleExpirationPtrOutput) ToSpacesBucketLifecycleRuleExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleExpirationPtrOutput {
	return o
}

func (o SpacesBucketLifecycleRuleExpirationPtrOutput) Elem() SpacesBucketLifecycleRuleExpirationOutput {
	return o.ApplyT(func(v *SpacesBucketLifecycleRuleExpiration) SpacesBucketLifecycleRuleExpiration { return *v }).(SpacesBucketLifecycleRuleExpirationOutput)
}

// Specifies the date/time after which you want applicable objects to expire. The argument uses
// RFC3339 format, e.g. "2020-03-22T15:03:55Z" or parts thereof e.g. "2019-02-28".
func (o SpacesBucketLifecycleRuleExpirationPtrOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpacesBucketLifecycleRuleExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Date
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of days after object creation when the applicable objects will expire.
func (o SpacesBucketLifecycleRuleExpirationPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpacesBucketLifecycleRuleExpiration) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// On a versioned bucket (versioning-enabled or versioning-suspended
// bucket), setting this to true directs Spaces to delete expired object delete markers.
func (o SpacesBucketLifecycleRuleExpirationPtrOutput) ExpiredObjectDeleteMarker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpacesBucketLifecycleRuleExpiration) *bool {
		if v == nil {
			return nil
		}
		return v.ExpiredObjectDeleteMarker
	}).(pulumi.BoolPtrOutput)
}

type SpacesBucketLifecycleRuleNoncurrentVersionExpiration struct {
	// Specifies the number of days after which an object's non-current versions expire.
	Days *int `pulumi:"days"`
}

// SpacesBucketLifecycleRuleNoncurrentVersionExpirationInput is an input type that accepts SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs and SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput values.
// You can construct a concrete instance of `SpacesBucketLifecycleRuleNoncurrentVersionExpirationInput` via:
//
//          SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs{...}
type SpacesBucketLifecycleRuleNoncurrentVersionExpirationInput interface {
	pulumi.Input

	ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput
	ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput
}

type SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs struct {
	// Specifies the number of days after which an object's non-current versions expire.
	Days pulumi.IntPtrInput `pulumi:"days"`
}

func (SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketLifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (i SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return i.ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(context.Background())
}

func (i SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput)
}

func (i SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return i.ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(context.Background())
}

func (i SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput).ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(ctx)
}

// SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrInput is an input type that accepts SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs, SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtr and SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput values.
// You can construct a concrete instance of `SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrInput` via:
//
//          SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs{...}
//
//  or:
//
//          nil
type SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrInput interface {
	pulumi.Input

	ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput
	ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput
}

type spacesBucketLifecycleRuleNoncurrentVersionExpirationPtrType SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs

func SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtr(v *SpacesBucketLifecycleRuleNoncurrentVersionExpirationArgs) SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrInput {
	return (*spacesBucketLifecycleRuleNoncurrentVersionExpirationPtrType)(v)
}

func (*spacesBucketLifecycleRuleNoncurrentVersionExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketLifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (i *spacesBucketLifecycleRuleNoncurrentVersionExpirationPtrType) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return i.ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(context.Background())
}

func (i *spacesBucketLifecycleRuleNoncurrentVersionExpirationPtrType) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput)
}

type SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput struct{ *pulumi.OutputState }

func (SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketLifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return o
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return o
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return o.ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(context.Background())
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRuleNoncurrentVersionExpiration) *SpacesBucketLifecycleRuleNoncurrentVersionExpiration {
		return &v
	}).(SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput)
}

// Specifies the number of days after which an object's non-current versions expire.
func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpacesBucketLifecycleRuleNoncurrentVersionExpiration) *int { return v.Days }).(pulumi.IntPtrOutput)
}

type SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput struct{ *pulumi.OutputState }

func (SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketLifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput() SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return o
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput) ToSpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutputWithContext(ctx context.Context) SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput {
	return o
}

func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput) Elem() SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return o.ApplyT(func(v *SpacesBucketLifecycleRuleNoncurrentVersionExpiration) SpacesBucketLifecycleRuleNoncurrentVersionExpiration {
		return *v
	}).(SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput)
}

// Specifies the number of days after which an object's non-current versions expire.
func (o SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpacesBucketLifecycleRuleNoncurrentVersionExpiration) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

type SpacesBucketVersioning struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned
	// state. You can, however, suspend versioning on that bucket.
	Enabled *bool `pulumi:"enabled"`
}

// SpacesBucketVersioningInput is an input type that accepts SpacesBucketVersioningArgs and SpacesBucketVersioningOutput values.
// You can construct a concrete instance of `SpacesBucketVersioningInput` via:
//
//          SpacesBucketVersioningArgs{...}
type SpacesBucketVersioningInput interface {
	pulumi.Input

	ToSpacesBucketVersioningOutput() SpacesBucketVersioningOutput
	ToSpacesBucketVersioningOutputWithContext(context.Context) SpacesBucketVersioningOutput
}

type SpacesBucketVersioningArgs struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned
	// state. You can, however, suspend versioning on that bucket.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SpacesBucketVersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketVersioning)(nil)).Elem()
}

func (i SpacesBucketVersioningArgs) ToSpacesBucketVersioningOutput() SpacesBucketVersioningOutput {
	return i.ToSpacesBucketVersioningOutputWithContext(context.Background())
}

func (i SpacesBucketVersioningArgs) ToSpacesBucketVersioningOutputWithContext(ctx context.Context) SpacesBucketVersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketVersioningOutput)
}

func (i SpacesBucketVersioningArgs) ToSpacesBucketVersioningPtrOutput() SpacesBucketVersioningPtrOutput {
	return i.ToSpacesBucketVersioningPtrOutputWithContext(context.Background())
}

func (i SpacesBucketVersioningArgs) ToSpacesBucketVersioningPtrOutputWithContext(ctx context.Context) SpacesBucketVersioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketVersioningOutput).ToSpacesBucketVersioningPtrOutputWithContext(ctx)
}

// SpacesBucketVersioningPtrInput is an input type that accepts SpacesBucketVersioningArgs, SpacesBucketVersioningPtr and SpacesBucketVersioningPtrOutput values.
// You can construct a concrete instance of `SpacesBucketVersioningPtrInput` via:
//
//          SpacesBucketVersioningArgs{...}
//
//  or:
//
//          nil
type SpacesBucketVersioningPtrInput interface {
	pulumi.Input

	ToSpacesBucketVersioningPtrOutput() SpacesBucketVersioningPtrOutput
	ToSpacesBucketVersioningPtrOutputWithContext(context.Context) SpacesBucketVersioningPtrOutput
}

type spacesBucketVersioningPtrType SpacesBucketVersioningArgs

func SpacesBucketVersioningPtr(v *SpacesBucketVersioningArgs) SpacesBucketVersioningPtrInput {
	return (*spacesBucketVersioningPtrType)(v)
}

func (*spacesBucketVersioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketVersioning)(nil)).Elem()
}

func (i *spacesBucketVersioningPtrType) ToSpacesBucketVersioningPtrOutput() SpacesBucketVersioningPtrOutput {
	return i.ToSpacesBucketVersioningPtrOutputWithContext(context.Background())
}

func (i *spacesBucketVersioningPtrType) ToSpacesBucketVersioningPtrOutputWithContext(ctx context.Context) SpacesBucketVersioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketVersioningPtrOutput)
}

type SpacesBucketVersioningOutput struct{ *pulumi.OutputState }

func (SpacesBucketVersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacesBucketVersioning)(nil)).Elem()
}

func (o SpacesBucketVersioningOutput) ToSpacesBucketVersioningOutput() SpacesBucketVersioningOutput {
	return o
}

func (o SpacesBucketVersioningOutput) ToSpacesBucketVersioningOutputWithContext(ctx context.Context) SpacesBucketVersioningOutput {
	return o
}

func (o SpacesBucketVersioningOutput) ToSpacesBucketVersioningPtrOutput() SpacesBucketVersioningPtrOutput {
	return o.ToSpacesBucketVersioningPtrOutputWithContext(context.Background())
}

func (o SpacesBucketVersioningOutput) ToSpacesBucketVersioningPtrOutputWithContext(ctx context.Context) SpacesBucketVersioningPtrOutput {
	return o.ApplyT(func(v SpacesBucketVersioning) *SpacesBucketVersioning {
		return &v
	}).(SpacesBucketVersioningPtrOutput)
}

// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned
// state. You can, however, suspend versioning on that bucket.
func (o SpacesBucketVersioningOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpacesBucketVersioning) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SpacesBucketVersioningPtrOutput struct{ *pulumi.OutputState }

func (SpacesBucketVersioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketVersioning)(nil)).Elem()
}

func (o SpacesBucketVersioningPtrOutput) ToSpacesBucketVersioningPtrOutput() SpacesBucketVersioningPtrOutput {
	return o
}

func (o SpacesBucketVersioningPtrOutput) ToSpacesBucketVersioningPtrOutputWithContext(ctx context.Context) SpacesBucketVersioningPtrOutput {
	return o
}

func (o SpacesBucketVersioningPtrOutput) Elem() SpacesBucketVersioningOutput {
	return o.ApplyT(func(v *SpacesBucketVersioning) SpacesBucketVersioning { return *v }).(SpacesBucketVersioningOutput)
}

// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned
// state. You can, however, suspend versioning on that bucket.
func (o SpacesBucketVersioningPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpacesBucketVersioning) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GetAppSpec struct {
	Databases []GetAppSpecDatabase `pulumi:"databases"`
	Domains   []string             `pulumi:"domains"`
	// The name of the component
	Name        string                 `pulumi:"name"`
	Region      *string                `pulumi:"region"`
	Services    []GetAppSpecService    `pulumi:"services"`
	StaticSites []GetAppSpecStaticSite `pulumi:"staticSites"`
	Workers     []GetAppSpecWorker     `pulumi:"workers"`
}

// GetAppSpecInput is an input type that accepts GetAppSpecArgs and GetAppSpecOutput values.
// You can construct a concrete instance of `GetAppSpecInput` via:
//
//          GetAppSpecArgs{...}
type GetAppSpecInput interface {
	pulumi.Input

	ToGetAppSpecOutput() GetAppSpecOutput
	ToGetAppSpecOutputWithContext(context.Context) GetAppSpecOutput
}

type GetAppSpecArgs struct {
	Databases GetAppSpecDatabaseArrayInput `pulumi:"databases"`
	Domains   pulumi.StringArrayInput      `pulumi:"domains"`
	// The name of the component
	Name        pulumi.StringInput             `pulumi:"name"`
	Region      pulumi.StringPtrInput          `pulumi:"region"`
	Services    GetAppSpecServiceArrayInput    `pulumi:"services"`
	StaticSites GetAppSpecStaticSiteArrayInput `pulumi:"staticSites"`
	Workers     GetAppSpecWorkerArrayInput     `pulumi:"workers"`
}

func (GetAppSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpec)(nil)).Elem()
}

func (i GetAppSpecArgs) ToGetAppSpecOutput() GetAppSpecOutput {
	return i.ToGetAppSpecOutputWithContext(context.Background())
}

func (i GetAppSpecArgs) ToGetAppSpecOutputWithContext(ctx context.Context) GetAppSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecOutput)
}

type GetAppSpecOutput struct{ *pulumi.OutputState }

func (GetAppSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpec)(nil)).Elem()
}

func (o GetAppSpecOutput) ToGetAppSpecOutput() GetAppSpecOutput {
	return o
}

func (o GetAppSpecOutput) ToGetAppSpecOutputWithContext(ctx context.Context) GetAppSpecOutput {
	return o
}

func (o GetAppSpecOutput) Databases() GetAppSpecDatabaseArrayOutput {
	return o.ApplyT(func(v GetAppSpec) []GetAppSpecDatabase { return v.Databases }).(GetAppSpecDatabaseArrayOutput)
}

func (o GetAppSpecOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAppSpec) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// The name of the component
func (o GetAppSpecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpec) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAppSpecOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpec) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o GetAppSpecOutput) Services() GetAppSpecServiceArrayOutput {
	return o.ApplyT(func(v GetAppSpec) []GetAppSpecService { return v.Services }).(GetAppSpecServiceArrayOutput)
}

func (o GetAppSpecOutput) StaticSites() GetAppSpecStaticSiteArrayOutput {
	return o.ApplyT(func(v GetAppSpec) []GetAppSpecStaticSite { return v.StaticSites }).(GetAppSpecStaticSiteArrayOutput)
}

func (o GetAppSpecOutput) Workers() GetAppSpecWorkerArrayOutput {
	return o.ApplyT(func(v GetAppSpec) []GetAppSpecWorker { return v.Workers }).(GetAppSpecWorkerArrayOutput)
}

type GetAppSpecDatabase struct {
	ClusterName *string `pulumi:"clusterName"`
	DbName      *string `pulumi:"dbName"`
	DbUser      *string `pulumi:"dbUser"`
	Engine      *string `pulumi:"engine"`
	// The name of the component
	Name       *string `pulumi:"name"`
	Production *bool   `pulumi:"production"`
	Version    *string `pulumi:"version"`
}

// GetAppSpecDatabaseInput is an input type that accepts GetAppSpecDatabaseArgs and GetAppSpecDatabaseOutput values.
// You can construct a concrete instance of `GetAppSpecDatabaseInput` via:
//
//          GetAppSpecDatabaseArgs{...}
type GetAppSpecDatabaseInput interface {
	pulumi.Input

	ToGetAppSpecDatabaseOutput() GetAppSpecDatabaseOutput
	ToGetAppSpecDatabaseOutputWithContext(context.Context) GetAppSpecDatabaseOutput
}

type GetAppSpecDatabaseArgs struct {
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	DbName      pulumi.StringPtrInput `pulumi:"dbName"`
	DbUser      pulumi.StringPtrInput `pulumi:"dbUser"`
	Engine      pulumi.StringPtrInput `pulumi:"engine"`
	// The name of the component
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Production pulumi.BoolPtrInput   `pulumi:"production"`
	Version    pulumi.StringPtrInput `pulumi:"version"`
}

func (GetAppSpecDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecDatabase)(nil)).Elem()
}

func (i GetAppSpecDatabaseArgs) ToGetAppSpecDatabaseOutput() GetAppSpecDatabaseOutput {
	return i.ToGetAppSpecDatabaseOutputWithContext(context.Background())
}

func (i GetAppSpecDatabaseArgs) ToGetAppSpecDatabaseOutputWithContext(ctx context.Context) GetAppSpecDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecDatabaseOutput)
}

// GetAppSpecDatabaseArrayInput is an input type that accepts GetAppSpecDatabaseArray and GetAppSpecDatabaseArrayOutput values.
// You can construct a concrete instance of `GetAppSpecDatabaseArrayInput` via:
//
//          GetAppSpecDatabaseArray{ GetAppSpecDatabaseArgs{...} }
type GetAppSpecDatabaseArrayInput interface {
	pulumi.Input

	ToGetAppSpecDatabaseArrayOutput() GetAppSpecDatabaseArrayOutput
	ToGetAppSpecDatabaseArrayOutputWithContext(context.Context) GetAppSpecDatabaseArrayOutput
}

type GetAppSpecDatabaseArray []GetAppSpecDatabaseInput

func (GetAppSpecDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecDatabase)(nil)).Elem()
}

func (i GetAppSpecDatabaseArray) ToGetAppSpecDatabaseArrayOutput() GetAppSpecDatabaseArrayOutput {
	return i.ToGetAppSpecDatabaseArrayOutputWithContext(context.Background())
}

func (i GetAppSpecDatabaseArray) ToGetAppSpecDatabaseArrayOutputWithContext(ctx context.Context) GetAppSpecDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecDatabaseArrayOutput)
}

type GetAppSpecDatabaseOutput struct{ *pulumi.OutputState }

func (GetAppSpecDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecDatabase)(nil)).Elem()
}

func (o GetAppSpecDatabaseOutput) ToGetAppSpecDatabaseOutput() GetAppSpecDatabaseOutput {
	return o
}

func (o GetAppSpecDatabaseOutput) ToGetAppSpecDatabaseOutputWithContext(ctx context.Context) GetAppSpecDatabaseOutput {
	return o
}

func (o GetAppSpecDatabaseOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

func (o GetAppSpecDatabaseOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

func (o GetAppSpecDatabaseOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *string { return v.DbUser }).(pulumi.StringPtrOutput)
}

func (o GetAppSpecDatabaseOutput) Engine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *string { return v.Engine }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o GetAppSpecDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetAppSpecDatabaseOutput) Production() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *bool { return v.Production }).(pulumi.BoolPtrOutput)
}

func (o GetAppSpecDatabaseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecDatabase) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GetAppSpecDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecDatabase)(nil)).Elem()
}

func (o GetAppSpecDatabaseArrayOutput) ToGetAppSpecDatabaseArrayOutput() GetAppSpecDatabaseArrayOutput {
	return o
}

func (o GetAppSpecDatabaseArrayOutput) ToGetAppSpecDatabaseArrayOutputWithContext(ctx context.Context) GetAppSpecDatabaseArrayOutput {
	return o
}

func (o GetAppSpecDatabaseArrayOutput) Index(i pulumi.IntInput) GetAppSpecDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecDatabase {
		return vs[0].([]GetAppSpecDatabase)[vs[1].(int)]
	}).(GetAppSpecDatabaseOutput)
}

type GetAppSpecService struct {
	// An optional build command to run while building this component from source.
	BuildCommand *string `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath *string `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs []GetAppSpecServiceEnv `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git *GetAppSpecServiceGit `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github *GetAppSpecServiceGithub `pulumi:"github"`
	// A health check to determine the availability of this component.
	HealthCheck *GetAppSpecServiceHealthCheck `pulumi:"healthCheck"`
	// The internal port on which this service's run command will listen.
	HttpPort int `pulumi:"httpPort"`
	// The amount of instances that this component should be scaled to.
	InstanceCount *int `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug *string `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   string                  `pulumi:"name"`
	Routes GetAppSpecServiceRoutes `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand string `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir *string `pulumi:"sourceDir"`
}

// GetAppSpecServiceInput is an input type that accepts GetAppSpecServiceArgs and GetAppSpecServiceOutput values.
// You can construct a concrete instance of `GetAppSpecServiceInput` via:
//
//          GetAppSpecServiceArgs{...}
type GetAppSpecServiceInput interface {
	pulumi.Input

	ToGetAppSpecServiceOutput() GetAppSpecServiceOutput
	ToGetAppSpecServiceOutputWithContext(context.Context) GetAppSpecServiceOutput
}

type GetAppSpecServiceArgs struct {
	// An optional build command to run while building this component from source.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug pulumi.StringPtrInput `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs GetAppSpecServiceEnvArrayInput `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git GetAppSpecServiceGitPtrInput `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github GetAppSpecServiceGithubPtrInput `pulumi:"github"`
	// A health check to determine the availability of this component.
	HealthCheck GetAppSpecServiceHealthCheckPtrInput `pulumi:"healthCheck"`
	// The internal port on which this service's run command will listen.
	HttpPort pulumi.IntInput `pulumi:"httpPort"`
	// The amount of instances that this component should be scaled to.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug pulumi.StringPtrInput `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   pulumi.StringInput           `pulumi:"name"`
	Routes GetAppSpecServiceRoutesInput `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand pulumi.StringInput `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir pulumi.StringPtrInput `pulumi:"sourceDir"`
}

func (GetAppSpecServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecService)(nil)).Elem()
}

func (i GetAppSpecServiceArgs) ToGetAppSpecServiceOutput() GetAppSpecServiceOutput {
	return i.ToGetAppSpecServiceOutputWithContext(context.Background())
}

func (i GetAppSpecServiceArgs) ToGetAppSpecServiceOutputWithContext(ctx context.Context) GetAppSpecServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceOutput)
}

// GetAppSpecServiceArrayInput is an input type that accepts GetAppSpecServiceArray and GetAppSpecServiceArrayOutput values.
// You can construct a concrete instance of `GetAppSpecServiceArrayInput` via:
//
//          GetAppSpecServiceArray{ GetAppSpecServiceArgs{...} }
type GetAppSpecServiceArrayInput interface {
	pulumi.Input

	ToGetAppSpecServiceArrayOutput() GetAppSpecServiceArrayOutput
	ToGetAppSpecServiceArrayOutputWithContext(context.Context) GetAppSpecServiceArrayOutput
}

type GetAppSpecServiceArray []GetAppSpecServiceInput

func (GetAppSpecServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecService)(nil)).Elem()
}

func (i GetAppSpecServiceArray) ToGetAppSpecServiceArrayOutput() GetAppSpecServiceArrayOutput {
	return i.ToGetAppSpecServiceArrayOutputWithContext(context.Background())
}

func (i GetAppSpecServiceArray) ToGetAppSpecServiceArrayOutputWithContext(ctx context.Context) GetAppSpecServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceArrayOutput)
}

type GetAppSpecServiceOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecService)(nil)).Elem()
}

func (o GetAppSpecServiceOutput) ToGetAppSpecServiceOutput() GetAppSpecServiceOutput {
	return o
}

func (o GetAppSpecServiceOutput) ToGetAppSpecServiceOutputWithContext(ctx context.Context) GetAppSpecServiceOutput {
	return o
}

// An optional build command to run while building this component from source.
func (o GetAppSpecServiceOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
func (o GetAppSpecServiceOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

// An environment slug describing the type of this app.
func (o GetAppSpecServiceOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *string { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// Describes an environment variable made available to an app competent.
func (o GetAppSpecServiceOutput) Envs() GetAppSpecServiceEnvArrayOutput {
	return o.ApplyT(func(v GetAppSpecService) []GetAppSpecServiceEnv { return v.Envs }).(GetAppSpecServiceEnvArrayOutput)
}

// A Git repo to use as component's source. Only one of `git` and `github` may be set.
func (o GetAppSpecServiceOutput) Git() GetAppSpecServiceGitPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *GetAppSpecServiceGit { return v.Git }).(GetAppSpecServiceGitPtrOutput)
}

// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
func (o GetAppSpecServiceOutput) Github() GetAppSpecServiceGithubPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *GetAppSpecServiceGithub { return v.Github }).(GetAppSpecServiceGithubPtrOutput)
}

// A health check to determine the availability of this component.
func (o GetAppSpecServiceOutput) HealthCheck() GetAppSpecServiceHealthCheckPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *GetAppSpecServiceHealthCheck { return v.HealthCheck }).(GetAppSpecServiceHealthCheckPtrOutput)
}

// The internal port on which this service's run command will listen.
func (o GetAppSpecServiceOutput) HttpPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetAppSpecService) int { return v.HttpPort }).(pulumi.IntOutput)
}

// The amount of instances that this component should be scaled to.
func (o GetAppSpecServiceOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// The instance size to use for this component.
func (o GetAppSpecServiceOutput) InstanceSizeSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *string { return v.InstanceSizeSlug }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o GetAppSpecServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecService) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAppSpecServiceOutput) Routes() GetAppSpecServiceRoutesOutput {
	return o.ApplyT(func(v GetAppSpecService) GetAppSpecServiceRoutes { return v.Routes }).(GetAppSpecServiceRoutesOutput)
}

// An optional run command to override the component's default.
func (o GetAppSpecServiceOutput) RunCommand() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecService) string { return v.RunCommand }).(pulumi.StringOutput)
}

// An optional path to the working directory to use for the build.
func (o GetAppSpecServiceOutput) SourceDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecService) *string { return v.SourceDir }).(pulumi.StringPtrOutput)
}

type GetAppSpecServiceArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecService)(nil)).Elem()
}

func (o GetAppSpecServiceArrayOutput) ToGetAppSpecServiceArrayOutput() GetAppSpecServiceArrayOutput {
	return o
}

func (o GetAppSpecServiceArrayOutput) ToGetAppSpecServiceArrayOutputWithContext(ctx context.Context) GetAppSpecServiceArrayOutput {
	return o
}

func (o GetAppSpecServiceArrayOutput) Index(i pulumi.IntInput) GetAppSpecServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecService {
		return vs[0].([]GetAppSpecService)[vs[1].(int)]
	}).(GetAppSpecServiceOutput)
}

type GetAppSpecServiceEnv struct {
	// The name of the environment variable.
	Key *string `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope *string `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type string `pulumi:"type"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// GetAppSpecServiceEnvInput is an input type that accepts GetAppSpecServiceEnvArgs and GetAppSpecServiceEnvOutput values.
// You can construct a concrete instance of `GetAppSpecServiceEnvInput` via:
//
//          GetAppSpecServiceEnvArgs{...}
type GetAppSpecServiceEnvInput interface {
	pulumi.Input

	ToGetAppSpecServiceEnvOutput() GetAppSpecServiceEnvOutput
	ToGetAppSpecServiceEnvOutputWithContext(context.Context) GetAppSpecServiceEnvOutput
}

type GetAppSpecServiceEnvArgs struct {
	// The name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetAppSpecServiceEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceEnv)(nil)).Elem()
}

func (i GetAppSpecServiceEnvArgs) ToGetAppSpecServiceEnvOutput() GetAppSpecServiceEnvOutput {
	return i.ToGetAppSpecServiceEnvOutputWithContext(context.Background())
}

func (i GetAppSpecServiceEnvArgs) ToGetAppSpecServiceEnvOutputWithContext(ctx context.Context) GetAppSpecServiceEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceEnvOutput)
}

// GetAppSpecServiceEnvArrayInput is an input type that accepts GetAppSpecServiceEnvArray and GetAppSpecServiceEnvArrayOutput values.
// You can construct a concrete instance of `GetAppSpecServiceEnvArrayInput` via:
//
//          GetAppSpecServiceEnvArray{ GetAppSpecServiceEnvArgs{...} }
type GetAppSpecServiceEnvArrayInput interface {
	pulumi.Input

	ToGetAppSpecServiceEnvArrayOutput() GetAppSpecServiceEnvArrayOutput
	ToGetAppSpecServiceEnvArrayOutputWithContext(context.Context) GetAppSpecServiceEnvArrayOutput
}

type GetAppSpecServiceEnvArray []GetAppSpecServiceEnvInput

func (GetAppSpecServiceEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecServiceEnv)(nil)).Elem()
}

func (i GetAppSpecServiceEnvArray) ToGetAppSpecServiceEnvArrayOutput() GetAppSpecServiceEnvArrayOutput {
	return i.ToGetAppSpecServiceEnvArrayOutputWithContext(context.Background())
}

func (i GetAppSpecServiceEnvArray) ToGetAppSpecServiceEnvArrayOutputWithContext(ctx context.Context) GetAppSpecServiceEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceEnvArrayOutput)
}

type GetAppSpecServiceEnvOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceEnv)(nil)).Elem()
}

func (o GetAppSpecServiceEnvOutput) ToGetAppSpecServiceEnvOutput() GetAppSpecServiceEnvOutput {
	return o
}

func (o GetAppSpecServiceEnvOutput) ToGetAppSpecServiceEnvOutputWithContext(ctx context.Context) GetAppSpecServiceEnvOutput {
	return o
}

// The name of the environment variable.
func (o GetAppSpecServiceEnvOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceEnv) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
func (o GetAppSpecServiceEnvOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceEnv) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the environment variable, `GENERAL` or `SECRET`.
func (o GetAppSpecServiceEnvOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecServiceEnv) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o GetAppSpecServiceEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetAppSpecServiceEnvArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecServiceEnv)(nil)).Elem()
}

func (o GetAppSpecServiceEnvArrayOutput) ToGetAppSpecServiceEnvArrayOutput() GetAppSpecServiceEnvArrayOutput {
	return o
}

func (o GetAppSpecServiceEnvArrayOutput) ToGetAppSpecServiceEnvArrayOutputWithContext(ctx context.Context) GetAppSpecServiceEnvArrayOutput {
	return o
}

func (o GetAppSpecServiceEnvArrayOutput) Index(i pulumi.IntInput) GetAppSpecServiceEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecServiceEnv {
		return vs[0].([]GetAppSpecServiceEnv)[vs[1].(int)]
	}).(GetAppSpecServiceEnvOutput)
}

type GetAppSpecServiceGit struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl *string `pulumi:"repoCloneUrl"`
}

// GetAppSpecServiceGitInput is an input type that accepts GetAppSpecServiceGitArgs and GetAppSpecServiceGitOutput values.
// You can construct a concrete instance of `GetAppSpecServiceGitInput` via:
//
//          GetAppSpecServiceGitArgs{...}
type GetAppSpecServiceGitInput interface {
	pulumi.Input

	ToGetAppSpecServiceGitOutput() GetAppSpecServiceGitOutput
	ToGetAppSpecServiceGitOutputWithContext(context.Context) GetAppSpecServiceGitOutput
}

type GetAppSpecServiceGitArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl pulumi.StringPtrInput `pulumi:"repoCloneUrl"`
}

func (GetAppSpecServiceGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceGit)(nil)).Elem()
}

func (i GetAppSpecServiceGitArgs) ToGetAppSpecServiceGitOutput() GetAppSpecServiceGitOutput {
	return i.ToGetAppSpecServiceGitOutputWithContext(context.Background())
}

func (i GetAppSpecServiceGitArgs) ToGetAppSpecServiceGitOutputWithContext(ctx context.Context) GetAppSpecServiceGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceGitOutput)
}

func (i GetAppSpecServiceGitArgs) ToGetAppSpecServiceGitPtrOutput() GetAppSpecServiceGitPtrOutput {
	return i.ToGetAppSpecServiceGitPtrOutputWithContext(context.Background())
}

func (i GetAppSpecServiceGitArgs) ToGetAppSpecServiceGitPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceGitOutput).ToGetAppSpecServiceGitPtrOutputWithContext(ctx)
}

// GetAppSpecServiceGitPtrInput is an input type that accepts GetAppSpecServiceGitArgs, GetAppSpecServiceGitPtr and GetAppSpecServiceGitPtrOutput values.
// You can construct a concrete instance of `GetAppSpecServiceGitPtrInput` via:
//
//          GetAppSpecServiceGitArgs{...}
//
//  or:
//
//          nil
type GetAppSpecServiceGitPtrInput interface {
	pulumi.Input

	ToGetAppSpecServiceGitPtrOutput() GetAppSpecServiceGitPtrOutput
	ToGetAppSpecServiceGitPtrOutputWithContext(context.Context) GetAppSpecServiceGitPtrOutput
}

type getAppSpecServiceGitPtrType GetAppSpecServiceGitArgs

func GetAppSpecServiceGitPtr(v *GetAppSpecServiceGitArgs) GetAppSpecServiceGitPtrInput {
	return (*getAppSpecServiceGitPtrType)(v)
}

func (*getAppSpecServiceGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecServiceGit)(nil)).Elem()
}

func (i *getAppSpecServiceGitPtrType) ToGetAppSpecServiceGitPtrOutput() GetAppSpecServiceGitPtrOutput {
	return i.ToGetAppSpecServiceGitPtrOutputWithContext(context.Background())
}

func (i *getAppSpecServiceGitPtrType) ToGetAppSpecServiceGitPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceGitPtrOutput)
}

type GetAppSpecServiceGitOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceGit)(nil)).Elem()
}

func (o GetAppSpecServiceGitOutput) ToGetAppSpecServiceGitOutput() GetAppSpecServiceGitOutput {
	return o
}

func (o GetAppSpecServiceGitOutput) ToGetAppSpecServiceGitOutputWithContext(ctx context.Context) GetAppSpecServiceGitOutput {
	return o
}

func (o GetAppSpecServiceGitOutput) ToGetAppSpecServiceGitPtrOutput() GetAppSpecServiceGitPtrOutput {
	return o.ToGetAppSpecServiceGitPtrOutputWithContext(context.Background())
}

func (o GetAppSpecServiceGitOutput) ToGetAppSpecServiceGitPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGitPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGit) *GetAppSpecServiceGit {
		return &v
	}).(GetAppSpecServiceGitPtrOutput)
}

// The name of the branch to use.
func (o GetAppSpecServiceGitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGit) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o GetAppSpecServiceGitOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGit) *string { return v.RepoCloneUrl }).(pulumi.StringPtrOutput)
}

type GetAppSpecServiceGitPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecServiceGit)(nil)).Elem()
}

func (o GetAppSpecServiceGitPtrOutput) ToGetAppSpecServiceGitPtrOutput() GetAppSpecServiceGitPtrOutput {
	return o
}

func (o GetAppSpecServiceGitPtrOutput) ToGetAppSpecServiceGitPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGitPtrOutput {
	return o
}

func (o GetAppSpecServiceGitPtrOutput) Elem() GetAppSpecServiceGitOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGit) GetAppSpecServiceGit { return *v }).(GetAppSpecServiceGitOutput)
}

// The name of the branch to use.
func (o GetAppSpecServiceGitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGit) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o GetAppSpecServiceGitPtrOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGit) *string {
		if v == nil {
			return nil
		}
		return v.RepoCloneUrl
	}).(pulumi.StringPtrOutput)
}

type GetAppSpecServiceGithub struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush *bool `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo *string `pulumi:"repo"`
}

// GetAppSpecServiceGithubInput is an input type that accepts GetAppSpecServiceGithubArgs and GetAppSpecServiceGithubOutput values.
// You can construct a concrete instance of `GetAppSpecServiceGithubInput` via:
//
//          GetAppSpecServiceGithubArgs{...}
type GetAppSpecServiceGithubInput interface {
	pulumi.Input

	ToGetAppSpecServiceGithubOutput() GetAppSpecServiceGithubOutput
	ToGetAppSpecServiceGithubOutputWithContext(context.Context) GetAppSpecServiceGithubOutput
}

type GetAppSpecServiceGithubArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush pulumi.BoolPtrInput `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
}

func (GetAppSpecServiceGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceGithub)(nil)).Elem()
}

func (i GetAppSpecServiceGithubArgs) ToGetAppSpecServiceGithubOutput() GetAppSpecServiceGithubOutput {
	return i.ToGetAppSpecServiceGithubOutputWithContext(context.Background())
}

func (i GetAppSpecServiceGithubArgs) ToGetAppSpecServiceGithubOutputWithContext(ctx context.Context) GetAppSpecServiceGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceGithubOutput)
}

func (i GetAppSpecServiceGithubArgs) ToGetAppSpecServiceGithubPtrOutput() GetAppSpecServiceGithubPtrOutput {
	return i.ToGetAppSpecServiceGithubPtrOutputWithContext(context.Background())
}

func (i GetAppSpecServiceGithubArgs) ToGetAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceGithubOutput).ToGetAppSpecServiceGithubPtrOutputWithContext(ctx)
}

// GetAppSpecServiceGithubPtrInput is an input type that accepts GetAppSpecServiceGithubArgs, GetAppSpecServiceGithubPtr and GetAppSpecServiceGithubPtrOutput values.
// You can construct a concrete instance of `GetAppSpecServiceGithubPtrInput` via:
//
//          GetAppSpecServiceGithubArgs{...}
//
//  or:
//
//          nil
type GetAppSpecServiceGithubPtrInput interface {
	pulumi.Input

	ToGetAppSpecServiceGithubPtrOutput() GetAppSpecServiceGithubPtrOutput
	ToGetAppSpecServiceGithubPtrOutputWithContext(context.Context) GetAppSpecServiceGithubPtrOutput
}

type getAppSpecServiceGithubPtrType GetAppSpecServiceGithubArgs

func GetAppSpecServiceGithubPtr(v *GetAppSpecServiceGithubArgs) GetAppSpecServiceGithubPtrInput {
	return (*getAppSpecServiceGithubPtrType)(v)
}

func (*getAppSpecServiceGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecServiceGithub)(nil)).Elem()
}

func (i *getAppSpecServiceGithubPtrType) ToGetAppSpecServiceGithubPtrOutput() GetAppSpecServiceGithubPtrOutput {
	return i.ToGetAppSpecServiceGithubPtrOutputWithContext(context.Background())
}

func (i *getAppSpecServiceGithubPtrType) ToGetAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceGithubPtrOutput)
}

type GetAppSpecServiceGithubOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceGithub)(nil)).Elem()
}

func (o GetAppSpecServiceGithubOutput) ToGetAppSpecServiceGithubOutput() GetAppSpecServiceGithubOutput {
	return o
}

func (o GetAppSpecServiceGithubOutput) ToGetAppSpecServiceGithubOutputWithContext(ctx context.Context) GetAppSpecServiceGithubOutput {
	return o
}

func (o GetAppSpecServiceGithubOutput) ToGetAppSpecServiceGithubPtrOutput() GetAppSpecServiceGithubPtrOutput {
	return o.ToGetAppSpecServiceGithubPtrOutputWithContext(context.Background())
}

func (o GetAppSpecServiceGithubOutput) ToGetAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGithubPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGithub) *GetAppSpecServiceGithub {
		return &v
	}).(GetAppSpecServiceGithubPtrOutput)
}

// The name of the branch to use.
func (o GetAppSpecServiceGithubOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGithub) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o GetAppSpecServiceGithubOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGithub) *bool { return v.DeployOnPush }).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o GetAppSpecServiceGithubOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceGithub) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

type GetAppSpecServiceGithubPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecServiceGithub)(nil)).Elem()
}

func (o GetAppSpecServiceGithubPtrOutput) ToGetAppSpecServiceGithubPtrOutput() GetAppSpecServiceGithubPtrOutput {
	return o
}

func (o GetAppSpecServiceGithubPtrOutput) ToGetAppSpecServiceGithubPtrOutputWithContext(ctx context.Context) GetAppSpecServiceGithubPtrOutput {
	return o
}

func (o GetAppSpecServiceGithubPtrOutput) Elem() GetAppSpecServiceGithubOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGithub) GetAppSpecServiceGithub { return *v }).(GetAppSpecServiceGithubOutput)
}

// The name of the branch to use.
func (o GetAppSpecServiceGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGithub) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o GetAppSpecServiceGithubPtrOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGithub) *bool {
		if v == nil {
			return nil
		}
		return v.DeployOnPush
	}).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o GetAppSpecServiceGithubPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceGithub) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

type GetAppSpecServiceHealthCheck struct {
	// The number of failed health checks before considered unhealthy.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The route path used for the HTTP health check ping.
	HttpPath *string `pulumi:"httpPath"`
	// The number of seconds to wait before beginning health checks.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The number of seconds to wait between health checks.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The number of successful health checks before considered healthy.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The number of seconds after which the check times out.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// GetAppSpecServiceHealthCheckInput is an input type that accepts GetAppSpecServiceHealthCheckArgs and GetAppSpecServiceHealthCheckOutput values.
// You can construct a concrete instance of `GetAppSpecServiceHealthCheckInput` via:
//
//          GetAppSpecServiceHealthCheckArgs{...}
type GetAppSpecServiceHealthCheckInput interface {
	pulumi.Input

	ToGetAppSpecServiceHealthCheckOutput() GetAppSpecServiceHealthCheckOutput
	ToGetAppSpecServiceHealthCheckOutputWithContext(context.Context) GetAppSpecServiceHealthCheckOutput
}

type GetAppSpecServiceHealthCheckArgs struct {
	// The number of failed health checks before considered unhealthy.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The route path used for the HTTP health check ping.
	HttpPath pulumi.StringPtrInput `pulumi:"httpPath"`
	// The number of seconds to wait before beginning health checks.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The number of seconds to wait between health checks.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The number of successful health checks before considered healthy.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The number of seconds after which the check times out.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (GetAppSpecServiceHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceHealthCheck)(nil)).Elem()
}

func (i GetAppSpecServiceHealthCheckArgs) ToGetAppSpecServiceHealthCheckOutput() GetAppSpecServiceHealthCheckOutput {
	return i.ToGetAppSpecServiceHealthCheckOutputWithContext(context.Background())
}

func (i GetAppSpecServiceHealthCheckArgs) ToGetAppSpecServiceHealthCheckOutputWithContext(ctx context.Context) GetAppSpecServiceHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceHealthCheckOutput)
}

func (i GetAppSpecServiceHealthCheckArgs) ToGetAppSpecServiceHealthCheckPtrOutput() GetAppSpecServiceHealthCheckPtrOutput {
	return i.ToGetAppSpecServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (i GetAppSpecServiceHealthCheckArgs) ToGetAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) GetAppSpecServiceHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceHealthCheckOutput).ToGetAppSpecServiceHealthCheckPtrOutputWithContext(ctx)
}

// GetAppSpecServiceHealthCheckPtrInput is an input type that accepts GetAppSpecServiceHealthCheckArgs, GetAppSpecServiceHealthCheckPtr and GetAppSpecServiceHealthCheckPtrOutput values.
// You can construct a concrete instance of `GetAppSpecServiceHealthCheckPtrInput` via:
//
//          GetAppSpecServiceHealthCheckArgs{...}
//
//  or:
//
//          nil
type GetAppSpecServiceHealthCheckPtrInput interface {
	pulumi.Input

	ToGetAppSpecServiceHealthCheckPtrOutput() GetAppSpecServiceHealthCheckPtrOutput
	ToGetAppSpecServiceHealthCheckPtrOutputWithContext(context.Context) GetAppSpecServiceHealthCheckPtrOutput
}

type getAppSpecServiceHealthCheckPtrType GetAppSpecServiceHealthCheckArgs

func GetAppSpecServiceHealthCheckPtr(v *GetAppSpecServiceHealthCheckArgs) GetAppSpecServiceHealthCheckPtrInput {
	return (*getAppSpecServiceHealthCheckPtrType)(v)
}

func (*getAppSpecServiceHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecServiceHealthCheck)(nil)).Elem()
}

func (i *getAppSpecServiceHealthCheckPtrType) ToGetAppSpecServiceHealthCheckPtrOutput() GetAppSpecServiceHealthCheckPtrOutput {
	return i.ToGetAppSpecServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (i *getAppSpecServiceHealthCheckPtrType) ToGetAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) GetAppSpecServiceHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceHealthCheckPtrOutput)
}

type GetAppSpecServiceHealthCheckOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceHealthCheck)(nil)).Elem()
}

func (o GetAppSpecServiceHealthCheckOutput) ToGetAppSpecServiceHealthCheckOutput() GetAppSpecServiceHealthCheckOutput {
	return o
}

func (o GetAppSpecServiceHealthCheckOutput) ToGetAppSpecServiceHealthCheckOutputWithContext(ctx context.Context) GetAppSpecServiceHealthCheckOutput {
	return o
}

func (o GetAppSpecServiceHealthCheckOutput) ToGetAppSpecServiceHealthCheckPtrOutput() GetAppSpecServiceHealthCheckPtrOutput {
	return o.ToGetAppSpecServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (o GetAppSpecServiceHealthCheckOutput) ToGetAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) GetAppSpecServiceHealthCheckPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *GetAppSpecServiceHealthCheck {
		return &v
	}).(GetAppSpecServiceHealthCheckPtrOutput)
}

// The number of failed health checks before considered unhealthy.
func (o GetAppSpecServiceHealthCheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The route path used for the HTTP health check ping.
func (o GetAppSpecServiceHealthCheckOutput) HttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *string { return v.HttpPath }).(pulumi.StringPtrOutput)
}

// The number of seconds to wait before beginning health checks.
func (o GetAppSpecServiceHealthCheckOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The number of seconds to wait between health checks.
func (o GetAppSpecServiceHealthCheckOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The number of successful health checks before considered healthy.
func (o GetAppSpecServiceHealthCheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The number of seconds after which the check times out.
func (o GetAppSpecServiceHealthCheckOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceHealthCheck) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type GetAppSpecServiceHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecServiceHealthCheck)(nil)).Elem()
}

func (o GetAppSpecServiceHealthCheckPtrOutput) ToGetAppSpecServiceHealthCheckPtrOutput() GetAppSpecServiceHealthCheckPtrOutput {
	return o
}

func (o GetAppSpecServiceHealthCheckPtrOutput) ToGetAppSpecServiceHealthCheckPtrOutputWithContext(ctx context.Context) GetAppSpecServiceHealthCheckPtrOutput {
	return o
}

func (o GetAppSpecServiceHealthCheckPtrOutput) Elem() GetAppSpecServiceHealthCheckOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) GetAppSpecServiceHealthCheck { return *v }).(GetAppSpecServiceHealthCheckOutput)
}

// The number of failed health checks before considered unhealthy.
func (o GetAppSpecServiceHealthCheckPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The route path used for the HTTP health check ping.
func (o GetAppSpecServiceHealthCheckPtrOutput) HttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpPath
	}).(pulumi.StringPtrOutput)
}

// The number of seconds to wait before beginning health checks.
func (o GetAppSpecServiceHealthCheckPtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The number of seconds to wait between health checks.
func (o GetAppSpecServiceHealthCheckPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of successful health checks before considered healthy.
func (o GetAppSpecServiceHealthCheckPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The number of seconds after which the check times out.
func (o GetAppSpecServiceHealthCheckPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetAppSpecServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type GetAppSpecServiceRoutes struct {
	// Paths must start with `/` and must be unique within the app.
	Path *string `pulumi:"path"`
}

// GetAppSpecServiceRoutesInput is an input type that accepts GetAppSpecServiceRoutesArgs and GetAppSpecServiceRoutesOutput values.
// You can construct a concrete instance of `GetAppSpecServiceRoutesInput` via:
//
//          GetAppSpecServiceRoutesArgs{...}
type GetAppSpecServiceRoutesInput interface {
	pulumi.Input

	ToGetAppSpecServiceRoutesOutput() GetAppSpecServiceRoutesOutput
	ToGetAppSpecServiceRoutesOutputWithContext(context.Context) GetAppSpecServiceRoutesOutput
}

type GetAppSpecServiceRoutesArgs struct {
	// Paths must start with `/` and must be unique within the app.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GetAppSpecServiceRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceRoutes)(nil)).Elem()
}

func (i GetAppSpecServiceRoutesArgs) ToGetAppSpecServiceRoutesOutput() GetAppSpecServiceRoutesOutput {
	return i.ToGetAppSpecServiceRoutesOutputWithContext(context.Background())
}

func (i GetAppSpecServiceRoutesArgs) ToGetAppSpecServiceRoutesOutputWithContext(ctx context.Context) GetAppSpecServiceRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecServiceRoutesOutput)
}

type GetAppSpecServiceRoutesOutput struct{ *pulumi.OutputState }

func (GetAppSpecServiceRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecServiceRoutes)(nil)).Elem()
}

func (o GetAppSpecServiceRoutesOutput) ToGetAppSpecServiceRoutesOutput() GetAppSpecServiceRoutesOutput {
	return o
}

func (o GetAppSpecServiceRoutesOutput) ToGetAppSpecServiceRoutesOutputWithContext(ctx context.Context) GetAppSpecServiceRoutesOutput {
	return o
}

// Paths must start with `/` and must be unique within the app.
func (o GetAppSpecServiceRoutesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecServiceRoutes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSite struct {
	// An optional build command to run while building this component from source.
	BuildCommand *string `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath *string `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs []GetAppSpecStaticSiteEnv `pulumi:"envs"`
	// The name of the error document to use when serving this static site*
	ErrorDocument *string `pulumi:"errorDocument"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git *GetAppSpecStaticSiteGit `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github *GetAppSpecStaticSiteGithub `pulumi:"github"`
	// The name of the index document to use when serving this static site.
	IndexDocument *string `pulumi:"indexDocument"`
	// The name of the component
	Name string `pulumi:"name"`
	// An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
	OutputDir *string                    `pulumi:"outputDir"`
	Routes    GetAppSpecStaticSiteRoutes `pulumi:"routes"`
	// An optional path to the working directory to use for the build.
	SourceDir *string `pulumi:"sourceDir"`
}

// GetAppSpecStaticSiteInput is an input type that accepts GetAppSpecStaticSiteArgs and GetAppSpecStaticSiteOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteInput` via:
//
//          GetAppSpecStaticSiteArgs{...}
type GetAppSpecStaticSiteInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteOutput() GetAppSpecStaticSiteOutput
	ToGetAppSpecStaticSiteOutputWithContext(context.Context) GetAppSpecStaticSiteOutput
}

type GetAppSpecStaticSiteArgs struct {
	// An optional build command to run while building this component from source.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug pulumi.StringPtrInput `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs GetAppSpecStaticSiteEnvArrayInput `pulumi:"envs"`
	// The name of the error document to use when serving this static site*
	ErrorDocument pulumi.StringPtrInput `pulumi:"errorDocument"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git GetAppSpecStaticSiteGitPtrInput `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github GetAppSpecStaticSiteGithubPtrInput `pulumi:"github"`
	// The name of the index document to use when serving this static site.
	IndexDocument pulumi.StringPtrInput `pulumi:"indexDocument"`
	// The name of the component
	Name pulumi.StringInput `pulumi:"name"`
	// An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
	OutputDir pulumi.StringPtrInput           `pulumi:"outputDir"`
	Routes    GetAppSpecStaticSiteRoutesInput `pulumi:"routes"`
	// An optional path to the working directory to use for the build.
	SourceDir pulumi.StringPtrInput `pulumi:"sourceDir"`
}

func (GetAppSpecStaticSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSite)(nil)).Elem()
}

func (i GetAppSpecStaticSiteArgs) ToGetAppSpecStaticSiteOutput() GetAppSpecStaticSiteOutput {
	return i.ToGetAppSpecStaticSiteOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteArgs) ToGetAppSpecStaticSiteOutputWithContext(ctx context.Context) GetAppSpecStaticSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteOutput)
}

// GetAppSpecStaticSiteArrayInput is an input type that accepts GetAppSpecStaticSiteArray and GetAppSpecStaticSiteArrayOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteArrayInput` via:
//
//          GetAppSpecStaticSiteArray{ GetAppSpecStaticSiteArgs{...} }
type GetAppSpecStaticSiteArrayInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteArrayOutput() GetAppSpecStaticSiteArrayOutput
	ToGetAppSpecStaticSiteArrayOutputWithContext(context.Context) GetAppSpecStaticSiteArrayOutput
}

type GetAppSpecStaticSiteArray []GetAppSpecStaticSiteInput

func (GetAppSpecStaticSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecStaticSite)(nil)).Elem()
}

func (i GetAppSpecStaticSiteArray) ToGetAppSpecStaticSiteArrayOutput() GetAppSpecStaticSiteArrayOutput {
	return i.ToGetAppSpecStaticSiteArrayOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteArray) ToGetAppSpecStaticSiteArrayOutputWithContext(ctx context.Context) GetAppSpecStaticSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteArrayOutput)
}

type GetAppSpecStaticSiteOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSite)(nil)).Elem()
}

func (o GetAppSpecStaticSiteOutput) ToGetAppSpecStaticSiteOutput() GetAppSpecStaticSiteOutput {
	return o
}

func (o GetAppSpecStaticSiteOutput) ToGetAppSpecStaticSiteOutputWithContext(ctx context.Context) GetAppSpecStaticSiteOutput {
	return o
}

// An optional build command to run while building this component from source.
func (o GetAppSpecStaticSiteOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
func (o GetAppSpecStaticSiteOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

// An environment slug describing the type of this app.
func (o GetAppSpecStaticSiteOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// Describes an environment variable made available to an app competent.
func (o GetAppSpecStaticSiteOutput) Envs() GetAppSpecStaticSiteEnvArrayOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) []GetAppSpecStaticSiteEnv { return v.Envs }).(GetAppSpecStaticSiteEnvArrayOutput)
}

// The name of the error document to use when serving this static site*
func (o GetAppSpecStaticSiteOutput) ErrorDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.ErrorDocument }).(pulumi.StringPtrOutput)
}

// A Git repo to use as component's source. Only one of `git` and `github` may be set.
func (o GetAppSpecStaticSiteOutput) Git() GetAppSpecStaticSiteGitPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *GetAppSpecStaticSiteGit { return v.Git }).(GetAppSpecStaticSiteGitPtrOutput)
}

// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
func (o GetAppSpecStaticSiteOutput) Github() GetAppSpecStaticSiteGithubPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *GetAppSpecStaticSiteGithub { return v.Github }).(GetAppSpecStaticSiteGithubPtrOutput)
}

// The name of the index document to use when serving this static site.
func (o GetAppSpecStaticSiteOutput) IndexDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.IndexDocument }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o GetAppSpecStaticSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) string { return v.Name }).(pulumi.StringOutput)
}

// An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
func (o GetAppSpecStaticSiteOutput) OutputDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.OutputDir }).(pulumi.StringPtrOutput)
}

func (o GetAppSpecStaticSiteOutput) Routes() GetAppSpecStaticSiteRoutesOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) GetAppSpecStaticSiteRoutes { return v.Routes }).(GetAppSpecStaticSiteRoutesOutput)
}

// An optional path to the working directory to use for the build.
func (o GetAppSpecStaticSiteOutput) SourceDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSite) *string { return v.SourceDir }).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSiteArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecStaticSite)(nil)).Elem()
}

func (o GetAppSpecStaticSiteArrayOutput) ToGetAppSpecStaticSiteArrayOutput() GetAppSpecStaticSiteArrayOutput {
	return o
}

func (o GetAppSpecStaticSiteArrayOutput) ToGetAppSpecStaticSiteArrayOutputWithContext(ctx context.Context) GetAppSpecStaticSiteArrayOutput {
	return o
}

func (o GetAppSpecStaticSiteArrayOutput) Index(i pulumi.IntInput) GetAppSpecStaticSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecStaticSite {
		return vs[0].([]GetAppSpecStaticSite)[vs[1].(int)]
	}).(GetAppSpecStaticSiteOutput)
}

type GetAppSpecStaticSiteEnv struct {
	// The name of the environment variable.
	Key *string `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope *string `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type string `pulumi:"type"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// GetAppSpecStaticSiteEnvInput is an input type that accepts GetAppSpecStaticSiteEnvArgs and GetAppSpecStaticSiteEnvOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteEnvInput` via:
//
//          GetAppSpecStaticSiteEnvArgs{...}
type GetAppSpecStaticSiteEnvInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteEnvOutput() GetAppSpecStaticSiteEnvOutput
	ToGetAppSpecStaticSiteEnvOutputWithContext(context.Context) GetAppSpecStaticSiteEnvOutput
}

type GetAppSpecStaticSiteEnvArgs struct {
	// The name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetAppSpecStaticSiteEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteEnv)(nil)).Elem()
}

func (i GetAppSpecStaticSiteEnvArgs) ToGetAppSpecStaticSiteEnvOutput() GetAppSpecStaticSiteEnvOutput {
	return i.ToGetAppSpecStaticSiteEnvOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteEnvArgs) ToGetAppSpecStaticSiteEnvOutputWithContext(ctx context.Context) GetAppSpecStaticSiteEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteEnvOutput)
}

// GetAppSpecStaticSiteEnvArrayInput is an input type that accepts GetAppSpecStaticSiteEnvArray and GetAppSpecStaticSiteEnvArrayOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteEnvArrayInput` via:
//
//          GetAppSpecStaticSiteEnvArray{ GetAppSpecStaticSiteEnvArgs{...} }
type GetAppSpecStaticSiteEnvArrayInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteEnvArrayOutput() GetAppSpecStaticSiteEnvArrayOutput
	ToGetAppSpecStaticSiteEnvArrayOutputWithContext(context.Context) GetAppSpecStaticSiteEnvArrayOutput
}

type GetAppSpecStaticSiteEnvArray []GetAppSpecStaticSiteEnvInput

func (GetAppSpecStaticSiteEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecStaticSiteEnv)(nil)).Elem()
}

func (i GetAppSpecStaticSiteEnvArray) ToGetAppSpecStaticSiteEnvArrayOutput() GetAppSpecStaticSiteEnvArrayOutput {
	return i.ToGetAppSpecStaticSiteEnvArrayOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteEnvArray) ToGetAppSpecStaticSiteEnvArrayOutputWithContext(ctx context.Context) GetAppSpecStaticSiteEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteEnvArrayOutput)
}

type GetAppSpecStaticSiteEnvOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteEnv)(nil)).Elem()
}

func (o GetAppSpecStaticSiteEnvOutput) ToGetAppSpecStaticSiteEnvOutput() GetAppSpecStaticSiteEnvOutput {
	return o
}

func (o GetAppSpecStaticSiteEnvOutput) ToGetAppSpecStaticSiteEnvOutputWithContext(ctx context.Context) GetAppSpecStaticSiteEnvOutput {
	return o
}

// The name of the environment variable.
func (o GetAppSpecStaticSiteEnvOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteEnv) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
func (o GetAppSpecStaticSiteEnvOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteEnv) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the environment variable, `GENERAL` or `SECRET`.
func (o GetAppSpecStaticSiteEnvOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteEnv) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o GetAppSpecStaticSiteEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSiteEnvArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecStaticSiteEnv)(nil)).Elem()
}

func (o GetAppSpecStaticSiteEnvArrayOutput) ToGetAppSpecStaticSiteEnvArrayOutput() GetAppSpecStaticSiteEnvArrayOutput {
	return o
}

func (o GetAppSpecStaticSiteEnvArrayOutput) ToGetAppSpecStaticSiteEnvArrayOutputWithContext(ctx context.Context) GetAppSpecStaticSiteEnvArrayOutput {
	return o
}

func (o GetAppSpecStaticSiteEnvArrayOutput) Index(i pulumi.IntInput) GetAppSpecStaticSiteEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecStaticSiteEnv {
		return vs[0].([]GetAppSpecStaticSiteEnv)[vs[1].(int)]
	}).(GetAppSpecStaticSiteEnvOutput)
}

type GetAppSpecStaticSiteGit struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl *string `pulumi:"repoCloneUrl"`
}

// GetAppSpecStaticSiteGitInput is an input type that accepts GetAppSpecStaticSiteGitArgs and GetAppSpecStaticSiteGitOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteGitInput` via:
//
//          GetAppSpecStaticSiteGitArgs{...}
type GetAppSpecStaticSiteGitInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteGitOutput() GetAppSpecStaticSiteGitOutput
	ToGetAppSpecStaticSiteGitOutputWithContext(context.Context) GetAppSpecStaticSiteGitOutput
}

type GetAppSpecStaticSiteGitArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl pulumi.StringPtrInput `pulumi:"repoCloneUrl"`
}

func (GetAppSpecStaticSiteGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteGit)(nil)).Elem()
}

func (i GetAppSpecStaticSiteGitArgs) ToGetAppSpecStaticSiteGitOutput() GetAppSpecStaticSiteGitOutput {
	return i.ToGetAppSpecStaticSiteGitOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteGitArgs) ToGetAppSpecStaticSiteGitOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteGitOutput)
}

func (i GetAppSpecStaticSiteGitArgs) ToGetAppSpecStaticSiteGitPtrOutput() GetAppSpecStaticSiteGitPtrOutput {
	return i.ToGetAppSpecStaticSiteGitPtrOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteGitArgs) ToGetAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteGitOutput).ToGetAppSpecStaticSiteGitPtrOutputWithContext(ctx)
}

// GetAppSpecStaticSiteGitPtrInput is an input type that accepts GetAppSpecStaticSiteGitArgs, GetAppSpecStaticSiteGitPtr and GetAppSpecStaticSiteGitPtrOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteGitPtrInput` via:
//
//          GetAppSpecStaticSiteGitArgs{...}
//
//  or:
//
//          nil
type GetAppSpecStaticSiteGitPtrInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteGitPtrOutput() GetAppSpecStaticSiteGitPtrOutput
	ToGetAppSpecStaticSiteGitPtrOutputWithContext(context.Context) GetAppSpecStaticSiteGitPtrOutput
}

type getAppSpecStaticSiteGitPtrType GetAppSpecStaticSiteGitArgs

func GetAppSpecStaticSiteGitPtr(v *GetAppSpecStaticSiteGitArgs) GetAppSpecStaticSiteGitPtrInput {
	return (*getAppSpecStaticSiteGitPtrType)(v)
}

func (*getAppSpecStaticSiteGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecStaticSiteGit)(nil)).Elem()
}

func (i *getAppSpecStaticSiteGitPtrType) ToGetAppSpecStaticSiteGitPtrOutput() GetAppSpecStaticSiteGitPtrOutput {
	return i.ToGetAppSpecStaticSiteGitPtrOutputWithContext(context.Background())
}

func (i *getAppSpecStaticSiteGitPtrType) ToGetAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteGitPtrOutput)
}

type GetAppSpecStaticSiteGitOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteGit)(nil)).Elem()
}

func (o GetAppSpecStaticSiteGitOutput) ToGetAppSpecStaticSiteGitOutput() GetAppSpecStaticSiteGitOutput {
	return o
}

func (o GetAppSpecStaticSiteGitOutput) ToGetAppSpecStaticSiteGitOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGitOutput {
	return o
}

func (o GetAppSpecStaticSiteGitOutput) ToGetAppSpecStaticSiteGitPtrOutput() GetAppSpecStaticSiteGitPtrOutput {
	return o.ToGetAppSpecStaticSiteGitPtrOutputWithContext(context.Background())
}

func (o GetAppSpecStaticSiteGitOutput) ToGetAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGitPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGit) *GetAppSpecStaticSiteGit {
		return &v
	}).(GetAppSpecStaticSiteGitPtrOutput)
}

// The name of the branch to use.
func (o GetAppSpecStaticSiteGitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGit) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o GetAppSpecStaticSiteGitOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGit) *string { return v.RepoCloneUrl }).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSiteGitPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecStaticSiteGit)(nil)).Elem()
}

func (o GetAppSpecStaticSiteGitPtrOutput) ToGetAppSpecStaticSiteGitPtrOutput() GetAppSpecStaticSiteGitPtrOutput {
	return o
}

func (o GetAppSpecStaticSiteGitPtrOutput) ToGetAppSpecStaticSiteGitPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGitPtrOutput {
	return o
}

func (o GetAppSpecStaticSiteGitPtrOutput) Elem() GetAppSpecStaticSiteGitOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGit) GetAppSpecStaticSiteGit { return *v }).(GetAppSpecStaticSiteGitOutput)
}

// The name of the branch to use.
func (o GetAppSpecStaticSiteGitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGit) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o GetAppSpecStaticSiteGitPtrOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGit) *string {
		if v == nil {
			return nil
		}
		return v.RepoCloneUrl
	}).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSiteGithub struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush *bool `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo *string `pulumi:"repo"`
}

// GetAppSpecStaticSiteGithubInput is an input type that accepts GetAppSpecStaticSiteGithubArgs and GetAppSpecStaticSiteGithubOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteGithubInput` via:
//
//          GetAppSpecStaticSiteGithubArgs{...}
type GetAppSpecStaticSiteGithubInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteGithubOutput() GetAppSpecStaticSiteGithubOutput
	ToGetAppSpecStaticSiteGithubOutputWithContext(context.Context) GetAppSpecStaticSiteGithubOutput
}

type GetAppSpecStaticSiteGithubArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush pulumi.BoolPtrInput `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
}

func (GetAppSpecStaticSiteGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteGithub)(nil)).Elem()
}

func (i GetAppSpecStaticSiteGithubArgs) ToGetAppSpecStaticSiteGithubOutput() GetAppSpecStaticSiteGithubOutput {
	return i.ToGetAppSpecStaticSiteGithubOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteGithubArgs) ToGetAppSpecStaticSiteGithubOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteGithubOutput)
}

func (i GetAppSpecStaticSiteGithubArgs) ToGetAppSpecStaticSiteGithubPtrOutput() GetAppSpecStaticSiteGithubPtrOutput {
	return i.ToGetAppSpecStaticSiteGithubPtrOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteGithubArgs) ToGetAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteGithubOutput).ToGetAppSpecStaticSiteGithubPtrOutputWithContext(ctx)
}

// GetAppSpecStaticSiteGithubPtrInput is an input type that accepts GetAppSpecStaticSiteGithubArgs, GetAppSpecStaticSiteGithubPtr and GetAppSpecStaticSiteGithubPtrOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteGithubPtrInput` via:
//
//          GetAppSpecStaticSiteGithubArgs{...}
//
//  or:
//
//          nil
type GetAppSpecStaticSiteGithubPtrInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteGithubPtrOutput() GetAppSpecStaticSiteGithubPtrOutput
	ToGetAppSpecStaticSiteGithubPtrOutputWithContext(context.Context) GetAppSpecStaticSiteGithubPtrOutput
}

type getAppSpecStaticSiteGithubPtrType GetAppSpecStaticSiteGithubArgs

func GetAppSpecStaticSiteGithubPtr(v *GetAppSpecStaticSiteGithubArgs) GetAppSpecStaticSiteGithubPtrInput {
	return (*getAppSpecStaticSiteGithubPtrType)(v)
}

func (*getAppSpecStaticSiteGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecStaticSiteGithub)(nil)).Elem()
}

func (i *getAppSpecStaticSiteGithubPtrType) ToGetAppSpecStaticSiteGithubPtrOutput() GetAppSpecStaticSiteGithubPtrOutput {
	return i.ToGetAppSpecStaticSiteGithubPtrOutputWithContext(context.Background())
}

func (i *getAppSpecStaticSiteGithubPtrType) ToGetAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteGithubPtrOutput)
}

type GetAppSpecStaticSiteGithubOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteGithub)(nil)).Elem()
}

func (o GetAppSpecStaticSiteGithubOutput) ToGetAppSpecStaticSiteGithubOutput() GetAppSpecStaticSiteGithubOutput {
	return o
}

func (o GetAppSpecStaticSiteGithubOutput) ToGetAppSpecStaticSiteGithubOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGithubOutput {
	return o
}

func (o GetAppSpecStaticSiteGithubOutput) ToGetAppSpecStaticSiteGithubPtrOutput() GetAppSpecStaticSiteGithubPtrOutput {
	return o.ToGetAppSpecStaticSiteGithubPtrOutputWithContext(context.Background())
}

func (o GetAppSpecStaticSiteGithubOutput) ToGetAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGithubPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGithub) *GetAppSpecStaticSiteGithub {
		return &v
	}).(GetAppSpecStaticSiteGithubPtrOutput)
}

// The name of the branch to use.
func (o GetAppSpecStaticSiteGithubOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGithub) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o GetAppSpecStaticSiteGithubOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGithub) *bool { return v.DeployOnPush }).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o GetAppSpecStaticSiteGithubOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteGithub) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSiteGithubPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecStaticSiteGithub)(nil)).Elem()
}

func (o GetAppSpecStaticSiteGithubPtrOutput) ToGetAppSpecStaticSiteGithubPtrOutput() GetAppSpecStaticSiteGithubPtrOutput {
	return o
}

func (o GetAppSpecStaticSiteGithubPtrOutput) ToGetAppSpecStaticSiteGithubPtrOutputWithContext(ctx context.Context) GetAppSpecStaticSiteGithubPtrOutput {
	return o
}

func (o GetAppSpecStaticSiteGithubPtrOutput) Elem() GetAppSpecStaticSiteGithubOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGithub) GetAppSpecStaticSiteGithub { return *v }).(GetAppSpecStaticSiteGithubOutput)
}

// The name of the branch to use.
func (o GetAppSpecStaticSiteGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGithub) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o GetAppSpecStaticSiteGithubPtrOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGithub) *bool {
		if v == nil {
			return nil
		}
		return v.DeployOnPush
	}).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o GetAppSpecStaticSiteGithubPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecStaticSiteGithub) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

type GetAppSpecStaticSiteRoutes struct {
	// Paths must start with `/` and must be unique within the app.
	Path *string `pulumi:"path"`
}

// GetAppSpecStaticSiteRoutesInput is an input type that accepts GetAppSpecStaticSiteRoutesArgs and GetAppSpecStaticSiteRoutesOutput values.
// You can construct a concrete instance of `GetAppSpecStaticSiteRoutesInput` via:
//
//          GetAppSpecStaticSiteRoutesArgs{...}
type GetAppSpecStaticSiteRoutesInput interface {
	pulumi.Input

	ToGetAppSpecStaticSiteRoutesOutput() GetAppSpecStaticSiteRoutesOutput
	ToGetAppSpecStaticSiteRoutesOutputWithContext(context.Context) GetAppSpecStaticSiteRoutesOutput
}

type GetAppSpecStaticSiteRoutesArgs struct {
	// Paths must start with `/` and must be unique within the app.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GetAppSpecStaticSiteRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteRoutes)(nil)).Elem()
}

func (i GetAppSpecStaticSiteRoutesArgs) ToGetAppSpecStaticSiteRoutesOutput() GetAppSpecStaticSiteRoutesOutput {
	return i.ToGetAppSpecStaticSiteRoutesOutputWithContext(context.Background())
}

func (i GetAppSpecStaticSiteRoutesArgs) ToGetAppSpecStaticSiteRoutesOutputWithContext(ctx context.Context) GetAppSpecStaticSiteRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecStaticSiteRoutesOutput)
}

type GetAppSpecStaticSiteRoutesOutput struct{ *pulumi.OutputState }

func (GetAppSpecStaticSiteRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecStaticSiteRoutes)(nil)).Elem()
}

func (o GetAppSpecStaticSiteRoutesOutput) ToGetAppSpecStaticSiteRoutesOutput() GetAppSpecStaticSiteRoutesOutput {
	return o
}

func (o GetAppSpecStaticSiteRoutesOutput) ToGetAppSpecStaticSiteRoutesOutputWithContext(ctx context.Context) GetAppSpecStaticSiteRoutesOutput {
	return o
}

// Paths must start with `/` and must be unique within the app.
func (o GetAppSpecStaticSiteRoutesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecStaticSiteRoutes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GetAppSpecWorker struct {
	// An optional build command to run while building this component from source.
	BuildCommand *string `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath *string `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug *string `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs []GetAppSpecWorkerEnv `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git *GetAppSpecWorkerGit `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github *GetAppSpecWorkerGithub `pulumi:"github"`
	// The amount of instances that this component should be scaled to.
	InstanceCount *int `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug *string `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   string                 `pulumi:"name"`
	Routes GetAppSpecWorkerRoutes `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand *string `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir *string `pulumi:"sourceDir"`
}

// GetAppSpecWorkerInput is an input type that accepts GetAppSpecWorkerArgs and GetAppSpecWorkerOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerInput` via:
//
//          GetAppSpecWorkerArgs{...}
type GetAppSpecWorkerInput interface {
	pulumi.Input

	ToGetAppSpecWorkerOutput() GetAppSpecWorkerOutput
	ToGetAppSpecWorkerOutputWithContext(context.Context) GetAppSpecWorkerOutput
}

type GetAppSpecWorkerArgs struct {
	// An optional build command to run while building this component from source.
	BuildCommand pulumi.StringPtrInput `pulumi:"buildCommand"`
	// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
	// An environment slug describing the type of this app.
	EnvironmentSlug pulumi.StringPtrInput `pulumi:"environmentSlug"`
	// Describes an environment variable made available to an app competent.
	Envs GetAppSpecWorkerEnvArrayInput `pulumi:"envs"`
	// A Git repo to use as component's source. Only one of `git` and `github` may be set.
	Git GetAppSpecWorkerGitPtrInput `pulumi:"git"`
	// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
	Github GetAppSpecWorkerGithubPtrInput `pulumi:"github"`
	// The amount of instances that this component should be scaled to.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// The instance size to use for this component.
	InstanceSizeSlug pulumi.StringPtrInput `pulumi:"instanceSizeSlug"`
	// The name of the component
	Name   pulumi.StringInput          `pulumi:"name"`
	Routes GetAppSpecWorkerRoutesInput `pulumi:"routes"`
	// An optional run command to override the component's default.
	RunCommand pulumi.StringPtrInput `pulumi:"runCommand"`
	// An optional path to the working directory to use for the build.
	SourceDir pulumi.StringPtrInput `pulumi:"sourceDir"`
}

func (GetAppSpecWorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorker)(nil)).Elem()
}

func (i GetAppSpecWorkerArgs) ToGetAppSpecWorkerOutput() GetAppSpecWorkerOutput {
	return i.ToGetAppSpecWorkerOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerArgs) ToGetAppSpecWorkerOutputWithContext(ctx context.Context) GetAppSpecWorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerOutput)
}

// GetAppSpecWorkerArrayInput is an input type that accepts GetAppSpecWorkerArray and GetAppSpecWorkerArrayOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerArrayInput` via:
//
//          GetAppSpecWorkerArray{ GetAppSpecWorkerArgs{...} }
type GetAppSpecWorkerArrayInput interface {
	pulumi.Input

	ToGetAppSpecWorkerArrayOutput() GetAppSpecWorkerArrayOutput
	ToGetAppSpecWorkerArrayOutputWithContext(context.Context) GetAppSpecWorkerArrayOutput
}

type GetAppSpecWorkerArray []GetAppSpecWorkerInput

func (GetAppSpecWorkerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecWorker)(nil)).Elem()
}

func (i GetAppSpecWorkerArray) ToGetAppSpecWorkerArrayOutput() GetAppSpecWorkerArrayOutput {
	return i.ToGetAppSpecWorkerArrayOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerArray) ToGetAppSpecWorkerArrayOutputWithContext(ctx context.Context) GetAppSpecWorkerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerArrayOutput)
}

type GetAppSpecWorkerOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorker)(nil)).Elem()
}

func (o GetAppSpecWorkerOutput) ToGetAppSpecWorkerOutput() GetAppSpecWorkerOutput {
	return o
}

func (o GetAppSpecWorkerOutput) ToGetAppSpecWorkerOutputWithContext(ctx context.Context) GetAppSpecWorkerOutput {
	return o
}

// An optional build command to run while building this component from source.
func (o GetAppSpecWorkerOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
func (o GetAppSpecWorkerOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

// An environment slug describing the type of this app.
func (o GetAppSpecWorkerOutput) EnvironmentSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *string { return v.EnvironmentSlug }).(pulumi.StringPtrOutput)
}

// Describes an environment variable made available to an app competent.
func (o GetAppSpecWorkerOutput) Envs() GetAppSpecWorkerEnvArrayOutput {
	return o.ApplyT(func(v GetAppSpecWorker) []GetAppSpecWorkerEnv { return v.Envs }).(GetAppSpecWorkerEnvArrayOutput)
}

// A Git repo to use as component's source. Only one of `git` and `github` may be set.
func (o GetAppSpecWorkerOutput) Git() GetAppSpecWorkerGitPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *GetAppSpecWorkerGit { return v.Git }).(GetAppSpecWorkerGitPtrOutput)
}

// A GitHub repo to use as component's source. Only one of `git` and `github` may be set.
func (o GetAppSpecWorkerOutput) Github() GetAppSpecWorkerGithubPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *GetAppSpecWorkerGithub { return v.Github }).(GetAppSpecWorkerGithubPtrOutput)
}

// The amount of instances that this component should be scaled to.
func (o GetAppSpecWorkerOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// The instance size to use for this component.
func (o GetAppSpecWorkerOutput) InstanceSizeSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *string { return v.InstanceSizeSlug }).(pulumi.StringPtrOutput)
}

// The name of the component
func (o GetAppSpecWorkerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecWorker) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAppSpecWorkerOutput) Routes() GetAppSpecWorkerRoutesOutput {
	return o.ApplyT(func(v GetAppSpecWorker) GetAppSpecWorkerRoutes { return v.Routes }).(GetAppSpecWorkerRoutesOutput)
}

// An optional run command to override the component's default.
func (o GetAppSpecWorkerOutput) RunCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *string { return v.RunCommand }).(pulumi.StringPtrOutput)
}

// An optional path to the working directory to use for the build.
func (o GetAppSpecWorkerOutput) SourceDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorker) *string { return v.SourceDir }).(pulumi.StringPtrOutput)
}

type GetAppSpecWorkerArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecWorker)(nil)).Elem()
}

func (o GetAppSpecWorkerArrayOutput) ToGetAppSpecWorkerArrayOutput() GetAppSpecWorkerArrayOutput {
	return o
}

func (o GetAppSpecWorkerArrayOutput) ToGetAppSpecWorkerArrayOutputWithContext(ctx context.Context) GetAppSpecWorkerArrayOutput {
	return o
}

func (o GetAppSpecWorkerArrayOutput) Index(i pulumi.IntInput) GetAppSpecWorkerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecWorker {
		return vs[0].([]GetAppSpecWorker)[vs[1].(int)]
	}).(GetAppSpecWorkerOutput)
}

type GetAppSpecWorkerEnv struct {
	// The name of the environment variable.
	Key *string `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope *string `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type string `pulumi:"type"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// GetAppSpecWorkerEnvInput is an input type that accepts GetAppSpecWorkerEnvArgs and GetAppSpecWorkerEnvOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerEnvInput` via:
//
//          GetAppSpecWorkerEnvArgs{...}
type GetAppSpecWorkerEnvInput interface {
	pulumi.Input

	ToGetAppSpecWorkerEnvOutput() GetAppSpecWorkerEnvOutput
	ToGetAppSpecWorkerEnvOutputWithContext(context.Context) GetAppSpecWorkerEnvOutput
}

type GetAppSpecWorkerEnvArgs struct {
	// The name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The type of the environment variable, `GENERAL` or `SECRET`.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetAppSpecWorkerEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerEnv)(nil)).Elem()
}

func (i GetAppSpecWorkerEnvArgs) ToGetAppSpecWorkerEnvOutput() GetAppSpecWorkerEnvOutput {
	return i.ToGetAppSpecWorkerEnvOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerEnvArgs) ToGetAppSpecWorkerEnvOutputWithContext(ctx context.Context) GetAppSpecWorkerEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerEnvOutput)
}

// GetAppSpecWorkerEnvArrayInput is an input type that accepts GetAppSpecWorkerEnvArray and GetAppSpecWorkerEnvArrayOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerEnvArrayInput` via:
//
//          GetAppSpecWorkerEnvArray{ GetAppSpecWorkerEnvArgs{...} }
type GetAppSpecWorkerEnvArrayInput interface {
	pulumi.Input

	ToGetAppSpecWorkerEnvArrayOutput() GetAppSpecWorkerEnvArrayOutput
	ToGetAppSpecWorkerEnvArrayOutputWithContext(context.Context) GetAppSpecWorkerEnvArrayOutput
}

type GetAppSpecWorkerEnvArray []GetAppSpecWorkerEnvInput

func (GetAppSpecWorkerEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecWorkerEnv)(nil)).Elem()
}

func (i GetAppSpecWorkerEnvArray) ToGetAppSpecWorkerEnvArrayOutput() GetAppSpecWorkerEnvArrayOutput {
	return i.ToGetAppSpecWorkerEnvArrayOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerEnvArray) ToGetAppSpecWorkerEnvArrayOutputWithContext(ctx context.Context) GetAppSpecWorkerEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerEnvArrayOutput)
}

type GetAppSpecWorkerEnvOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerEnv)(nil)).Elem()
}

func (o GetAppSpecWorkerEnvOutput) ToGetAppSpecWorkerEnvOutput() GetAppSpecWorkerEnvOutput {
	return o
}

func (o GetAppSpecWorkerEnvOutput) ToGetAppSpecWorkerEnvOutputWithContext(ctx context.Context) GetAppSpecWorkerEnvOutput {
	return o
}

// The name of the environment variable.
func (o GetAppSpecWorkerEnvOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerEnv) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The visibility scope of the environment variable. One of `RUN_TIME`, `BUILD_TIME`, or `RUN_AND_BUILD_TIME` (default).
func (o GetAppSpecWorkerEnvOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerEnv) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the environment variable, `GENERAL` or `SECRET`.
func (o GetAppSpecWorkerEnvOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSpecWorkerEnv) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o GetAppSpecWorkerEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetAppSpecWorkerEnvArrayOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAppSpecWorkerEnv)(nil)).Elem()
}

func (o GetAppSpecWorkerEnvArrayOutput) ToGetAppSpecWorkerEnvArrayOutput() GetAppSpecWorkerEnvArrayOutput {
	return o
}

func (o GetAppSpecWorkerEnvArrayOutput) ToGetAppSpecWorkerEnvArrayOutputWithContext(ctx context.Context) GetAppSpecWorkerEnvArrayOutput {
	return o
}

func (o GetAppSpecWorkerEnvArrayOutput) Index(i pulumi.IntInput) GetAppSpecWorkerEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAppSpecWorkerEnv {
		return vs[0].([]GetAppSpecWorkerEnv)[vs[1].(int)]
	}).(GetAppSpecWorkerEnvOutput)
}

type GetAppSpecWorkerGit struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl *string `pulumi:"repoCloneUrl"`
}

// GetAppSpecWorkerGitInput is an input type that accepts GetAppSpecWorkerGitArgs and GetAppSpecWorkerGitOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerGitInput` via:
//
//          GetAppSpecWorkerGitArgs{...}
type GetAppSpecWorkerGitInput interface {
	pulumi.Input

	ToGetAppSpecWorkerGitOutput() GetAppSpecWorkerGitOutput
	ToGetAppSpecWorkerGitOutputWithContext(context.Context) GetAppSpecWorkerGitOutput
}

type GetAppSpecWorkerGitArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The clone URL of the repo.
	RepoCloneUrl pulumi.StringPtrInput `pulumi:"repoCloneUrl"`
}

func (GetAppSpecWorkerGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerGit)(nil)).Elem()
}

func (i GetAppSpecWorkerGitArgs) ToGetAppSpecWorkerGitOutput() GetAppSpecWorkerGitOutput {
	return i.ToGetAppSpecWorkerGitOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerGitArgs) ToGetAppSpecWorkerGitOutputWithContext(ctx context.Context) GetAppSpecWorkerGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerGitOutput)
}

func (i GetAppSpecWorkerGitArgs) ToGetAppSpecWorkerGitPtrOutput() GetAppSpecWorkerGitPtrOutput {
	return i.ToGetAppSpecWorkerGitPtrOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerGitArgs) ToGetAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerGitOutput).ToGetAppSpecWorkerGitPtrOutputWithContext(ctx)
}

// GetAppSpecWorkerGitPtrInput is an input type that accepts GetAppSpecWorkerGitArgs, GetAppSpecWorkerGitPtr and GetAppSpecWorkerGitPtrOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerGitPtrInput` via:
//
//          GetAppSpecWorkerGitArgs{...}
//
//  or:
//
//          nil
type GetAppSpecWorkerGitPtrInput interface {
	pulumi.Input

	ToGetAppSpecWorkerGitPtrOutput() GetAppSpecWorkerGitPtrOutput
	ToGetAppSpecWorkerGitPtrOutputWithContext(context.Context) GetAppSpecWorkerGitPtrOutput
}

type getAppSpecWorkerGitPtrType GetAppSpecWorkerGitArgs

func GetAppSpecWorkerGitPtr(v *GetAppSpecWorkerGitArgs) GetAppSpecWorkerGitPtrInput {
	return (*getAppSpecWorkerGitPtrType)(v)
}

func (*getAppSpecWorkerGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecWorkerGit)(nil)).Elem()
}

func (i *getAppSpecWorkerGitPtrType) ToGetAppSpecWorkerGitPtrOutput() GetAppSpecWorkerGitPtrOutput {
	return i.ToGetAppSpecWorkerGitPtrOutputWithContext(context.Background())
}

func (i *getAppSpecWorkerGitPtrType) ToGetAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerGitPtrOutput)
}

type GetAppSpecWorkerGitOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerGit)(nil)).Elem()
}

func (o GetAppSpecWorkerGitOutput) ToGetAppSpecWorkerGitOutput() GetAppSpecWorkerGitOutput {
	return o
}

func (o GetAppSpecWorkerGitOutput) ToGetAppSpecWorkerGitOutputWithContext(ctx context.Context) GetAppSpecWorkerGitOutput {
	return o
}

func (o GetAppSpecWorkerGitOutput) ToGetAppSpecWorkerGitPtrOutput() GetAppSpecWorkerGitPtrOutput {
	return o.ToGetAppSpecWorkerGitPtrOutputWithContext(context.Background())
}

func (o GetAppSpecWorkerGitOutput) ToGetAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGitPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGit) *GetAppSpecWorkerGit {
		return &v
	}).(GetAppSpecWorkerGitPtrOutput)
}

// The name of the branch to use.
func (o GetAppSpecWorkerGitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGit) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o GetAppSpecWorkerGitOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGit) *string { return v.RepoCloneUrl }).(pulumi.StringPtrOutput)
}

type GetAppSpecWorkerGitPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecWorkerGit)(nil)).Elem()
}

func (o GetAppSpecWorkerGitPtrOutput) ToGetAppSpecWorkerGitPtrOutput() GetAppSpecWorkerGitPtrOutput {
	return o
}

func (o GetAppSpecWorkerGitPtrOutput) ToGetAppSpecWorkerGitPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGitPtrOutput {
	return o
}

func (o GetAppSpecWorkerGitPtrOutput) Elem() GetAppSpecWorkerGitOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGit) GetAppSpecWorkerGit { return *v }).(GetAppSpecWorkerGitOutput)
}

// The name of the branch to use.
func (o GetAppSpecWorkerGitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGit) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The clone URL of the repo.
func (o GetAppSpecWorkerGitPtrOutput) RepoCloneUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGit) *string {
		if v == nil {
			return nil
		}
		return v.RepoCloneUrl
	}).(pulumi.StringPtrOutput)
}

type GetAppSpecWorkerGithub struct {
	// The name of the branch to use.
	Branch *string `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush *bool `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo *string `pulumi:"repo"`
}

// GetAppSpecWorkerGithubInput is an input type that accepts GetAppSpecWorkerGithubArgs and GetAppSpecWorkerGithubOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerGithubInput` via:
//
//          GetAppSpecWorkerGithubArgs{...}
type GetAppSpecWorkerGithubInput interface {
	pulumi.Input

	ToGetAppSpecWorkerGithubOutput() GetAppSpecWorkerGithubOutput
	ToGetAppSpecWorkerGithubOutputWithContext(context.Context) GetAppSpecWorkerGithubOutput
}

type GetAppSpecWorkerGithubArgs struct {
	// The name of the branch to use.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Whether to automatically deploy new commits made to the repo.
	DeployOnPush pulumi.BoolPtrInput `pulumi:"deployOnPush"`
	// The name of the repo in the format `owner/repo`.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
}

func (GetAppSpecWorkerGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerGithub)(nil)).Elem()
}

func (i GetAppSpecWorkerGithubArgs) ToGetAppSpecWorkerGithubOutput() GetAppSpecWorkerGithubOutput {
	return i.ToGetAppSpecWorkerGithubOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerGithubArgs) ToGetAppSpecWorkerGithubOutputWithContext(ctx context.Context) GetAppSpecWorkerGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerGithubOutput)
}

func (i GetAppSpecWorkerGithubArgs) ToGetAppSpecWorkerGithubPtrOutput() GetAppSpecWorkerGithubPtrOutput {
	return i.ToGetAppSpecWorkerGithubPtrOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerGithubArgs) ToGetAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerGithubOutput).ToGetAppSpecWorkerGithubPtrOutputWithContext(ctx)
}

// GetAppSpecWorkerGithubPtrInput is an input type that accepts GetAppSpecWorkerGithubArgs, GetAppSpecWorkerGithubPtr and GetAppSpecWorkerGithubPtrOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerGithubPtrInput` via:
//
//          GetAppSpecWorkerGithubArgs{...}
//
//  or:
//
//          nil
type GetAppSpecWorkerGithubPtrInput interface {
	pulumi.Input

	ToGetAppSpecWorkerGithubPtrOutput() GetAppSpecWorkerGithubPtrOutput
	ToGetAppSpecWorkerGithubPtrOutputWithContext(context.Context) GetAppSpecWorkerGithubPtrOutput
}

type getAppSpecWorkerGithubPtrType GetAppSpecWorkerGithubArgs

func GetAppSpecWorkerGithubPtr(v *GetAppSpecWorkerGithubArgs) GetAppSpecWorkerGithubPtrInput {
	return (*getAppSpecWorkerGithubPtrType)(v)
}

func (*getAppSpecWorkerGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecWorkerGithub)(nil)).Elem()
}

func (i *getAppSpecWorkerGithubPtrType) ToGetAppSpecWorkerGithubPtrOutput() GetAppSpecWorkerGithubPtrOutput {
	return i.ToGetAppSpecWorkerGithubPtrOutputWithContext(context.Background())
}

func (i *getAppSpecWorkerGithubPtrType) ToGetAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerGithubPtrOutput)
}

type GetAppSpecWorkerGithubOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerGithub)(nil)).Elem()
}

func (o GetAppSpecWorkerGithubOutput) ToGetAppSpecWorkerGithubOutput() GetAppSpecWorkerGithubOutput {
	return o
}

func (o GetAppSpecWorkerGithubOutput) ToGetAppSpecWorkerGithubOutputWithContext(ctx context.Context) GetAppSpecWorkerGithubOutput {
	return o
}

func (o GetAppSpecWorkerGithubOutput) ToGetAppSpecWorkerGithubPtrOutput() GetAppSpecWorkerGithubPtrOutput {
	return o.ToGetAppSpecWorkerGithubPtrOutputWithContext(context.Background())
}

func (o GetAppSpecWorkerGithubOutput) ToGetAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGithubPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGithub) *GetAppSpecWorkerGithub {
		return &v
	}).(GetAppSpecWorkerGithubPtrOutput)
}

// The name of the branch to use.
func (o GetAppSpecWorkerGithubOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGithub) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o GetAppSpecWorkerGithubOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGithub) *bool { return v.DeployOnPush }).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o GetAppSpecWorkerGithubOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerGithub) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

type GetAppSpecWorkerGithubPtrOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAppSpecWorkerGithub)(nil)).Elem()
}

func (o GetAppSpecWorkerGithubPtrOutput) ToGetAppSpecWorkerGithubPtrOutput() GetAppSpecWorkerGithubPtrOutput {
	return o
}

func (o GetAppSpecWorkerGithubPtrOutput) ToGetAppSpecWorkerGithubPtrOutputWithContext(ctx context.Context) GetAppSpecWorkerGithubPtrOutput {
	return o
}

func (o GetAppSpecWorkerGithubPtrOutput) Elem() GetAppSpecWorkerGithubOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGithub) GetAppSpecWorkerGithub { return *v }).(GetAppSpecWorkerGithubOutput)
}

// The name of the branch to use.
func (o GetAppSpecWorkerGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGithub) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Whether to automatically deploy new commits made to the repo.
func (o GetAppSpecWorkerGithubPtrOutput) DeployOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGithub) *bool {
		if v == nil {
			return nil
		}
		return v.DeployOnPush
	}).(pulumi.BoolPtrOutput)
}

// The name of the repo in the format `owner/repo`.
func (o GetAppSpecWorkerGithubPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAppSpecWorkerGithub) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

type GetAppSpecWorkerRoutes struct {
	// Paths must start with `/` and must be unique within the app.
	Path *string `pulumi:"path"`
}

// GetAppSpecWorkerRoutesInput is an input type that accepts GetAppSpecWorkerRoutesArgs and GetAppSpecWorkerRoutesOutput values.
// You can construct a concrete instance of `GetAppSpecWorkerRoutesInput` via:
//
//          GetAppSpecWorkerRoutesArgs{...}
type GetAppSpecWorkerRoutesInput interface {
	pulumi.Input

	ToGetAppSpecWorkerRoutesOutput() GetAppSpecWorkerRoutesOutput
	ToGetAppSpecWorkerRoutesOutputWithContext(context.Context) GetAppSpecWorkerRoutesOutput
}

type GetAppSpecWorkerRoutesArgs struct {
	// Paths must start with `/` and must be unique within the app.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GetAppSpecWorkerRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerRoutes)(nil)).Elem()
}

func (i GetAppSpecWorkerRoutesArgs) ToGetAppSpecWorkerRoutesOutput() GetAppSpecWorkerRoutesOutput {
	return i.ToGetAppSpecWorkerRoutesOutputWithContext(context.Background())
}

func (i GetAppSpecWorkerRoutesArgs) ToGetAppSpecWorkerRoutesOutputWithContext(ctx context.Context) GetAppSpecWorkerRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAppSpecWorkerRoutesOutput)
}

type GetAppSpecWorkerRoutesOutput struct{ *pulumi.OutputState }

func (GetAppSpecWorkerRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSpecWorkerRoutes)(nil)).Elem()
}

func (o GetAppSpecWorkerRoutesOutput) ToGetAppSpecWorkerRoutesOutput() GetAppSpecWorkerRoutesOutput {
	return o
}

func (o GetAppSpecWorkerRoutesOutput) ToGetAppSpecWorkerRoutesOutputWithContext(ctx context.Context) GetAppSpecWorkerRoutesOutput {
	return o
}

// Paths must start with `/` and must be unique within the app.
func (o GetAppSpecWorkerRoutesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppSpecWorkerRoutes) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GetDatabaseClusterMaintenanceWindow struct {
	// The day of the week on which to apply maintenance updates.
	Day string `pulumi:"day"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour string `pulumi:"hour"`
}

// GetDatabaseClusterMaintenanceWindowInput is an input type that accepts GetDatabaseClusterMaintenanceWindowArgs and GetDatabaseClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetDatabaseClusterMaintenanceWindowInput` via:
//
//          GetDatabaseClusterMaintenanceWindowArgs{...}
type GetDatabaseClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToGetDatabaseClusterMaintenanceWindowOutput() GetDatabaseClusterMaintenanceWindowOutput
	ToGetDatabaseClusterMaintenanceWindowOutputWithContext(context.Context) GetDatabaseClusterMaintenanceWindowOutput
}

type GetDatabaseClusterMaintenanceWindowArgs struct {
	// The day of the week on which to apply maintenance updates.
	Day pulumi.StringInput `pulumi:"day"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour pulumi.StringInput `pulumi:"hour"`
}

func (GetDatabaseClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetDatabaseClusterMaintenanceWindowArgs) ToGetDatabaseClusterMaintenanceWindowOutput() GetDatabaseClusterMaintenanceWindowOutput {
	return i.ToGetDatabaseClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetDatabaseClusterMaintenanceWindowArgs) ToGetDatabaseClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetDatabaseClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseClusterMaintenanceWindowOutput)
}

// GetDatabaseClusterMaintenanceWindowArrayInput is an input type that accepts GetDatabaseClusterMaintenanceWindowArray and GetDatabaseClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetDatabaseClusterMaintenanceWindowArrayInput` via:
//
//          GetDatabaseClusterMaintenanceWindowArray{ GetDatabaseClusterMaintenanceWindowArgs{...} }
type GetDatabaseClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetDatabaseClusterMaintenanceWindowArrayOutput() GetDatabaseClusterMaintenanceWindowArrayOutput
	ToGetDatabaseClusterMaintenanceWindowArrayOutputWithContext(context.Context) GetDatabaseClusterMaintenanceWindowArrayOutput
}

type GetDatabaseClusterMaintenanceWindowArray []GetDatabaseClusterMaintenanceWindowInput

func (GetDatabaseClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetDatabaseClusterMaintenanceWindowArray) ToGetDatabaseClusterMaintenanceWindowArrayOutput() GetDatabaseClusterMaintenanceWindowArrayOutput {
	return i.ToGetDatabaseClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetDatabaseClusterMaintenanceWindowArray) ToGetDatabaseClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetDatabaseClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseClusterMaintenanceWindowArrayOutput)
}

type GetDatabaseClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetDatabaseClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetDatabaseClusterMaintenanceWindowOutput) ToGetDatabaseClusterMaintenanceWindowOutput() GetDatabaseClusterMaintenanceWindowOutput {
	return o
}

func (o GetDatabaseClusterMaintenanceWindowOutput) ToGetDatabaseClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetDatabaseClusterMaintenanceWindowOutput {
	return o
}

// The day of the week on which to apply maintenance updates.
func (o GetDatabaseClusterMaintenanceWindowOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseClusterMaintenanceWindow) string { return v.Day }).(pulumi.StringOutput)
}

// The hour in UTC at which maintenance updates will be applied in 24 hour format.
func (o GetDatabaseClusterMaintenanceWindowOutput) Hour() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseClusterMaintenanceWindow) string { return v.Hour }).(pulumi.StringOutput)
}

type GetDatabaseClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetDatabaseClusterMaintenanceWindowArrayOutput) ToGetDatabaseClusterMaintenanceWindowArrayOutput() GetDatabaseClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetDatabaseClusterMaintenanceWindowArrayOutput) ToGetDatabaseClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetDatabaseClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetDatabaseClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetDatabaseClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseClusterMaintenanceWindow {
		return vs[0].([]GetDatabaseClusterMaintenanceWindow)[vs[1].(int)]
	}).(GetDatabaseClusterMaintenanceWindowOutput)
}

type GetDomainsDomain struct {
	// (Required) The name of the domain.
	// - `ttl`-  The TTL of the domain.
	Name string `pulumi:"name"`
	Ttl  int    `pulumi:"ttl"`
	// The uniform resource name of the domain
	Urn string `pulumi:"urn"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//          GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// (Required) The name of the domain.
	// - `ttl`-  The TTL of the domain.
	Name pulumi.StringInput `pulumi:"name"`
	Ttl  pulumi.IntInput    `pulumi:"ttl"`
	// The uniform resource name of the domain
	Urn pulumi.StringInput `pulumi:"urn"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//          GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

// (Required) The name of the domain.
// - `ttl`-  The TTL of the domain.
func (o GetDomainsDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDomainsDomainOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomain) int { return v.Ttl }).(pulumi.IntOutput)
}

// The uniform resource name of the domain
func (o GetDomainsDomainOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Urn }).(pulumi.StringOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetDomainsFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the domains by this key. This may be one of `name`, `urn`, and `ttl`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves domains
	// where the `key` field takes on one or more of the values provided here.
	Values []string `pulumi:"values"`
}

// GetDomainsFilterInput is an input type that accepts GetDomainsFilterArgs and GetDomainsFilterOutput values.
// You can construct a concrete instance of `GetDomainsFilterInput` via:
//
//          GetDomainsFilterArgs{...}
type GetDomainsFilterInput interface {
	pulumi.Input

	ToGetDomainsFilterOutput() GetDomainsFilterOutput
	ToGetDomainsFilterOutputWithContext(context.Context) GetDomainsFilterOutput
}

type GetDomainsFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the domains by this key. This may be one of `name`, `urn`, and `ttl`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves domains
	// where the `key` field takes on one or more of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetDomainsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsFilter)(nil)).Elem()
}

func (i GetDomainsFilterArgs) ToGetDomainsFilterOutput() GetDomainsFilterOutput {
	return i.ToGetDomainsFilterOutputWithContext(context.Background())
}

func (i GetDomainsFilterArgs) ToGetDomainsFilterOutputWithContext(ctx context.Context) GetDomainsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsFilterOutput)
}

// GetDomainsFilterArrayInput is an input type that accepts GetDomainsFilterArray and GetDomainsFilterArrayOutput values.
// You can construct a concrete instance of `GetDomainsFilterArrayInput` via:
//
//          GetDomainsFilterArray{ GetDomainsFilterArgs{...} }
type GetDomainsFilterArrayInput interface {
	pulumi.Input

	ToGetDomainsFilterArrayOutput() GetDomainsFilterArrayOutput
	ToGetDomainsFilterArrayOutputWithContext(context.Context) GetDomainsFilterArrayOutput
}

type GetDomainsFilterArray []GetDomainsFilterInput

func (GetDomainsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsFilter)(nil)).Elem()
}

func (i GetDomainsFilterArray) ToGetDomainsFilterArrayOutput() GetDomainsFilterArrayOutput {
	return i.ToGetDomainsFilterArrayOutputWithContext(context.Background())
}

func (i GetDomainsFilterArray) ToGetDomainsFilterArrayOutputWithContext(ctx context.Context) GetDomainsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsFilterArrayOutput)
}

type GetDomainsFilterOutput struct{ *pulumi.OutputState }

func (GetDomainsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsFilter)(nil)).Elem()
}

func (o GetDomainsFilterOutput) ToGetDomainsFilterOutput() GetDomainsFilterOutput {
	return o
}

func (o GetDomainsFilterOutput) ToGetDomainsFilterOutputWithContext(ctx context.Context) GetDomainsFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetDomainsFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDomainsFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the domains by this key. This may be one of `name`, `urn`, and `ttl`.
func (o GetDomainsFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetDomainsFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainsFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// A list of values to match against the `key` field. Only retrieves domains
// where the `key` field takes on one or more of the values provided here.
func (o GetDomainsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetDomainsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsFilter)(nil)).Elem()
}

func (o GetDomainsFilterArrayOutput) ToGetDomainsFilterArrayOutput() GetDomainsFilterArrayOutput {
	return o
}

func (o GetDomainsFilterArrayOutput) ToGetDomainsFilterArrayOutputWithContext(ctx context.Context) GetDomainsFilterArrayOutput {
	return o
}

func (o GetDomainsFilterArrayOutput) Index(i pulumi.IntInput) GetDomainsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsFilter {
		return vs[0].([]GetDomainsFilter)[vs[1].(int)]
	}).(GetDomainsFilterOutput)
}

type GetDomainsSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the domains by this key. This may be one of `name`, `urn`, and `ttl`.
	Key string `pulumi:"key"`
}

// GetDomainsSortInput is an input type that accepts GetDomainsSortArgs and GetDomainsSortOutput values.
// You can construct a concrete instance of `GetDomainsSortInput` via:
//
//          GetDomainsSortArgs{...}
type GetDomainsSortInput interface {
	pulumi.Input

	ToGetDomainsSortOutput() GetDomainsSortOutput
	ToGetDomainsSortOutputWithContext(context.Context) GetDomainsSortOutput
}

type GetDomainsSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the domains by this key. This may be one of `name`, `urn`, and `ttl`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetDomainsSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsSort)(nil)).Elem()
}

func (i GetDomainsSortArgs) ToGetDomainsSortOutput() GetDomainsSortOutput {
	return i.ToGetDomainsSortOutputWithContext(context.Background())
}

func (i GetDomainsSortArgs) ToGetDomainsSortOutputWithContext(ctx context.Context) GetDomainsSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsSortOutput)
}

// GetDomainsSortArrayInput is an input type that accepts GetDomainsSortArray and GetDomainsSortArrayOutput values.
// You can construct a concrete instance of `GetDomainsSortArrayInput` via:
//
//          GetDomainsSortArray{ GetDomainsSortArgs{...} }
type GetDomainsSortArrayInput interface {
	pulumi.Input

	ToGetDomainsSortArrayOutput() GetDomainsSortArrayOutput
	ToGetDomainsSortArrayOutputWithContext(context.Context) GetDomainsSortArrayOutput
}

type GetDomainsSortArray []GetDomainsSortInput

func (GetDomainsSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsSort)(nil)).Elem()
}

func (i GetDomainsSortArray) ToGetDomainsSortArrayOutput() GetDomainsSortArrayOutput {
	return i.ToGetDomainsSortArrayOutputWithContext(context.Background())
}

func (i GetDomainsSortArray) ToGetDomainsSortArrayOutputWithContext(ctx context.Context) GetDomainsSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsSortArrayOutput)
}

type GetDomainsSortOutput struct{ *pulumi.OutputState }

func (GetDomainsSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsSort)(nil)).Elem()
}

func (o GetDomainsSortOutput) ToGetDomainsSortOutput() GetDomainsSortOutput {
	return o
}

func (o GetDomainsSortOutput) ToGetDomainsSortOutputWithContext(ctx context.Context) GetDomainsSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetDomainsSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainsSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the domains by this key. This may be one of `name`, `urn`, and `ttl`.
func (o GetDomainsSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetDomainsSortArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsSort)(nil)).Elem()
}

func (o GetDomainsSortArrayOutput) ToGetDomainsSortArrayOutput() GetDomainsSortArrayOutput {
	return o
}

func (o GetDomainsSortArrayOutput) ToGetDomainsSortArrayOutputWithContext(ctx context.Context) GetDomainsSortArrayOutput {
	return o
}

func (o GetDomainsSortArrayOutput) Index(i pulumi.IntInput) GetDomainsSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsSort {
		return vs[0].([]GetDomainsSort)[vs[1].(int)]
	}).(GetDomainsSortOutput)
}

type GetDropletsDroplet struct {
	// Whether backups are enabled.
	Backups   bool   `pulumi:"backups"`
	CreatedAt string `pulumi:"createdAt"`
	// The size of the Droplet's disk in GB.
	Disk int `pulumi:"disk"`
	// The ID of the Droplet.
	Id int `pulumi:"id"`
	// The Droplet image ID or slug.
	Image string `pulumi:"image"`
	// The Droplet's public IPv4 address
	Ipv4Address string `pulumi:"ipv4Address"`
	// The Droplet's private IPv4 address
	Ipv4AddressPrivate string `pulumi:"ipv4AddressPrivate"`
	// Whether IPv6 is enabled.
	Ipv6 bool `pulumi:"ipv6"`
	// The Droplet's public IPv6 address
	Ipv6Address string `pulumi:"ipv6Address"`
	// The Droplet's private IPv6 address
	Ipv6AddressPrivate string `pulumi:"ipv6AddressPrivate"`
	// Whether the Droplet is locked.
	Locked bool `pulumi:"locked"`
	// The amount of the Droplet's memory in MB.
	Memory int `pulumi:"memory"`
	// Whether monitoring agent is installed.
	Monitoring bool   `pulumi:"monitoring"`
	Name       string `pulumi:"name"`
	// Droplet hourly price.
	PriceHourly float64 `pulumi:"priceHourly"`
	// Droplet monthly price.
	PriceMonthly float64 `pulumi:"priceMonthly"`
	// Whether private networks are enabled.
	PrivateNetworking bool `pulumi:"privateNetworking"`
	// The region the Droplet is running in.
	Region string `pulumi:"region"`
	// The unique slug that identifies the type of Droplet.
	Size string `pulumi:"size"`
	// The status of the Droplet.
	Status string `pulumi:"status"`
	// A list of the tags associated to the Droplet.
	Tags []string `pulumi:"tags"`
	// The uniform resource name of the Droplet
	Urn string `pulumi:"urn"`
	// The number of the Droplet's virtual CPUs.
	Vcpus int `pulumi:"vcpus"`
	// List of the IDs of each volumes attached to the Droplet.
	VolumeIds []string `pulumi:"volumeIds"`
	// The ID of the VPC where the Droplet is located.
	VpcUuid string `pulumi:"vpcUuid"`
}

// GetDropletsDropletInput is an input type that accepts GetDropletsDropletArgs and GetDropletsDropletOutput values.
// You can construct a concrete instance of `GetDropletsDropletInput` via:
//
//          GetDropletsDropletArgs{...}
type GetDropletsDropletInput interface {
	pulumi.Input

	ToGetDropletsDropletOutput() GetDropletsDropletOutput
	ToGetDropletsDropletOutputWithContext(context.Context) GetDropletsDropletOutput
}

type GetDropletsDropletArgs struct {
	// Whether backups are enabled.
	Backups   pulumi.BoolInput   `pulumi:"backups"`
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The size of the Droplet's disk in GB.
	Disk pulumi.IntInput `pulumi:"disk"`
	// The ID of the Droplet.
	Id pulumi.IntInput `pulumi:"id"`
	// The Droplet image ID or slug.
	Image pulumi.StringInput `pulumi:"image"`
	// The Droplet's public IPv4 address
	Ipv4Address pulumi.StringInput `pulumi:"ipv4Address"`
	// The Droplet's private IPv4 address
	Ipv4AddressPrivate pulumi.StringInput `pulumi:"ipv4AddressPrivate"`
	// Whether IPv6 is enabled.
	Ipv6 pulumi.BoolInput `pulumi:"ipv6"`
	// The Droplet's public IPv6 address
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// The Droplet's private IPv6 address
	Ipv6AddressPrivate pulumi.StringInput `pulumi:"ipv6AddressPrivate"`
	// Whether the Droplet is locked.
	Locked pulumi.BoolInput `pulumi:"locked"`
	// The amount of the Droplet's memory in MB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Whether monitoring agent is installed.
	Monitoring pulumi.BoolInput   `pulumi:"monitoring"`
	Name       pulumi.StringInput `pulumi:"name"`
	// Droplet hourly price.
	PriceHourly pulumi.Float64Input `pulumi:"priceHourly"`
	// Droplet monthly price.
	PriceMonthly pulumi.Float64Input `pulumi:"priceMonthly"`
	// Whether private networks are enabled.
	PrivateNetworking pulumi.BoolInput `pulumi:"privateNetworking"`
	// The region the Droplet is running in.
	Region pulumi.StringInput `pulumi:"region"`
	// The unique slug that identifies the type of Droplet.
	Size pulumi.StringInput `pulumi:"size"`
	// The status of the Droplet.
	Status pulumi.StringInput `pulumi:"status"`
	// A list of the tags associated to the Droplet.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The uniform resource name of the Droplet
	Urn pulumi.StringInput `pulumi:"urn"`
	// The number of the Droplet's virtual CPUs.
	Vcpus pulumi.IntInput `pulumi:"vcpus"`
	// List of the IDs of each volumes attached to the Droplet.
	VolumeIds pulumi.StringArrayInput `pulumi:"volumeIds"`
	// The ID of the VPC where the Droplet is located.
	VpcUuid pulumi.StringInput `pulumi:"vpcUuid"`
}

func (GetDropletsDropletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDropletsDroplet)(nil)).Elem()
}

func (i GetDropletsDropletArgs) ToGetDropletsDropletOutput() GetDropletsDropletOutput {
	return i.ToGetDropletsDropletOutputWithContext(context.Background())
}

func (i GetDropletsDropletArgs) ToGetDropletsDropletOutputWithContext(ctx context.Context) GetDropletsDropletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDropletsDropletOutput)
}

// GetDropletsDropletArrayInput is an input type that accepts GetDropletsDropletArray and GetDropletsDropletArrayOutput values.
// You can construct a concrete instance of `GetDropletsDropletArrayInput` via:
//
//          GetDropletsDropletArray{ GetDropletsDropletArgs{...} }
type GetDropletsDropletArrayInput interface {
	pulumi.Input

	ToGetDropletsDropletArrayOutput() GetDropletsDropletArrayOutput
	ToGetDropletsDropletArrayOutputWithContext(context.Context) GetDropletsDropletArrayOutput
}

type GetDropletsDropletArray []GetDropletsDropletInput

func (GetDropletsDropletArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDropletsDroplet)(nil)).Elem()
}

func (i GetDropletsDropletArray) ToGetDropletsDropletArrayOutput() GetDropletsDropletArrayOutput {
	return i.ToGetDropletsDropletArrayOutputWithContext(context.Background())
}

func (i GetDropletsDropletArray) ToGetDropletsDropletArrayOutputWithContext(ctx context.Context) GetDropletsDropletArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDropletsDropletArrayOutput)
}

type GetDropletsDropletOutput struct{ *pulumi.OutputState }

func (GetDropletsDropletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDropletsDroplet)(nil)).Elem()
}

func (o GetDropletsDropletOutput) ToGetDropletsDropletOutput() GetDropletsDropletOutput {
	return o
}

func (o GetDropletsDropletOutput) ToGetDropletsDropletOutputWithContext(ctx context.Context) GetDropletsDropletOutput {
	return o
}

// Whether backups are enabled.
func (o GetDropletsDropletOutput) Backups() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDropletsDroplet) bool { return v.Backups }).(pulumi.BoolOutput)
}

func (o GetDropletsDropletOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The size of the Droplet's disk in GB.
func (o GetDropletsDropletOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v GetDropletsDroplet) int { return v.Disk }).(pulumi.IntOutput)
}

// The ID of the Droplet.
func (o GetDropletsDropletOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDropletsDroplet) int { return v.Id }).(pulumi.IntOutput)
}

// The Droplet image ID or slug.
func (o GetDropletsDropletOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Image }).(pulumi.StringOutput)
}

// The Droplet's public IPv4 address
func (o GetDropletsDropletOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// The Droplet's private IPv4 address
func (o GetDropletsDropletOutput) Ipv4AddressPrivate() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Ipv4AddressPrivate }).(pulumi.StringOutput)
}

// Whether IPv6 is enabled.
func (o GetDropletsDropletOutput) Ipv6() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDropletsDroplet) bool { return v.Ipv6 }).(pulumi.BoolOutput)
}

// The Droplet's public IPv6 address
func (o GetDropletsDropletOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The Droplet's private IPv6 address
func (o GetDropletsDropletOutput) Ipv6AddressPrivate() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Ipv6AddressPrivate }).(pulumi.StringOutput)
}

// Whether the Droplet is locked.
func (o GetDropletsDropletOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDropletsDroplet) bool { return v.Locked }).(pulumi.BoolOutput)
}

// The amount of the Droplet's memory in MB.
func (o GetDropletsDropletOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetDropletsDroplet) int { return v.Memory }).(pulumi.IntOutput)
}

// Whether monitoring agent is installed.
func (o GetDropletsDropletOutput) Monitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDropletsDroplet) bool { return v.Monitoring }).(pulumi.BoolOutput)
}

func (o GetDropletsDropletOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Name }).(pulumi.StringOutput)
}

// Droplet hourly price.
func (o GetDropletsDropletOutput) PriceHourly() pulumi.Float64Output {
	return o.ApplyT(func(v GetDropletsDroplet) float64 { return v.PriceHourly }).(pulumi.Float64Output)
}

// Droplet monthly price.
func (o GetDropletsDropletOutput) PriceMonthly() pulumi.Float64Output {
	return o.ApplyT(func(v GetDropletsDroplet) float64 { return v.PriceMonthly }).(pulumi.Float64Output)
}

// Whether private networks are enabled.
func (o GetDropletsDropletOutput) PrivateNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDropletsDroplet) bool { return v.PrivateNetworking }).(pulumi.BoolOutput)
}

// The region the Droplet is running in.
func (o GetDropletsDropletOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Region }).(pulumi.StringOutput)
}

// The unique slug that identifies the type of Droplet.
func (o GetDropletsDropletOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Size }).(pulumi.StringOutput)
}

// The status of the Droplet.
func (o GetDropletsDropletOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Status }).(pulumi.StringOutput)
}

// A list of the tags associated to the Droplet.
func (o GetDropletsDropletOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDropletsDroplet) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The uniform resource name of the Droplet
func (o GetDropletsDropletOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.Urn }).(pulumi.StringOutput)
}

// The number of the Droplet's virtual CPUs.
func (o GetDropletsDropletOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetDropletsDroplet) int { return v.Vcpus }).(pulumi.IntOutput)
}

// List of the IDs of each volumes attached to the Droplet.
func (o GetDropletsDropletOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDropletsDroplet) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

// The ID of the VPC where the Droplet is located.
func (o GetDropletsDropletOutput) VpcUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsDroplet) string { return v.VpcUuid }).(pulumi.StringOutput)
}

type GetDropletsDropletArrayOutput struct{ *pulumi.OutputState }

func (GetDropletsDropletArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDropletsDroplet)(nil)).Elem()
}

func (o GetDropletsDropletArrayOutput) ToGetDropletsDropletArrayOutput() GetDropletsDropletArrayOutput {
	return o
}

func (o GetDropletsDropletArrayOutput) ToGetDropletsDropletArrayOutputWithContext(ctx context.Context) GetDropletsDropletArrayOutput {
	return o
}

func (o GetDropletsDropletArrayOutput) Index(i pulumi.IntInput) GetDropletsDropletOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDropletsDroplet {
		return vs[0].([]GetDropletsDroplet)[vs[1].(int)]
	}).(GetDropletsDropletOutput)
}

type GetDropletsFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the Droplets by this key. This may be one of `backups`, `createdAt`, `disk`, `id`,
	// `image`, `ipv4Address`, `ipv4AddressPrivate`, `ipv6`, `ipv6Address`, `ipv6AddressPrivate`, `locked`,
	// `memory`, `monitoring`, `name`, `priceHourly`, `priceMonthly`, `privateNetworking`, `region`, `size`,
	// `status`, `tags`, `urn`, `vcpus`, `volumeIds`, or `vpcUuid`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves Droplets
	// where the `key` field takes on one or more of the values provided here.
	Values []string `pulumi:"values"`
}

// GetDropletsFilterInput is an input type that accepts GetDropletsFilterArgs and GetDropletsFilterOutput values.
// You can construct a concrete instance of `GetDropletsFilterInput` via:
//
//          GetDropletsFilterArgs{...}
type GetDropletsFilterInput interface {
	pulumi.Input

	ToGetDropletsFilterOutput() GetDropletsFilterOutput
	ToGetDropletsFilterOutputWithContext(context.Context) GetDropletsFilterOutput
}

type GetDropletsFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the Droplets by this key. This may be one of `backups`, `createdAt`, `disk`, `id`,
	// `image`, `ipv4Address`, `ipv4AddressPrivate`, `ipv6`, `ipv6Address`, `ipv6AddressPrivate`, `locked`,
	// `memory`, `monitoring`, `name`, `priceHourly`, `priceMonthly`, `privateNetworking`, `region`, `size`,
	// `status`, `tags`, `urn`, `vcpus`, `volumeIds`, or `vpcUuid`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves Droplets
	// where the `key` field takes on one or more of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetDropletsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDropletsFilter)(nil)).Elem()
}

func (i GetDropletsFilterArgs) ToGetDropletsFilterOutput() GetDropletsFilterOutput {
	return i.ToGetDropletsFilterOutputWithContext(context.Background())
}

func (i GetDropletsFilterArgs) ToGetDropletsFilterOutputWithContext(ctx context.Context) GetDropletsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDropletsFilterOutput)
}

// GetDropletsFilterArrayInput is an input type that accepts GetDropletsFilterArray and GetDropletsFilterArrayOutput values.
// You can construct a concrete instance of `GetDropletsFilterArrayInput` via:
//
//          GetDropletsFilterArray{ GetDropletsFilterArgs{...} }
type GetDropletsFilterArrayInput interface {
	pulumi.Input

	ToGetDropletsFilterArrayOutput() GetDropletsFilterArrayOutput
	ToGetDropletsFilterArrayOutputWithContext(context.Context) GetDropletsFilterArrayOutput
}

type GetDropletsFilterArray []GetDropletsFilterInput

func (GetDropletsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDropletsFilter)(nil)).Elem()
}

func (i GetDropletsFilterArray) ToGetDropletsFilterArrayOutput() GetDropletsFilterArrayOutput {
	return i.ToGetDropletsFilterArrayOutputWithContext(context.Background())
}

func (i GetDropletsFilterArray) ToGetDropletsFilterArrayOutputWithContext(ctx context.Context) GetDropletsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDropletsFilterArrayOutput)
}

type GetDropletsFilterOutput struct{ *pulumi.OutputState }

func (GetDropletsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDropletsFilter)(nil)).Elem()
}

func (o GetDropletsFilterOutput) ToGetDropletsFilterOutput() GetDropletsFilterOutput {
	return o
}

func (o GetDropletsFilterOutput) ToGetDropletsFilterOutputWithContext(ctx context.Context) GetDropletsFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetDropletsFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDropletsFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the Droplets by this key. This may be one of `backups`, `createdAt`, `disk`, `id`,
// `image`, `ipv4Address`, `ipv4AddressPrivate`, `ipv6`, `ipv6Address`, `ipv6AddressPrivate`, `locked`,
// `memory`, `monitoring`, `name`, `priceHourly`, `priceMonthly`, `privateNetworking`, `region`, `size`,
// `status`, `tags`, `urn`, `vcpus`, `volumeIds`, or `vpcUuid`.
func (o GetDropletsFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetDropletsFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDropletsFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// A list of values to match against the `key` field. Only retrieves Droplets
// where the `key` field takes on one or more of the values provided here.
func (o GetDropletsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDropletsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetDropletsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDropletsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDropletsFilter)(nil)).Elem()
}

func (o GetDropletsFilterArrayOutput) ToGetDropletsFilterArrayOutput() GetDropletsFilterArrayOutput {
	return o
}

func (o GetDropletsFilterArrayOutput) ToGetDropletsFilterArrayOutputWithContext(ctx context.Context) GetDropletsFilterArrayOutput {
	return o
}

func (o GetDropletsFilterArrayOutput) Index(i pulumi.IntInput) GetDropletsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDropletsFilter {
		return vs[0].([]GetDropletsFilter)[vs[1].(int)]
	}).(GetDropletsFilterOutput)
}

type GetDropletsSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the Droplets by this key. This may be one of `backups`, `createdAt`, `disk`, `id`,
	// `image`, `ipv4Address`, `ipv4AddressPrivate`, `ipv6`, `ipv6Address`, `ipv6AddressPrivate`, `locked`,
	// `memory`, `monitoring`, `name`, `priceHourly`, `priceMonthly`, `privateNetworking`, `region`, `size`,
	// `status`, `urn`, `vcpus`, or `vpcUuid`.
	Key string `pulumi:"key"`
}

// GetDropletsSortInput is an input type that accepts GetDropletsSortArgs and GetDropletsSortOutput values.
// You can construct a concrete instance of `GetDropletsSortInput` via:
//
//          GetDropletsSortArgs{...}
type GetDropletsSortInput interface {
	pulumi.Input

	ToGetDropletsSortOutput() GetDropletsSortOutput
	ToGetDropletsSortOutputWithContext(context.Context) GetDropletsSortOutput
}

type GetDropletsSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the Droplets by this key. This may be one of `backups`, `createdAt`, `disk`, `id`,
	// `image`, `ipv4Address`, `ipv4AddressPrivate`, `ipv6`, `ipv6Address`, `ipv6AddressPrivate`, `locked`,
	// `memory`, `monitoring`, `name`, `priceHourly`, `priceMonthly`, `privateNetworking`, `region`, `size`,
	// `status`, `urn`, `vcpus`, or `vpcUuid`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetDropletsSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDropletsSort)(nil)).Elem()
}

func (i GetDropletsSortArgs) ToGetDropletsSortOutput() GetDropletsSortOutput {
	return i.ToGetDropletsSortOutputWithContext(context.Background())
}

func (i GetDropletsSortArgs) ToGetDropletsSortOutputWithContext(ctx context.Context) GetDropletsSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDropletsSortOutput)
}

// GetDropletsSortArrayInput is an input type that accepts GetDropletsSortArray and GetDropletsSortArrayOutput values.
// You can construct a concrete instance of `GetDropletsSortArrayInput` via:
//
//          GetDropletsSortArray{ GetDropletsSortArgs{...} }
type GetDropletsSortArrayInput interface {
	pulumi.Input

	ToGetDropletsSortArrayOutput() GetDropletsSortArrayOutput
	ToGetDropletsSortArrayOutputWithContext(context.Context) GetDropletsSortArrayOutput
}

type GetDropletsSortArray []GetDropletsSortInput

func (GetDropletsSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDropletsSort)(nil)).Elem()
}

func (i GetDropletsSortArray) ToGetDropletsSortArrayOutput() GetDropletsSortArrayOutput {
	return i.ToGetDropletsSortArrayOutputWithContext(context.Background())
}

func (i GetDropletsSortArray) ToGetDropletsSortArrayOutputWithContext(ctx context.Context) GetDropletsSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDropletsSortArrayOutput)
}

type GetDropletsSortOutput struct{ *pulumi.OutputState }

func (GetDropletsSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDropletsSort)(nil)).Elem()
}

func (o GetDropletsSortOutput) ToGetDropletsSortOutput() GetDropletsSortOutput {
	return o
}

func (o GetDropletsSortOutput) ToGetDropletsSortOutputWithContext(ctx context.Context) GetDropletsSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetDropletsSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDropletsSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the Droplets by this key. This may be one of `backups`, `createdAt`, `disk`, `id`,
// `image`, `ipv4Address`, `ipv4AddressPrivate`, `ipv6`, `ipv6Address`, `ipv6AddressPrivate`, `locked`,
// `memory`, `monitoring`, `name`, `priceHourly`, `priceMonthly`, `privateNetworking`, `region`, `size`,
// `status`, `urn`, `vcpus`, or `vpcUuid`.
func (o GetDropletsSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDropletsSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetDropletsSortArrayOutput struct{ *pulumi.OutputState }

func (GetDropletsSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDropletsSort)(nil)).Elem()
}

func (o GetDropletsSortArrayOutput) ToGetDropletsSortArrayOutput() GetDropletsSortArrayOutput {
	return o
}

func (o GetDropletsSortArrayOutput) ToGetDropletsSortArrayOutputWithContext(ctx context.Context) GetDropletsSortArrayOutput {
	return o
}

func (o GetDropletsSortArrayOutput) Index(i pulumi.IntInput) GetDropletsSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDropletsSort {
		return vs[0].([]GetDropletsSort)[vs[1].(int)]
	}).(GetDropletsSortOutput)
}

type GetImagesFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the images by this key. This may be one of `distribution`, `errorMessage`,
	// `id`, `image`, `minDiskSize`, `name`, `private`, `regions`, `sizeGigabytes`, `slug`, `status`,
	// `tags`, or `type`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves images
	// where the `key` field takes on one or more of the values provided here.
	Values []string `pulumi:"values"`
}

// GetImagesFilterInput is an input type that accepts GetImagesFilterArgs and GetImagesFilterOutput values.
// You can construct a concrete instance of `GetImagesFilterInput` via:
//
//          GetImagesFilterArgs{...}
type GetImagesFilterInput interface {
	pulumi.Input

	ToGetImagesFilterOutput() GetImagesFilterOutput
	ToGetImagesFilterOutputWithContext(context.Context) GetImagesFilterOutput
}

type GetImagesFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the images by this key. This may be one of `distribution`, `errorMessage`,
	// `id`, `image`, `minDiskSize`, `name`, `private`, `regions`, `sizeGigabytes`, `slug`, `status`,
	// `tags`, or `type`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves images
	// where the `key` field takes on one or more of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetImagesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesFilter)(nil)).Elem()
}

func (i GetImagesFilterArgs) ToGetImagesFilterOutput() GetImagesFilterOutput {
	return i.ToGetImagesFilterOutputWithContext(context.Background())
}

func (i GetImagesFilterArgs) ToGetImagesFilterOutputWithContext(ctx context.Context) GetImagesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesFilterOutput)
}

// GetImagesFilterArrayInput is an input type that accepts GetImagesFilterArray and GetImagesFilterArrayOutput values.
// You can construct a concrete instance of `GetImagesFilterArrayInput` via:
//
//          GetImagesFilterArray{ GetImagesFilterArgs{...} }
type GetImagesFilterArrayInput interface {
	pulumi.Input

	ToGetImagesFilterArrayOutput() GetImagesFilterArrayOutput
	ToGetImagesFilterArrayOutputWithContext(context.Context) GetImagesFilterArrayOutput
}

type GetImagesFilterArray []GetImagesFilterInput

func (GetImagesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesFilter)(nil)).Elem()
}

func (i GetImagesFilterArray) ToGetImagesFilterArrayOutput() GetImagesFilterArrayOutput {
	return i.ToGetImagesFilterArrayOutputWithContext(context.Background())
}

func (i GetImagesFilterArray) ToGetImagesFilterArrayOutputWithContext(ctx context.Context) GetImagesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesFilterArrayOutput)
}

type GetImagesFilterOutput struct{ *pulumi.OutputState }

func (GetImagesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesFilter)(nil)).Elem()
}

func (o GetImagesFilterOutput) ToGetImagesFilterOutput() GetImagesFilterOutput {
	return o
}

func (o GetImagesFilterOutput) ToGetImagesFilterOutputWithContext(ctx context.Context) GetImagesFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetImagesFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetImagesFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the images by this key. This may be one of `distribution`, `errorMessage`,
// `id`, `image`, `minDiskSize`, `name`, `private`, `regions`, `sizeGigabytes`, `slug`, `status`,
// `tags`, or `type`.
func (o GetImagesFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetImagesFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// A list of values to match against the `key` field. Only retrieves images
// where the `key` field takes on one or more of the values provided here.
func (o GetImagesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImagesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetImagesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetImagesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesFilter)(nil)).Elem()
}

func (o GetImagesFilterArrayOutput) ToGetImagesFilterArrayOutput() GetImagesFilterArrayOutput {
	return o
}

func (o GetImagesFilterArrayOutput) ToGetImagesFilterArrayOutputWithContext(ctx context.Context) GetImagesFilterArrayOutput {
	return o
}

func (o GetImagesFilterArrayOutput) Index(i pulumi.IntInput) GetImagesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesFilter {
		return vs[0].([]GetImagesFilter)[vs[1].(int)]
	}).(GetImagesFilterOutput)
}

type GetImagesImage struct {
	Created string `pulumi:"created"`
	// The name of the distribution of the OS of the image.
	// - `minDiskSize`: The minimum 'disk' required for the image.
	// - `sizeGigabytes`: The size of the image in GB.
	Distribution string `pulumi:"distribution"`
	ErrorMessage string `pulumi:"errorMessage"`
	Id           int    `pulumi:"id"`
	// The id of the image (legacy parameter).
	Image       string `pulumi:"image"`
	MinDiskSize int    `pulumi:"minDiskSize"`
	Name        string `pulumi:"name"`
	// Is image a public image or not. Public images represent
	// Linux distributions or One-Click Applications, while non-public images represent
	// snapshots and backups and are only available within your account.
	// - `regions`: A set of the regions that the image is available in.
	// - `tags`: A set of tags applied to the image
	// - `created`: When the image was created
	// - `status`: Current status of the image
	// - `errorMessage`: Any applicable error message pertaining to the image
	Private       bool     `pulumi:"private"`
	Regions       []string `pulumi:"regions"`
	SizeGigabytes float64  `pulumi:"sizeGigabytes"`
	Slug          string   `pulumi:"slug"`
	Status        string   `pulumi:"status"`
	Tags          []string `pulumi:"tags"`
	Type          string   `pulumi:"type"`
}

// GetImagesImageInput is an input type that accepts GetImagesImageArgs and GetImagesImageOutput values.
// You can construct a concrete instance of `GetImagesImageInput` via:
//
//          GetImagesImageArgs{...}
type GetImagesImageInput interface {
	pulumi.Input

	ToGetImagesImageOutput() GetImagesImageOutput
	ToGetImagesImageOutputWithContext(context.Context) GetImagesImageOutput
}

type GetImagesImageArgs struct {
	Created pulumi.StringInput `pulumi:"created"`
	// The name of the distribution of the OS of the image.
	// - `minDiskSize`: The minimum 'disk' required for the image.
	// - `sizeGigabytes`: The size of the image in GB.
	Distribution pulumi.StringInput `pulumi:"distribution"`
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	Id           pulumi.IntInput    `pulumi:"id"`
	// The id of the image (legacy parameter).
	Image       pulumi.StringInput `pulumi:"image"`
	MinDiskSize pulumi.IntInput    `pulumi:"minDiskSize"`
	Name        pulumi.StringInput `pulumi:"name"`
	// Is image a public image or not. Public images represent
	// Linux distributions or One-Click Applications, while non-public images represent
	// snapshots and backups and are only available within your account.
	// - `regions`: A set of the regions that the image is available in.
	// - `tags`: A set of tags applied to the image
	// - `created`: When the image was created
	// - `status`: Current status of the image
	// - `errorMessage`: Any applicable error message pertaining to the image
	Private       pulumi.BoolInput        `pulumi:"private"`
	Regions       pulumi.StringArrayInput `pulumi:"regions"`
	SizeGigabytes pulumi.Float64Input     `pulumi:"sizeGigabytes"`
	Slug          pulumi.StringInput      `pulumi:"slug"`
	Status        pulumi.StringInput      `pulumi:"status"`
	Tags          pulumi.StringArrayInput `pulumi:"tags"`
	Type          pulumi.StringInput      `pulumi:"type"`
}

func (GetImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArgs) ToGetImagesImageOutput() GetImagesImageOutput {
	return i.ToGetImagesImageOutputWithContext(context.Background())
}

func (i GetImagesImageArgs) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageOutput)
}

// GetImagesImageArrayInput is an input type that accepts GetImagesImageArray and GetImagesImageArrayOutput values.
// You can construct a concrete instance of `GetImagesImageArrayInput` via:
//
//          GetImagesImageArray{ GetImagesImageArgs{...} }
type GetImagesImageArrayInput interface {
	pulumi.Input

	ToGetImagesImageArrayOutput() GetImagesImageArrayOutput
	ToGetImagesImageArrayOutputWithContext(context.Context) GetImagesImageArrayOutput
}

type GetImagesImageArray []GetImagesImageInput

func (GetImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return i.ToGetImagesImageArrayOutputWithContext(context.Background())
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageArrayOutput)
}

type GetImagesImageOutput struct{ *pulumi.OutputState }

func (GetImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageOutput) ToGetImagesImageOutput() GetImagesImageOutput {
	return o
}

func (o GetImagesImageOutput) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return o
}

func (o GetImagesImageOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Created }).(pulumi.StringOutput)
}

// The name of the distribution of the OS of the image.
// - `minDiskSize`: The minimum 'disk' required for the image.
// - `sizeGigabytes`: The size of the image in GB.
func (o GetImagesImageOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Distribution }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetImagesImage) int { return v.Id }).(pulumi.IntOutput)
}

// The id of the image (legacy parameter).
func (o GetImagesImageOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Image }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) MinDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetImagesImage) int { return v.MinDiskSize }).(pulumi.IntOutput)
}

func (o GetImagesImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Name }).(pulumi.StringOutput)
}

// Is image a public image or not. Public images represent
// Linux distributions or One-Click Applications, while non-public images represent
// snapshots and backups and are only available within your account.
// - `regions`: A set of the regions that the image is available in.
// - `tags`: A set of tags applied to the image
// - `created`: When the image was created
// - `status`: Current status of the image
// - `errorMessage`: Any applicable error message pertaining to the image
func (o GetImagesImageOutput) Private() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImagesImage) bool { return v.Private }).(pulumi.BoolOutput)
}

func (o GetImagesImageOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImagesImage) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

func (o GetImagesImageOutput) SizeGigabytes() pulumi.Float64Output {
	return o.ApplyT(func(v GetImagesImage) float64 { return v.SizeGigabytes }).(pulumi.Float64Output)
}

func (o GetImagesImageOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Slug }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImagesImage) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o GetImagesImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Type }).(pulumi.StringOutput)
}

type GetImagesImageArrayOutput struct{ *pulumi.OutputState }

func (GetImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) Index(i pulumi.IntInput) GetImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesImage {
		return vs[0].([]GetImagesImage)[vs[1].(int)]
	}).(GetImagesImageOutput)
}

type GetImagesSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the images by this key. This may be one of `distribution`, `errorMessage`, `id`,
	// `image`, `minDiskSize`, `name`, `private`, `sizeGigabytes`, `slug`, `status`, or `type`.
	Key string `pulumi:"key"`
}

// GetImagesSortInput is an input type that accepts GetImagesSortArgs and GetImagesSortOutput values.
// You can construct a concrete instance of `GetImagesSortInput` via:
//
//          GetImagesSortArgs{...}
type GetImagesSortInput interface {
	pulumi.Input

	ToGetImagesSortOutput() GetImagesSortOutput
	ToGetImagesSortOutputWithContext(context.Context) GetImagesSortOutput
}

type GetImagesSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the images by this key. This may be one of `distribution`, `errorMessage`, `id`,
	// `image`, `minDiskSize`, `name`, `private`, `sizeGigabytes`, `slug`, `status`, or `type`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetImagesSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesSort)(nil)).Elem()
}

func (i GetImagesSortArgs) ToGetImagesSortOutput() GetImagesSortOutput {
	return i.ToGetImagesSortOutputWithContext(context.Background())
}

func (i GetImagesSortArgs) ToGetImagesSortOutputWithContext(ctx context.Context) GetImagesSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesSortOutput)
}

// GetImagesSortArrayInput is an input type that accepts GetImagesSortArray and GetImagesSortArrayOutput values.
// You can construct a concrete instance of `GetImagesSortArrayInput` via:
//
//          GetImagesSortArray{ GetImagesSortArgs{...} }
type GetImagesSortArrayInput interface {
	pulumi.Input

	ToGetImagesSortArrayOutput() GetImagesSortArrayOutput
	ToGetImagesSortArrayOutputWithContext(context.Context) GetImagesSortArrayOutput
}

type GetImagesSortArray []GetImagesSortInput

func (GetImagesSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesSort)(nil)).Elem()
}

func (i GetImagesSortArray) ToGetImagesSortArrayOutput() GetImagesSortArrayOutput {
	return i.ToGetImagesSortArrayOutputWithContext(context.Background())
}

func (i GetImagesSortArray) ToGetImagesSortArrayOutputWithContext(ctx context.Context) GetImagesSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesSortArrayOutput)
}

type GetImagesSortOutput struct{ *pulumi.OutputState }

func (GetImagesSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesSort)(nil)).Elem()
}

func (o GetImagesSortOutput) ToGetImagesSortOutput() GetImagesSortOutput {
	return o
}

func (o GetImagesSortOutput) ToGetImagesSortOutputWithContext(ctx context.Context) GetImagesSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetImagesSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the images by this key. This may be one of `distribution`, `errorMessage`, `id`,
// `image`, `minDiskSize`, `name`, `private`, `sizeGigabytes`, `slug`, `status`, or `type`.
func (o GetImagesSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetImagesSortArrayOutput struct{ *pulumi.OutputState }

func (GetImagesSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesSort)(nil)).Elem()
}

func (o GetImagesSortArrayOutput) ToGetImagesSortArrayOutput() GetImagesSortArrayOutput {
	return o
}

func (o GetImagesSortArrayOutput) ToGetImagesSortArrayOutputWithContext(ctx context.Context) GetImagesSortArrayOutput {
	return o
}

func (o GetImagesSortArrayOutput) Index(i pulumi.IntInput) GetImagesSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesSort {
		return vs[0].([]GetImagesSort)[vs[1].(int)]
	}).(GetImagesSortOutput)
}

type GetKubernetesClusterKubeConfig struct {
	// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientCertificate string `pulumi:"clientCertificate"`
	// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientKey string `pulumi:"clientKey"`
	// The base64 encoded public certificate for the cluster's certificate authority.
	ClusterCaCertificate string `pulumi:"clusterCaCertificate"`
	// The date and time when the credentials will expire and need to be regenerated.
	ExpiresAt string `pulumi:"expiresAt"`
	// The URL of the API server on the Kubernetes master node.
	Host string `pulumi:"host"`
	// The full contents of the Kubernetes cluster's kubeconfig file.
	RawConfig string `pulumi:"rawConfig"`
	// The DigitalOcean API access token used by clients to access the cluster.
	Token string `pulumi:"token"`
}

// GetKubernetesClusterKubeConfigInput is an input type that accepts GetKubernetesClusterKubeConfigArgs and GetKubernetesClusterKubeConfigOutput values.
// You can construct a concrete instance of `GetKubernetesClusterKubeConfigInput` via:
//
//          GetKubernetesClusterKubeConfigArgs{...}
type GetKubernetesClusterKubeConfigInput interface {
	pulumi.Input

	ToGetKubernetesClusterKubeConfigOutput() GetKubernetesClusterKubeConfigOutput
	ToGetKubernetesClusterKubeConfigOutputWithContext(context.Context) GetKubernetesClusterKubeConfigOutput
}

type GetKubernetesClusterKubeConfigArgs struct {
	// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientCertificate pulumi.StringInput `pulumi:"clientCertificate"`
	// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// The base64 encoded public certificate for the cluster's certificate authority.
	ClusterCaCertificate pulumi.StringInput `pulumi:"clusterCaCertificate"`
	// The date and time when the credentials will expire and need to be regenerated.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The URL of the API server on the Kubernetes master node.
	Host pulumi.StringInput `pulumi:"host"`
	// The full contents of the Kubernetes cluster's kubeconfig file.
	RawConfig pulumi.StringInput `pulumi:"rawConfig"`
	// The DigitalOcean API access token used by clients to access the cluster.
	Token pulumi.StringInput `pulumi:"token"`
}

func (GetKubernetesClusterKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterKubeConfig)(nil)).Elem()
}

func (i GetKubernetesClusterKubeConfigArgs) ToGetKubernetesClusterKubeConfigOutput() GetKubernetesClusterKubeConfigOutput {
	return i.ToGetKubernetesClusterKubeConfigOutputWithContext(context.Background())
}

func (i GetKubernetesClusterKubeConfigArgs) ToGetKubernetesClusterKubeConfigOutputWithContext(ctx context.Context) GetKubernetesClusterKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterKubeConfigOutput)
}

// GetKubernetesClusterKubeConfigArrayInput is an input type that accepts GetKubernetesClusterKubeConfigArray and GetKubernetesClusterKubeConfigArrayOutput values.
// You can construct a concrete instance of `GetKubernetesClusterKubeConfigArrayInput` via:
//
//          GetKubernetesClusterKubeConfigArray{ GetKubernetesClusterKubeConfigArgs{...} }
type GetKubernetesClusterKubeConfigArrayInput interface {
	pulumi.Input

	ToGetKubernetesClusterKubeConfigArrayOutput() GetKubernetesClusterKubeConfigArrayOutput
	ToGetKubernetesClusterKubeConfigArrayOutputWithContext(context.Context) GetKubernetesClusterKubeConfigArrayOutput
}

type GetKubernetesClusterKubeConfigArray []GetKubernetesClusterKubeConfigInput

func (GetKubernetesClusterKubeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterKubeConfig)(nil)).Elem()
}

func (i GetKubernetesClusterKubeConfigArray) ToGetKubernetesClusterKubeConfigArrayOutput() GetKubernetesClusterKubeConfigArrayOutput {
	return i.ToGetKubernetesClusterKubeConfigArrayOutputWithContext(context.Background())
}

func (i GetKubernetesClusterKubeConfigArray) ToGetKubernetesClusterKubeConfigArrayOutputWithContext(ctx context.Context) GetKubernetesClusterKubeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterKubeConfigArrayOutput)
}

type GetKubernetesClusterKubeConfigOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterKubeConfig)(nil)).Elem()
}

func (o GetKubernetesClusterKubeConfigOutput) ToGetKubernetesClusterKubeConfigOutput() GetKubernetesClusterKubeConfigOutput {
	return o
}

func (o GetKubernetesClusterKubeConfigOutput) ToGetKubernetesClusterKubeConfigOutputWithContext(ctx context.Context) GetKubernetesClusterKubeConfigOutput {
	return o
}

// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
func (o GetKubernetesClusterKubeConfigOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
func (o GetKubernetesClusterKubeConfigOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.ClientKey }).(pulumi.StringOutput)
}

// The base64 encoded public certificate for the cluster's certificate authority.
func (o GetKubernetesClusterKubeConfigOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// The date and time when the credentials will expire and need to be regenerated.
func (o GetKubernetesClusterKubeConfigOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The URL of the API server on the Kubernetes master node.
func (o GetKubernetesClusterKubeConfigOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.Host }).(pulumi.StringOutput)
}

// The full contents of the Kubernetes cluster's kubeconfig file.
func (o GetKubernetesClusterKubeConfigOutput) RawConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.RawConfig }).(pulumi.StringOutput)
}

// The DigitalOcean API access token used by clients to access the cluster.
func (o GetKubernetesClusterKubeConfigOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterKubeConfig) string { return v.Token }).(pulumi.StringOutput)
}

type GetKubernetesClusterKubeConfigArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterKubeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterKubeConfig)(nil)).Elem()
}

func (o GetKubernetesClusterKubeConfigArrayOutput) ToGetKubernetesClusterKubeConfigArrayOutput() GetKubernetesClusterKubeConfigArrayOutput {
	return o
}

func (o GetKubernetesClusterKubeConfigArrayOutput) ToGetKubernetesClusterKubeConfigArrayOutputWithContext(ctx context.Context) GetKubernetesClusterKubeConfigArrayOutput {
	return o
}

func (o GetKubernetesClusterKubeConfigArrayOutput) Index(i pulumi.IntInput) GetKubernetesClusterKubeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesClusterKubeConfig {
		return vs[0].([]GetKubernetesClusterKubeConfig)[vs[1].(int)]
	}).(GetKubernetesClusterKubeConfigOutput)
}

type GetKubernetesClusterNodePool struct {
	// The actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount int `pulumi:"actualNodeCount"`
	// A boolean indicating whether auto-scaling is enabled on the node pool.
	AutoScale bool `pulumi:"autoScale"`
	// A unique ID that can be used to identify and reference the node.
	Id string `pulumi:"id"`
	// A map of key/value pairs applied to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
	Labels map[string]string `pulumi:"labels"`
	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes int `pulumi:"maxNodes"`
	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes int `pulumi:"minNodes"`
	// The name of Kubernetes cluster.
	Name string `pulumi:"name"`
	// The number of Droplet instances in the node pool.
	NodeCount int `pulumi:"nodeCount"`
	// A list of nodes in the pool. Each node exports the following attributes:
	Nodes []GetKubernetesClusterNodePoolNode `pulumi:"nodes"`
	// The slug identifier for the type of Droplet used as workers in the node pool.
	Size string `pulumi:"size"`
	// A list of tag names applied to the node pool.
	Tags []string `pulumi:"tags"`
}

// GetKubernetesClusterNodePoolInput is an input type that accepts GetKubernetesClusterNodePoolArgs and GetKubernetesClusterNodePoolOutput values.
// You can construct a concrete instance of `GetKubernetesClusterNodePoolInput` via:
//
//          GetKubernetesClusterNodePoolArgs{...}
type GetKubernetesClusterNodePoolInput interface {
	pulumi.Input

	ToGetKubernetesClusterNodePoolOutput() GetKubernetesClusterNodePoolOutput
	ToGetKubernetesClusterNodePoolOutputWithContext(context.Context) GetKubernetesClusterNodePoolOutput
}

type GetKubernetesClusterNodePoolArgs struct {
	// The actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount pulumi.IntInput `pulumi:"actualNodeCount"`
	// A boolean indicating whether auto-scaling is enabled on the node pool.
	AutoScale pulumi.BoolInput `pulumi:"autoScale"`
	// A unique ID that can be used to identify and reference the node.
	Id pulumi.StringInput `pulumi:"id"`
	// A map of key/value pairs applied to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes pulumi.IntInput `pulumi:"maxNodes"`
	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes pulumi.IntInput `pulumi:"minNodes"`
	// The name of Kubernetes cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of Droplet instances in the node pool.
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
	// A list of nodes in the pool. Each node exports the following attributes:
	Nodes GetKubernetesClusterNodePoolNodeArrayInput `pulumi:"nodes"`
	// The slug identifier for the type of Droplet used as workers in the node pool.
	Size pulumi.StringInput `pulumi:"size"`
	// A list of tag names applied to the node pool.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetKubernetesClusterNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterNodePool)(nil)).Elem()
}

func (i GetKubernetesClusterNodePoolArgs) ToGetKubernetesClusterNodePoolOutput() GetKubernetesClusterNodePoolOutput {
	return i.ToGetKubernetesClusterNodePoolOutputWithContext(context.Background())
}

func (i GetKubernetesClusterNodePoolArgs) ToGetKubernetesClusterNodePoolOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterNodePoolOutput)
}

// GetKubernetesClusterNodePoolArrayInput is an input type that accepts GetKubernetesClusterNodePoolArray and GetKubernetesClusterNodePoolArrayOutput values.
// You can construct a concrete instance of `GetKubernetesClusterNodePoolArrayInput` via:
//
//          GetKubernetesClusterNodePoolArray{ GetKubernetesClusterNodePoolArgs{...} }
type GetKubernetesClusterNodePoolArrayInput interface {
	pulumi.Input

	ToGetKubernetesClusterNodePoolArrayOutput() GetKubernetesClusterNodePoolArrayOutput
	ToGetKubernetesClusterNodePoolArrayOutputWithContext(context.Context) GetKubernetesClusterNodePoolArrayOutput
}

type GetKubernetesClusterNodePoolArray []GetKubernetesClusterNodePoolInput

func (GetKubernetesClusterNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterNodePool)(nil)).Elem()
}

func (i GetKubernetesClusterNodePoolArray) ToGetKubernetesClusterNodePoolArrayOutput() GetKubernetesClusterNodePoolArrayOutput {
	return i.ToGetKubernetesClusterNodePoolArrayOutputWithContext(context.Background())
}

func (i GetKubernetesClusterNodePoolArray) ToGetKubernetesClusterNodePoolArrayOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterNodePoolArrayOutput)
}

type GetKubernetesClusterNodePoolOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterNodePool)(nil)).Elem()
}

func (o GetKubernetesClusterNodePoolOutput) ToGetKubernetesClusterNodePoolOutput() GetKubernetesClusterNodePoolOutput {
	return o
}

func (o GetKubernetesClusterNodePoolOutput) ToGetKubernetesClusterNodePoolOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolOutput {
	return o
}

// The actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
func (o GetKubernetesClusterNodePoolOutput) ActualNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) int { return v.ActualNodeCount }).(pulumi.IntOutput)
}

// A boolean indicating whether auto-scaling is enabled on the node pool.
func (o GetKubernetesClusterNodePoolOutput) AutoScale() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) bool { return v.AutoScale }).(pulumi.BoolOutput)
}

// A unique ID that can be used to identify and reference the node.
func (o GetKubernetesClusterNodePoolOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) string { return v.Id }).(pulumi.StringOutput)
}

// A map of key/value pairs applied to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding [Node resources](https://kubernetes.io/docs/concepts/architecture/nodes/).
func (o GetKubernetesClusterNodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
func (o GetKubernetesClusterNodePoolOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) int { return v.MaxNodes }).(pulumi.IntOutput)
}

// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
func (o GetKubernetesClusterNodePoolOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) int { return v.MinNodes }).(pulumi.IntOutput)
}

// The name of Kubernetes cluster.
func (o GetKubernetesClusterNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) string { return v.Name }).(pulumi.StringOutput)
}

// The number of Droplet instances in the node pool.
func (o GetKubernetesClusterNodePoolOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) int { return v.NodeCount }).(pulumi.IntOutput)
}

// A list of nodes in the pool. Each node exports the following attributes:
func (o GetKubernetesClusterNodePoolOutput) Nodes() GetKubernetesClusterNodePoolNodeArrayOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) []GetKubernetesClusterNodePoolNode { return v.Nodes }).(GetKubernetesClusterNodePoolNodeArrayOutput)
}

// The slug identifier for the type of Droplet used as workers in the node pool.
func (o GetKubernetesClusterNodePoolOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) string { return v.Size }).(pulumi.StringOutput)
}

// A list of tag names applied to the node pool.
func (o GetKubernetesClusterNodePoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePool) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type GetKubernetesClusterNodePoolArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterNodePool)(nil)).Elem()
}

func (o GetKubernetesClusterNodePoolArrayOutput) ToGetKubernetesClusterNodePoolArrayOutput() GetKubernetesClusterNodePoolArrayOutput {
	return o
}

func (o GetKubernetesClusterNodePoolArrayOutput) ToGetKubernetesClusterNodePoolArrayOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolArrayOutput {
	return o
}

func (o GetKubernetesClusterNodePoolArrayOutput) Index(i pulumi.IntInput) GetKubernetesClusterNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesClusterNodePool {
		return vs[0].([]GetKubernetesClusterNodePool)[vs[1].(int)]
	}).(GetKubernetesClusterNodePoolOutput)
}

type GetKubernetesClusterNodePoolNode struct {
	// The date and time when the node was created.
	CreatedAt string `pulumi:"createdAt"`
	DropletId string `pulumi:"dropletId"`
	// A unique ID that can be used to identify and reference the node.
	Id string `pulumi:"id"`
	// The name of Kubernetes cluster.
	Name string `pulumi:"name"`
	// A string indicating the current status of the individual node.
	Status string `pulumi:"status"`
	// The date and time when the node was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetKubernetesClusterNodePoolNodeInput is an input type that accepts GetKubernetesClusterNodePoolNodeArgs and GetKubernetesClusterNodePoolNodeOutput values.
// You can construct a concrete instance of `GetKubernetesClusterNodePoolNodeInput` via:
//
//          GetKubernetesClusterNodePoolNodeArgs{...}
type GetKubernetesClusterNodePoolNodeInput interface {
	pulumi.Input

	ToGetKubernetesClusterNodePoolNodeOutput() GetKubernetesClusterNodePoolNodeOutput
	ToGetKubernetesClusterNodePoolNodeOutputWithContext(context.Context) GetKubernetesClusterNodePoolNodeOutput
}

type GetKubernetesClusterNodePoolNodeArgs struct {
	// The date and time when the node was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	DropletId pulumi.StringInput `pulumi:"dropletId"`
	// A unique ID that can be used to identify and reference the node.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of Kubernetes cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// A string indicating the current status of the individual node.
	Status pulumi.StringInput `pulumi:"status"`
	// The date and time when the node was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetKubernetesClusterNodePoolNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterNodePoolNode)(nil)).Elem()
}

func (i GetKubernetesClusterNodePoolNodeArgs) ToGetKubernetesClusterNodePoolNodeOutput() GetKubernetesClusterNodePoolNodeOutput {
	return i.ToGetKubernetesClusterNodePoolNodeOutputWithContext(context.Background())
}

func (i GetKubernetesClusterNodePoolNodeArgs) ToGetKubernetesClusterNodePoolNodeOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterNodePoolNodeOutput)
}

// GetKubernetesClusterNodePoolNodeArrayInput is an input type that accepts GetKubernetesClusterNodePoolNodeArray and GetKubernetesClusterNodePoolNodeArrayOutput values.
// You can construct a concrete instance of `GetKubernetesClusterNodePoolNodeArrayInput` via:
//
//          GetKubernetesClusterNodePoolNodeArray{ GetKubernetesClusterNodePoolNodeArgs{...} }
type GetKubernetesClusterNodePoolNodeArrayInput interface {
	pulumi.Input

	ToGetKubernetesClusterNodePoolNodeArrayOutput() GetKubernetesClusterNodePoolNodeArrayOutput
	ToGetKubernetesClusterNodePoolNodeArrayOutputWithContext(context.Context) GetKubernetesClusterNodePoolNodeArrayOutput
}

type GetKubernetesClusterNodePoolNodeArray []GetKubernetesClusterNodePoolNodeInput

func (GetKubernetesClusterNodePoolNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterNodePoolNode)(nil)).Elem()
}

func (i GetKubernetesClusterNodePoolNodeArray) ToGetKubernetesClusterNodePoolNodeArrayOutput() GetKubernetesClusterNodePoolNodeArrayOutput {
	return i.ToGetKubernetesClusterNodePoolNodeArrayOutputWithContext(context.Background())
}

func (i GetKubernetesClusterNodePoolNodeArray) ToGetKubernetesClusterNodePoolNodeArrayOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKubernetesClusterNodePoolNodeArrayOutput)
}

type GetKubernetesClusterNodePoolNodeOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterNodePoolNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubernetesClusterNodePoolNode)(nil)).Elem()
}

func (o GetKubernetesClusterNodePoolNodeOutput) ToGetKubernetesClusterNodePoolNodeOutput() GetKubernetesClusterNodePoolNodeOutput {
	return o
}

func (o GetKubernetesClusterNodePoolNodeOutput) ToGetKubernetesClusterNodePoolNodeOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolNodeOutput {
	return o
}

// The date and time when the node was created.
func (o GetKubernetesClusterNodePoolNodeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePoolNode) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetKubernetesClusterNodePoolNodeOutput) DropletId() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePoolNode) string { return v.DropletId }).(pulumi.StringOutput)
}

// A unique ID that can be used to identify and reference the node.
func (o GetKubernetesClusterNodePoolNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePoolNode) string { return v.Id }).(pulumi.StringOutput)
}

// The name of Kubernetes cluster.
func (o GetKubernetesClusterNodePoolNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePoolNode) string { return v.Name }).(pulumi.StringOutput)
}

// A string indicating the current status of the individual node.
func (o GetKubernetesClusterNodePoolNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePoolNode) string { return v.Status }).(pulumi.StringOutput)
}

// The date and time when the node was last updated.
func (o GetKubernetesClusterNodePoolNodeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKubernetesClusterNodePoolNode) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetKubernetesClusterNodePoolNodeArrayOutput struct{ *pulumi.OutputState }

func (GetKubernetesClusterNodePoolNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKubernetesClusterNodePoolNode)(nil)).Elem()
}

func (o GetKubernetesClusterNodePoolNodeArrayOutput) ToGetKubernetesClusterNodePoolNodeArrayOutput() GetKubernetesClusterNodePoolNodeArrayOutput {
	return o
}

func (o GetKubernetesClusterNodePoolNodeArrayOutput) ToGetKubernetesClusterNodePoolNodeArrayOutputWithContext(ctx context.Context) GetKubernetesClusterNodePoolNodeArrayOutput {
	return o
}

func (o GetKubernetesClusterNodePoolNodeArrayOutput) Index(i pulumi.IntInput) GetKubernetesClusterNodePoolNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKubernetesClusterNodePoolNode {
		return vs[0].([]GetKubernetesClusterNodePoolNode)[vs[1].(int)]
	}).(GetKubernetesClusterNodePoolNodeOutput)
}

type GetLoadBalancerForwardingRule struct {
	CertificateId  string `pulumi:"certificateId"`
	EntryPort      int    `pulumi:"entryPort"`
	EntryProtocol  string `pulumi:"entryProtocol"`
	TargetPort     int    `pulumi:"targetPort"`
	TargetProtocol string `pulumi:"targetProtocol"`
	TlsPassthrough bool   `pulumi:"tlsPassthrough"`
}

// GetLoadBalancerForwardingRuleInput is an input type that accepts GetLoadBalancerForwardingRuleArgs and GetLoadBalancerForwardingRuleOutput values.
// You can construct a concrete instance of `GetLoadBalancerForwardingRuleInput` via:
//
//          GetLoadBalancerForwardingRuleArgs{...}
type GetLoadBalancerForwardingRuleInput interface {
	pulumi.Input

	ToGetLoadBalancerForwardingRuleOutput() GetLoadBalancerForwardingRuleOutput
	ToGetLoadBalancerForwardingRuleOutputWithContext(context.Context) GetLoadBalancerForwardingRuleOutput
}

type GetLoadBalancerForwardingRuleArgs struct {
	CertificateId  pulumi.StringInput `pulumi:"certificateId"`
	EntryPort      pulumi.IntInput    `pulumi:"entryPort"`
	EntryProtocol  pulumi.StringInput `pulumi:"entryProtocol"`
	TargetPort     pulumi.IntInput    `pulumi:"targetPort"`
	TargetProtocol pulumi.StringInput `pulumi:"targetProtocol"`
	TlsPassthrough pulumi.BoolInput   `pulumi:"tlsPassthrough"`
}

func (GetLoadBalancerForwardingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerForwardingRule)(nil)).Elem()
}

func (i GetLoadBalancerForwardingRuleArgs) ToGetLoadBalancerForwardingRuleOutput() GetLoadBalancerForwardingRuleOutput {
	return i.ToGetLoadBalancerForwardingRuleOutputWithContext(context.Background())
}

func (i GetLoadBalancerForwardingRuleArgs) ToGetLoadBalancerForwardingRuleOutputWithContext(ctx context.Context) GetLoadBalancerForwardingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerForwardingRuleOutput)
}

// GetLoadBalancerForwardingRuleArrayInput is an input type that accepts GetLoadBalancerForwardingRuleArray and GetLoadBalancerForwardingRuleArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerForwardingRuleArrayInput` via:
//
//          GetLoadBalancerForwardingRuleArray{ GetLoadBalancerForwardingRuleArgs{...} }
type GetLoadBalancerForwardingRuleArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerForwardingRuleArrayOutput() GetLoadBalancerForwardingRuleArrayOutput
	ToGetLoadBalancerForwardingRuleArrayOutputWithContext(context.Context) GetLoadBalancerForwardingRuleArrayOutput
}

type GetLoadBalancerForwardingRuleArray []GetLoadBalancerForwardingRuleInput

func (GetLoadBalancerForwardingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerForwardingRule)(nil)).Elem()
}

func (i GetLoadBalancerForwardingRuleArray) ToGetLoadBalancerForwardingRuleArrayOutput() GetLoadBalancerForwardingRuleArrayOutput {
	return i.ToGetLoadBalancerForwardingRuleArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerForwardingRuleArray) ToGetLoadBalancerForwardingRuleArrayOutputWithContext(ctx context.Context) GetLoadBalancerForwardingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerForwardingRuleArrayOutput)
}

type GetLoadBalancerForwardingRuleOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerForwardingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerForwardingRule)(nil)).Elem()
}

func (o GetLoadBalancerForwardingRuleOutput) ToGetLoadBalancerForwardingRuleOutput() GetLoadBalancerForwardingRuleOutput {
	return o
}

func (o GetLoadBalancerForwardingRuleOutput) ToGetLoadBalancerForwardingRuleOutputWithContext(ctx context.Context) GetLoadBalancerForwardingRuleOutput {
	return o
}

func (o GetLoadBalancerForwardingRuleOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerForwardingRule) string { return v.CertificateId }).(pulumi.StringOutput)
}

func (o GetLoadBalancerForwardingRuleOutput) EntryPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerForwardingRule) int { return v.EntryPort }).(pulumi.IntOutput)
}

func (o GetLoadBalancerForwardingRuleOutput) EntryProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerForwardingRule) string { return v.EntryProtocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancerForwardingRuleOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerForwardingRule) int { return v.TargetPort }).(pulumi.IntOutput)
}

func (o GetLoadBalancerForwardingRuleOutput) TargetProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerForwardingRule) string { return v.TargetProtocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancerForwardingRuleOutput) TlsPassthrough() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerForwardingRule) bool { return v.TlsPassthrough }).(pulumi.BoolOutput)
}

type GetLoadBalancerForwardingRuleArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerForwardingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerForwardingRule)(nil)).Elem()
}

func (o GetLoadBalancerForwardingRuleArrayOutput) ToGetLoadBalancerForwardingRuleArrayOutput() GetLoadBalancerForwardingRuleArrayOutput {
	return o
}

func (o GetLoadBalancerForwardingRuleArrayOutput) ToGetLoadBalancerForwardingRuleArrayOutputWithContext(ctx context.Context) GetLoadBalancerForwardingRuleArrayOutput {
	return o
}

func (o GetLoadBalancerForwardingRuleArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerForwardingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerForwardingRule {
		return vs[0].([]GetLoadBalancerForwardingRule)[vs[1].(int)]
	}).(GetLoadBalancerForwardingRuleOutput)
}

type GetLoadBalancerHealthcheck struct {
	CheckIntervalSeconds   int    `pulumi:"checkIntervalSeconds"`
	HealthyThreshold       int    `pulumi:"healthyThreshold"`
	Path                   string `pulumi:"path"`
	Port                   int    `pulumi:"port"`
	Protocol               string `pulumi:"protocol"`
	ResponseTimeoutSeconds int    `pulumi:"responseTimeoutSeconds"`
	UnhealthyThreshold     int    `pulumi:"unhealthyThreshold"`
}

// GetLoadBalancerHealthcheckInput is an input type that accepts GetLoadBalancerHealthcheckArgs and GetLoadBalancerHealthcheckOutput values.
// You can construct a concrete instance of `GetLoadBalancerHealthcheckInput` via:
//
//          GetLoadBalancerHealthcheckArgs{...}
type GetLoadBalancerHealthcheckInput interface {
	pulumi.Input

	ToGetLoadBalancerHealthcheckOutput() GetLoadBalancerHealthcheckOutput
	ToGetLoadBalancerHealthcheckOutputWithContext(context.Context) GetLoadBalancerHealthcheckOutput
}

type GetLoadBalancerHealthcheckArgs struct {
	CheckIntervalSeconds   pulumi.IntInput    `pulumi:"checkIntervalSeconds"`
	HealthyThreshold       pulumi.IntInput    `pulumi:"healthyThreshold"`
	Path                   pulumi.StringInput `pulumi:"path"`
	Port                   pulumi.IntInput    `pulumi:"port"`
	Protocol               pulumi.StringInput `pulumi:"protocol"`
	ResponseTimeoutSeconds pulumi.IntInput    `pulumi:"responseTimeoutSeconds"`
	UnhealthyThreshold     pulumi.IntInput    `pulumi:"unhealthyThreshold"`
}

func (GetLoadBalancerHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerHealthcheck)(nil)).Elem()
}

func (i GetLoadBalancerHealthcheckArgs) ToGetLoadBalancerHealthcheckOutput() GetLoadBalancerHealthcheckOutput {
	return i.ToGetLoadBalancerHealthcheckOutputWithContext(context.Background())
}

func (i GetLoadBalancerHealthcheckArgs) ToGetLoadBalancerHealthcheckOutputWithContext(ctx context.Context) GetLoadBalancerHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerHealthcheckOutput)
}

type GetLoadBalancerHealthcheckOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerHealthcheck)(nil)).Elem()
}

func (o GetLoadBalancerHealthcheckOutput) ToGetLoadBalancerHealthcheckOutput() GetLoadBalancerHealthcheckOutput {
	return o
}

func (o GetLoadBalancerHealthcheckOutput) ToGetLoadBalancerHealthcheckOutputWithContext(ctx context.Context) GetLoadBalancerHealthcheckOutput {
	return o
}

func (o GetLoadBalancerHealthcheckOutput) CheckIntervalSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) int { return v.CheckIntervalSeconds }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthcheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthcheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetLoadBalancerHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthcheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancerHealthcheckOutput) ResponseTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) int { return v.ResponseTimeoutSeconds }).(pulumi.IntOutput)
}

func (o GetLoadBalancerHealthcheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerHealthcheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type GetLoadBalancerStickySessions struct {
	CookieName       string `pulumi:"cookieName"`
	CookieTtlSeconds int    `pulumi:"cookieTtlSeconds"`
	Type             string `pulumi:"type"`
}

// GetLoadBalancerStickySessionsInput is an input type that accepts GetLoadBalancerStickySessionsArgs and GetLoadBalancerStickySessionsOutput values.
// You can construct a concrete instance of `GetLoadBalancerStickySessionsInput` via:
//
//          GetLoadBalancerStickySessionsArgs{...}
type GetLoadBalancerStickySessionsInput interface {
	pulumi.Input

	ToGetLoadBalancerStickySessionsOutput() GetLoadBalancerStickySessionsOutput
	ToGetLoadBalancerStickySessionsOutputWithContext(context.Context) GetLoadBalancerStickySessionsOutput
}

type GetLoadBalancerStickySessionsArgs struct {
	CookieName       pulumi.StringInput `pulumi:"cookieName"`
	CookieTtlSeconds pulumi.IntInput    `pulumi:"cookieTtlSeconds"`
	Type             pulumi.StringInput `pulumi:"type"`
}

func (GetLoadBalancerStickySessionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerStickySessions)(nil)).Elem()
}

func (i GetLoadBalancerStickySessionsArgs) ToGetLoadBalancerStickySessionsOutput() GetLoadBalancerStickySessionsOutput {
	return i.ToGetLoadBalancerStickySessionsOutputWithContext(context.Background())
}

func (i GetLoadBalancerStickySessionsArgs) ToGetLoadBalancerStickySessionsOutputWithContext(ctx context.Context) GetLoadBalancerStickySessionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerStickySessionsOutput)
}

type GetLoadBalancerStickySessionsOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerStickySessionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerStickySessions)(nil)).Elem()
}

func (o GetLoadBalancerStickySessionsOutput) ToGetLoadBalancerStickySessionsOutput() GetLoadBalancerStickySessionsOutput {
	return o
}

func (o GetLoadBalancerStickySessionsOutput) ToGetLoadBalancerStickySessionsOutputWithContext(ctx context.Context) GetLoadBalancerStickySessionsOutput {
	return o
}

func (o GetLoadBalancerStickySessionsOutput) CookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerStickySessions) string { return v.CookieName }).(pulumi.StringOutput)
}

func (o GetLoadBalancerStickySessionsOutput) CookieTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerStickySessions) int { return v.CookieTtlSeconds }).(pulumi.IntOutput)
}

func (o GetLoadBalancerStickySessionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerStickySessions) string { return v.Type }).(pulumi.StringOutput)
}

type GetProjectsFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the projects by this key. This may be one of `name`,
	// `purpose`, `description`, `environment`, or `isDefault`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves projects
	// where the `key` field takes on one or more of the values provided here.
	Values []string `pulumi:"values"`
}

// GetProjectsFilterInput is an input type that accepts GetProjectsFilterArgs and GetProjectsFilterOutput values.
// You can construct a concrete instance of `GetProjectsFilterInput` via:
//
//          GetProjectsFilterArgs{...}
type GetProjectsFilterInput interface {
	pulumi.Input

	ToGetProjectsFilterOutput() GetProjectsFilterOutput
	ToGetProjectsFilterOutputWithContext(context.Context) GetProjectsFilterOutput
}

type GetProjectsFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the projects by this key. This may be one of `name`,
	// `purpose`, `description`, `environment`, or `isDefault`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves projects
	// where the `key` field takes on one or more of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetProjectsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsFilter)(nil)).Elem()
}

func (i GetProjectsFilterArgs) ToGetProjectsFilterOutput() GetProjectsFilterOutput {
	return i.ToGetProjectsFilterOutputWithContext(context.Background())
}

func (i GetProjectsFilterArgs) ToGetProjectsFilterOutputWithContext(ctx context.Context) GetProjectsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsFilterOutput)
}

// GetProjectsFilterArrayInput is an input type that accepts GetProjectsFilterArray and GetProjectsFilterArrayOutput values.
// You can construct a concrete instance of `GetProjectsFilterArrayInput` via:
//
//          GetProjectsFilterArray{ GetProjectsFilterArgs{...} }
type GetProjectsFilterArrayInput interface {
	pulumi.Input

	ToGetProjectsFilterArrayOutput() GetProjectsFilterArrayOutput
	ToGetProjectsFilterArrayOutputWithContext(context.Context) GetProjectsFilterArrayOutput
}

type GetProjectsFilterArray []GetProjectsFilterInput

func (GetProjectsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsFilter)(nil)).Elem()
}

func (i GetProjectsFilterArray) ToGetProjectsFilterArrayOutput() GetProjectsFilterArrayOutput {
	return i.ToGetProjectsFilterArrayOutputWithContext(context.Background())
}

func (i GetProjectsFilterArray) ToGetProjectsFilterArrayOutputWithContext(ctx context.Context) GetProjectsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsFilterArrayOutput)
}

type GetProjectsFilterOutput struct{ *pulumi.OutputState }

func (GetProjectsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsFilter)(nil)).Elem()
}

func (o GetProjectsFilterOutput) ToGetProjectsFilterOutput() GetProjectsFilterOutput {
	return o
}

func (o GetProjectsFilterOutput) ToGetProjectsFilterOutputWithContext(ctx context.Context) GetProjectsFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetProjectsFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectsFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the projects by this key. This may be one of `name`,
// `purpose`, `description`, `environment`, or `isDefault`.
func (o GetProjectsFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetProjectsFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectsFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// A list of values to match against the `key` field. Only retrieves projects
// where the `key` field takes on one or more of the values provided here.
func (o GetProjectsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetProjectsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsFilter)(nil)).Elem()
}

func (o GetProjectsFilterArrayOutput) ToGetProjectsFilterArrayOutput() GetProjectsFilterArrayOutput {
	return o
}

func (o GetProjectsFilterArrayOutput) ToGetProjectsFilterArrayOutputWithContext(ctx context.Context) GetProjectsFilterArrayOutput {
	return o
}

func (o GetProjectsFilterArrayOutput) Index(i pulumi.IntInput) GetProjectsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsFilter {
		return vs[0].([]GetProjectsFilter)[vs[1].(int)]
	}).(GetProjectsFilterOutput)
}

type GetProjectsProject struct {
	// The date and time when the project was created, (ISO8601)
	CreatedAt string `pulumi:"createdAt"`
	// The description of the project
	Description string `pulumi:"description"`
	// The environment of the project's resources. The possible values are: `Development`, `Staging`, `Production`.
	Environment string `pulumi:"environment"`
	// The ID of the project
	Id        string `pulumi:"id"`
	IsDefault bool   `pulumi:"isDefault"`
	// The name of the project
	Name string `pulumi:"name"`
	// The ID of the project owner
	OwnerId int `pulumi:"ownerId"`
	// The unique universal identifier of the project owner
	OwnerUuid string `pulumi:"ownerUuid"`
	// The purpose of the project (Default: "Web Application")
	Purpose string `pulumi:"purpose"`
	// A set of uniform resource names (URNs) for the resources associated with the project
	Resources []string `pulumi:"resources"`
	// The date and time when the project was last updated, (ISO8601)
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//          GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	// The date and time when the project was created, (ISO8601)
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the project
	Description pulumi.StringInput `pulumi:"description"`
	// The environment of the project's resources. The possible values are: `Development`, `Staging`, `Production`.
	Environment pulumi.StringInput `pulumi:"environment"`
	// The ID of the project
	Id        pulumi.StringInput `pulumi:"id"`
	IsDefault pulumi.BoolInput   `pulumi:"isDefault"`
	// The name of the project
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project owner
	OwnerId pulumi.IntInput `pulumi:"ownerId"`
	// The unique universal identifier of the project owner
	OwnerUuid pulumi.StringInput `pulumi:"ownerUuid"`
	// The purpose of the project (Default: "Web Application")
	Purpose pulumi.StringInput `pulumi:"purpose"`
	// A set of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// The date and time when the project was last updated, (ISO8601)
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//          GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

// The date and time when the project was created, (ISO8601)
func (o GetProjectsProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the project
func (o GetProjectsProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Description }).(pulumi.StringOutput)
}

// The environment of the project's resources. The possible values are: `Development`, `Staging`, `Production`.
func (o GetProjectsProjectOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Environment }).(pulumi.StringOutput)
}

// The ID of the project
func (o GetProjectsProjectOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The name of the project
func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project owner
func (o GetProjectsProjectOutput) OwnerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.OwnerId }).(pulumi.IntOutput)
}

// The unique universal identifier of the project owner
func (o GetProjectsProjectOutput) OwnerUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.OwnerUuid }).(pulumi.StringOutput)
}

// The purpose of the project (Default: "Web Application")
func (o GetProjectsProjectOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Purpose }).(pulumi.StringOutput)
}

// A set of uniform resource names (URNs) for the resources associated with the project
func (o GetProjectsProjectOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectsProject) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// The date and time when the project was last updated, (ISO8601)
func (o GetProjectsProjectOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetProjectsSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the projects by this key. This may be one of `name`,
	// `purpose`, `description`, or `environment`.
	Key string `pulumi:"key"`
}

// GetProjectsSortInput is an input type that accepts GetProjectsSortArgs and GetProjectsSortOutput values.
// You can construct a concrete instance of `GetProjectsSortInput` via:
//
//          GetProjectsSortArgs{...}
type GetProjectsSortInput interface {
	pulumi.Input

	ToGetProjectsSortOutput() GetProjectsSortOutput
	ToGetProjectsSortOutputWithContext(context.Context) GetProjectsSortOutput
}

type GetProjectsSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the projects by this key. This may be one of `name`,
	// `purpose`, `description`, or `environment`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetProjectsSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsSort)(nil)).Elem()
}

func (i GetProjectsSortArgs) ToGetProjectsSortOutput() GetProjectsSortOutput {
	return i.ToGetProjectsSortOutputWithContext(context.Background())
}

func (i GetProjectsSortArgs) ToGetProjectsSortOutputWithContext(ctx context.Context) GetProjectsSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsSortOutput)
}

// GetProjectsSortArrayInput is an input type that accepts GetProjectsSortArray and GetProjectsSortArrayOutput values.
// You can construct a concrete instance of `GetProjectsSortArrayInput` via:
//
//          GetProjectsSortArray{ GetProjectsSortArgs{...} }
type GetProjectsSortArrayInput interface {
	pulumi.Input

	ToGetProjectsSortArrayOutput() GetProjectsSortArrayOutput
	ToGetProjectsSortArrayOutputWithContext(context.Context) GetProjectsSortArrayOutput
}

type GetProjectsSortArray []GetProjectsSortInput

func (GetProjectsSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsSort)(nil)).Elem()
}

func (i GetProjectsSortArray) ToGetProjectsSortArrayOutput() GetProjectsSortArrayOutput {
	return i.ToGetProjectsSortArrayOutputWithContext(context.Background())
}

func (i GetProjectsSortArray) ToGetProjectsSortArrayOutputWithContext(ctx context.Context) GetProjectsSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsSortArrayOutput)
}

type GetProjectsSortOutput struct{ *pulumi.OutputState }

func (GetProjectsSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsSort)(nil)).Elem()
}

func (o GetProjectsSortOutput) ToGetProjectsSortOutput() GetProjectsSortOutput {
	return o
}

func (o GetProjectsSortOutput) ToGetProjectsSortOutputWithContext(ctx context.Context) GetProjectsSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetProjectsSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectsSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the projects by this key. This may be one of `name`,
// `purpose`, `description`, or `environment`.
func (o GetProjectsSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetProjectsSortArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsSort)(nil)).Elem()
}

func (o GetProjectsSortArrayOutput) ToGetProjectsSortArrayOutput() GetProjectsSortArrayOutput {
	return o
}

func (o GetProjectsSortArrayOutput) ToGetProjectsSortArrayOutputWithContext(ctx context.Context) GetProjectsSortArrayOutput {
	return o
}

func (o GetProjectsSortArrayOutput) Index(i pulumi.IntInput) GetProjectsSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsSort {
		return vs[0].([]GetProjectsSort)[vs[1].(int)]
	}).(GetProjectsSortOutput)
}

type GetRegionsFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the regions by this key. This may be one of `slug`,
	// `name`, `available`, `features`, or `sizes`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves regions
	// where the `key` field takes on one or more of the values provided here.
	Values []string `pulumi:"values"`
}

// GetRegionsFilterInput is an input type that accepts GetRegionsFilterArgs and GetRegionsFilterOutput values.
// You can construct a concrete instance of `GetRegionsFilterInput` via:
//
//          GetRegionsFilterArgs{...}
type GetRegionsFilterInput interface {
	pulumi.Input

	ToGetRegionsFilterOutput() GetRegionsFilterOutput
	ToGetRegionsFilterOutputWithContext(context.Context) GetRegionsFilterOutput
}

type GetRegionsFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the regions by this key. This may be one of `slug`,
	// `name`, `available`, `features`, or `sizes`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves regions
	// where the `key` field takes on one or more of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetRegionsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsFilter)(nil)).Elem()
}

func (i GetRegionsFilterArgs) ToGetRegionsFilterOutput() GetRegionsFilterOutput {
	return i.ToGetRegionsFilterOutputWithContext(context.Background())
}

func (i GetRegionsFilterArgs) ToGetRegionsFilterOutputWithContext(ctx context.Context) GetRegionsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsFilterOutput)
}

// GetRegionsFilterArrayInput is an input type that accepts GetRegionsFilterArray and GetRegionsFilterArrayOutput values.
// You can construct a concrete instance of `GetRegionsFilterArrayInput` via:
//
//          GetRegionsFilterArray{ GetRegionsFilterArgs{...} }
type GetRegionsFilterArrayInput interface {
	pulumi.Input

	ToGetRegionsFilterArrayOutput() GetRegionsFilterArrayOutput
	ToGetRegionsFilterArrayOutputWithContext(context.Context) GetRegionsFilterArrayOutput
}

type GetRegionsFilterArray []GetRegionsFilterInput

func (GetRegionsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsFilter)(nil)).Elem()
}

func (i GetRegionsFilterArray) ToGetRegionsFilterArrayOutput() GetRegionsFilterArrayOutput {
	return i.ToGetRegionsFilterArrayOutputWithContext(context.Background())
}

func (i GetRegionsFilterArray) ToGetRegionsFilterArrayOutputWithContext(ctx context.Context) GetRegionsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsFilterArrayOutput)
}

type GetRegionsFilterOutput struct{ *pulumi.OutputState }

func (GetRegionsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsFilter)(nil)).Elem()
}

func (o GetRegionsFilterOutput) ToGetRegionsFilterOutput() GetRegionsFilterOutput {
	return o
}

func (o GetRegionsFilterOutput) ToGetRegionsFilterOutputWithContext(ctx context.Context) GetRegionsFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetRegionsFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegionsFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the regions by this key. This may be one of `slug`,
// `name`, `available`, `features`, or `sizes`.
func (o GetRegionsFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetRegionsFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionsFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// A list of values to match against the `key` field. Only retrieves regions
// where the `key` field takes on one or more of the values provided here.
func (o GetRegionsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetRegionsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsFilter)(nil)).Elem()
}

func (o GetRegionsFilterArrayOutput) ToGetRegionsFilterArrayOutput() GetRegionsFilterArrayOutput {
	return o
}

func (o GetRegionsFilterArrayOutput) ToGetRegionsFilterArrayOutputWithContext(ctx context.Context) GetRegionsFilterArrayOutput {
	return o
}

func (o GetRegionsFilterArrayOutput) Index(i pulumi.IntInput) GetRegionsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsFilter {
		return vs[0].([]GetRegionsFilter)[vs[1].(int)]
	}).(GetRegionsFilterOutput)
}

type GetRegionsRegion struct {
	// A boolean value that represents whether new Droplets can be created in this region.
	Available bool `pulumi:"available"`
	// A set of features available in this region.
	Features []string `pulumi:"features"`
	// The display name of the region.
	Name string `pulumi:"name"`
	// A set of identifying slugs for the Droplet sizes available in this region.
	Sizes []string `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug string `pulumi:"slug"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//          GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// A boolean value that represents whether new Droplets can be created in this region.
	Available pulumi.BoolInput `pulumi:"available"`
	// A set of features available in this region.
	Features pulumi.StringArrayInput `pulumi:"features"`
	// The display name of the region.
	Name pulumi.StringInput `pulumi:"name"`
	// A set of identifying slugs for the Droplet sizes available in this region.
	Sizes pulumi.StringArrayInput `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//          GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// A boolean value that represents whether new Droplets can be created in this region.
func (o GetRegionsRegionOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRegionsRegion) bool { return v.Available }).(pulumi.BoolOutput)
}

// A set of features available in this region.
func (o GetRegionsRegionOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionsRegion) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The display name of the region.
func (o GetRegionsRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Name }).(pulumi.StringOutput)
}

// A set of identifying slugs for the Droplet sizes available in this region.
func (o GetRegionsRegionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionsRegion) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o GetRegionsRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetRegionsSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the regions by this key. This may be one of `slug`,
	// `name`, or `available`.
	Key string `pulumi:"key"`
}

// GetRegionsSortInput is an input type that accepts GetRegionsSortArgs and GetRegionsSortOutput values.
// You can construct a concrete instance of `GetRegionsSortInput` via:
//
//          GetRegionsSortArgs{...}
type GetRegionsSortInput interface {
	pulumi.Input

	ToGetRegionsSortOutput() GetRegionsSortOutput
	ToGetRegionsSortOutputWithContext(context.Context) GetRegionsSortOutput
}

type GetRegionsSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the regions by this key. This may be one of `slug`,
	// `name`, or `available`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetRegionsSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsSort)(nil)).Elem()
}

func (i GetRegionsSortArgs) ToGetRegionsSortOutput() GetRegionsSortOutput {
	return i.ToGetRegionsSortOutputWithContext(context.Background())
}

func (i GetRegionsSortArgs) ToGetRegionsSortOutputWithContext(ctx context.Context) GetRegionsSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsSortOutput)
}

// GetRegionsSortArrayInput is an input type that accepts GetRegionsSortArray and GetRegionsSortArrayOutput values.
// You can construct a concrete instance of `GetRegionsSortArrayInput` via:
//
//          GetRegionsSortArray{ GetRegionsSortArgs{...} }
type GetRegionsSortArrayInput interface {
	pulumi.Input

	ToGetRegionsSortArrayOutput() GetRegionsSortArrayOutput
	ToGetRegionsSortArrayOutputWithContext(context.Context) GetRegionsSortArrayOutput
}

type GetRegionsSortArray []GetRegionsSortInput

func (GetRegionsSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsSort)(nil)).Elem()
}

func (i GetRegionsSortArray) ToGetRegionsSortArrayOutput() GetRegionsSortArrayOutput {
	return i.ToGetRegionsSortArrayOutputWithContext(context.Background())
}

func (i GetRegionsSortArray) ToGetRegionsSortArrayOutputWithContext(ctx context.Context) GetRegionsSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsSortArrayOutput)
}

type GetRegionsSortOutput struct{ *pulumi.OutputState }

func (GetRegionsSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsSort)(nil)).Elem()
}

func (o GetRegionsSortOutput) ToGetRegionsSortOutput() GetRegionsSortOutput {
	return o
}

func (o GetRegionsSortOutput) ToGetRegionsSortOutputWithContext(ctx context.Context) GetRegionsSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetRegionsSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionsSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the regions by this key. This may be one of `slug`,
// `name`, or `available`.
func (o GetRegionsSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetRegionsSortArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsSort)(nil)).Elem()
}

func (o GetRegionsSortArrayOutput) ToGetRegionsSortArrayOutput() GetRegionsSortArrayOutput {
	return o
}

func (o GetRegionsSortArrayOutput) ToGetRegionsSortArrayOutputWithContext(ctx context.Context) GetRegionsSortArrayOutput {
	return o
}

func (o GetRegionsSortArrayOutput) Index(i pulumi.IntInput) GetRegionsSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsSort {
		return vs[0].([]GetRegionsSort)[vs[1].(int)]
	}).(GetRegionsSortOutput)
}

type GetSizesFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the sizes by this key. This may be one of `slug`,
	// `regions`, `memory`, `vcpus`, `disk`, `transfer`, `priceMonthly`,
	// `priceHourly`, or `available`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves sizes which keys has value that matches
	// one of the values provided here.
	Values []string `pulumi:"values"`
}

// GetSizesFilterInput is an input type that accepts GetSizesFilterArgs and GetSizesFilterOutput values.
// You can construct a concrete instance of `GetSizesFilterInput` via:
//
//          GetSizesFilterArgs{...}
type GetSizesFilterInput interface {
	pulumi.Input

	ToGetSizesFilterOutput() GetSizesFilterOutput
	ToGetSizesFilterOutputWithContext(context.Context) GetSizesFilterOutput
}

type GetSizesFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the sizes by this key. This may be one of `slug`,
	// `regions`, `memory`, `vcpus`, `disk`, `transfer`, `priceMonthly`,
	// `priceHourly`, or `available`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves sizes which keys has value that matches
	// one of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSizesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizesFilter)(nil)).Elem()
}

func (i GetSizesFilterArgs) ToGetSizesFilterOutput() GetSizesFilterOutput {
	return i.ToGetSizesFilterOutputWithContext(context.Background())
}

func (i GetSizesFilterArgs) ToGetSizesFilterOutputWithContext(ctx context.Context) GetSizesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizesFilterOutput)
}

// GetSizesFilterArrayInput is an input type that accepts GetSizesFilterArray and GetSizesFilterArrayOutput values.
// You can construct a concrete instance of `GetSizesFilterArrayInput` via:
//
//          GetSizesFilterArray{ GetSizesFilterArgs{...} }
type GetSizesFilterArrayInput interface {
	pulumi.Input

	ToGetSizesFilterArrayOutput() GetSizesFilterArrayOutput
	ToGetSizesFilterArrayOutputWithContext(context.Context) GetSizesFilterArrayOutput
}

type GetSizesFilterArray []GetSizesFilterInput

func (GetSizesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizesFilter)(nil)).Elem()
}

func (i GetSizesFilterArray) ToGetSizesFilterArrayOutput() GetSizesFilterArrayOutput {
	return i.ToGetSizesFilterArrayOutputWithContext(context.Background())
}

func (i GetSizesFilterArray) ToGetSizesFilterArrayOutputWithContext(ctx context.Context) GetSizesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizesFilterArrayOutput)
}

type GetSizesFilterOutput struct{ *pulumi.OutputState }

func (GetSizesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizesFilter)(nil)).Elem()
}

func (o GetSizesFilterOutput) ToGetSizesFilterOutput() GetSizesFilterOutput {
	return o
}

func (o GetSizesFilterOutput) ToGetSizesFilterOutputWithContext(ctx context.Context) GetSizesFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetSizesFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSizesFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the sizes by this key. This may be one of `slug`,
// `regions`, `memory`, `vcpus`, `disk`, `transfer`, `priceMonthly`,
// `priceHourly`, or `available`.
func (o GetSizesFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizesFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetSizesFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSizesFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves sizes which keys has value that matches
// one of the values provided here.
func (o GetSizesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSizesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSizesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSizesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizesFilter)(nil)).Elem()
}

func (o GetSizesFilterArrayOutput) ToGetSizesFilterArrayOutput() GetSizesFilterArrayOutput {
	return o
}

func (o GetSizesFilterArrayOutput) ToGetSizesFilterArrayOutputWithContext(ctx context.Context) GetSizesFilterArrayOutput {
	return o
}

func (o GetSizesFilterArrayOutput) Index(i pulumi.IntInput) GetSizesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSizesFilter {
		return vs[0].([]GetSizesFilter)[vs[1].(int)]
	}).(GetSizesFilterOutput)
}

type GetSizesSize struct {
	// This represents whether new Droplets can be created with this size.
	Available bool `pulumi:"available"`
	// The amount of disk space set aside for Droplets of this size. The value is measured in gigabytes.
	Disk int `pulumi:"disk"`
	// The amount of RAM allocated to Droplets created of this size. The value is measured in megabytes.
	Memory int `pulumi:"memory"`
	// The hourly cost of Droplets created in this size as measured hourly. The value is measured in US dollars.
	PriceHourly float64 `pulumi:"priceHourly"`
	// The monthly cost of Droplets created in this size if they are kept for an entire month. The value is measured in US dollars.
	PriceMonthly float64 `pulumi:"priceMonthly"`
	// List of region slugs where Droplets can be created in this size.
	Regions []string `pulumi:"regions"`
	// A human-readable string that is used to uniquely identify each size.
	Slug string `pulumi:"slug"`
	// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
	Transfer float64 `pulumi:"transfer"`
	// The number of CPUs allocated to Droplets of this size.
	Vcpus int `pulumi:"vcpus"`
}

// GetSizesSizeInput is an input type that accepts GetSizesSizeArgs and GetSizesSizeOutput values.
// You can construct a concrete instance of `GetSizesSizeInput` via:
//
//          GetSizesSizeArgs{...}
type GetSizesSizeInput interface {
	pulumi.Input

	ToGetSizesSizeOutput() GetSizesSizeOutput
	ToGetSizesSizeOutputWithContext(context.Context) GetSizesSizeOutput
}

type GetSizesSizeArgs struct {
	// This represents whether new Droplets can be created with this size.
	Available pulumi.BoolInput `pulumi:"available"`
	// The amount of disk space set aside for Droplets of this size. The value is measured in gigabytes.
	Disk pulumi.IntInput `pulumi:"disk"`
	// The amount of RAM allocated to Droplets created of this size. The value is measured in megabytes.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The hourly cost of Droplets created in this size as measured hourly. The value is measured in US dollars.
	PriceHourly pulumi.Float64Input `pulumi:"priceHourly"`
	// The monthly cost of Droplets created in this size if they are kept for an entire month. The value is measured in US dollars.
	PriceMonthly pulumi.Float64Input `pulumi:"priceMonthly"`
	// List of region slugs where Droplets can be created in this size.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// A human-readable string that is used to uniquely identify each size.
	Slug pulumi.StringInput `pulumi:"slug"`
	// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
	Transfer pulumi.Float64Input `pulumi:"transfer"`
	// The number of CPUs allocated to Droplets of this size.
	Vcpus pulumi.IntInput `pulumi:"vcpus"`
}

func (GetSizesSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizesSize)(nil)).Elem()
}

func (i GetSizesSizeArgs) ToGetSizesSizeOutput() GetSizesSizeOutput {
	return i.ToGetSizesSizeOutputWithContext(context.Background())
}

func (i GetSizesSizeArgs) ToGetSizesSizeOutputWithContext(ctx context.Context) GetSizesSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizesSizeOutput)
}

// GetSizesSizeArrayInput is an input type that accepts GetSizesSizeArray and GetSizesSizeArrayOutput values.
// You can construct a concrete instance of `GetSizesSizeArrayInput` via:
//
//          GetSizesSizeArray{ GetSizesSizeArgs{...} }
type GetSizesSizeArrayInput interface {
	pulumi.Input

	ToGetSizesSizeArrayOutput() GetSizesSizeArrayOutput
	ToGetSizesSizeArrayOutputWithContext(context.Context) GetSizesSizeArrayOutput
}

type GetSizesSizeArray []GetSizesSizeInput

func (GetSizesSizeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizesSize)(nil)).Elem()
}

func (i GetSizesSizeArray) ToGetSizesSizeArrayOutput() GetSizesSizeArrayOutput {
	return i.ToGetSizesSizeArrayOutputWithContext(context.Background())
}

func (i GetSizesSizeArray) ToGetSizesSizeArrayOutputWithContext(ctx context.Context) GetSizesSizeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizesSizeArrayOutput)
}

type GetSizesSizeOutput struct{ *pulumi.OutputState }

func (GetSizesSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizesSize)(nil)).Elem()
}

func (o GetSizesSizeOutput) ToGetSizesSizeOutput() GetSizesSizeOutput {
	return o
}

func (o GetSizesSizeOutput) ToGetSizesSizeOutputWithContext(ctx context.Context) GetSizesSizeOutput {
	return o
}

// This represents whether new Droplets can be created with this size.
func (o GetSizesSizeOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSizesSize) bool { return v.Available }).(pulumi.BoolOutput)
}

// The amount of disk space set aside for Droplets of this size. The value is measured in gigabytes.
func (o GetSizesSizeOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizesSize) int { return v.Disk }).(pulumi.IntOutput)
}

// The amount of RAM allocated to Droplets created of this size. The value is measured in megabytes.
func (o GetSizesSizeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizesSize) int { return v.Memory }).(pulumi.IntOutput)
}

// The hourly cost of Droplets created in this size as measured hourly. The value is measured in US dollars.
func (o GetSizesSizeOutput) PriceHourly() pulumi.Float64Output {
	return o.ApplyT(func(v GetSizesSize) float64 { return v.PriceHourly }).(pulumi.Float64Output)
}

// The monthly cost of Droplets created in this size if they are kept for an entire month. The value is measured in US dollars.
func (o GetSizesSizeOutput) PriceMonthly() pulumi.Float64Output {
	return o.ApplyT(func(v GetSizesSize) float64 { return v.PriceMonthly }).(pulumi.Float64Output)
}

// List of region slugs where Droplets can be created in this size.
func (o GetSizesSizeOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSizesSize) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used to uniquely identify each size.
func (o GetSizesSizeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizesSize) string { return v.Slug }).(pulumi.StringOutput)
}

// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
func (o GetSizesSizeOutput) Transfer() pulumi.Float64Output {
	return o.ApplyT(func(v GetSizesSize) float64 { return v.Transfer }).(pulumi.Float64Output)
}

// The number of CPUs allocated to Droplets of this size.
func (o GetSizesSizeOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetSizesSize) int { return v.Vcpus }).(pulumi.IntOutput)
}

type GetSizesSizeArrayOutput struct{ *pulumi.OutputState }

func (GetSizesSizeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizesSize)(nil)).Elem()
}

func (o GetSizesSizeArrayOutput) ToGetSizesSizeArrayOutput() GetSizesSizeArrayOutput {
	return o
}

func (o GetSizesSizeArrayOutput) ToGetSizesSizeArrayOutputWithContext(ctx context.Context) GetSizesSizeArrayOutput {
	return o
}

func (o GetSizesSizeArrayOutput) Index(i pulumi.IntInput) GetSizesSizeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSizesSize {
		return vs[0].([]GetSizesSize)[vs[1].(int)]
	}).(GetSizesSizeOutput)
}

type GetSizesSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the sizes by this key. This may be one of `slug`,
	// `memory`, `vcpus`, `disk`, `transfer`, `priceMonthly`, or `priceHourly`.
	Key string `pulumi:"key"`
}

// GetSizesSortInput is an input type that accepts GetSizesSortArgs and GetSizesSortOutput values.
// You can construct a concrete instance of `GetSizesSortInput` via:
//
//          GetSizesSortArgs{...}
type GetSizesSortInput interface {
	pulumi.Input

	ToGetSizesSortOutput() GetSizesSortOutput
	ToGetSizesSortOutputWithContext(context.Context) GetSizesSortOutput
}

type GetSizesSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the sizes by this key. This may be one of `slug`,
	// `memory`, `vcpus`, `disk`, `transfer`, `priceMonthly`, or `priceHourly`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetSizesSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizesSort)(nil)).Elem()
}

func (i GetSizesSortArgs) ToGetSizesSortOutput() GetSizesSortOutput {
	return i.ToGetSizesSortOutputWithContext(context.Background())
}

func (i GetSizesSortArgs) ToGetSizesSortOutputWithContext(ctx context.Context) GetSizesSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizesSortOutput)
}

// GetSizesSortArrayInput is an input type that accepts GetSizesSortArray and GetSizesSortArrayOutput values.
// You can construct a concrete instance of `GetSizesSortArrayInput` via:
//
//          GetSizesSortArray{ GetSizesSortArgs{...} }
type GetSizesSortArrayInput interface {
	pulumi.Input

	ToGetSizesSortArrayOutput() GetSizesSortArrayOutput
	ToGetSizesSortArrayOutputWithContext(context.Context) GetSizesSortArrayOutput
}

type GetSizesSortArray []GetSizesSortInput

func (GetSizesSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizesSort)(nil)).Elem()
}

func (i GetSizesSortArray) ToGetSizesSortArrayOutput() GetSizesSortArrayOutput {
	return i.ToGetSizesSortArrayOutputWithContext(context.Background())
}

func (i GetSizesSortArray) ToGetSizesSortArrayOutputWithContext(ctx context.Context) GetSizesSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSizesSortArrayOutput)
}

type GetSizesSortOutput struct{ *pulumi.OutputState }

func (GetSizesSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSizesSort)(nil)).Elem()
}

func (o GetSizesSortOutput) ToGetSizesSortOutput() GetSizesSortOutput {
	return o
}

func (o GetSizesSortOutput) ToGetSizesSortOutputWithContext(ctx context.Context) GetSizesSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetSizesSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSizesSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the sizes by this key. This may be one of `slug`,
// `memory`, `vcpus`, `disk`, `transfer`, `priceMonthly`, or `priceHourly`.
func (o GetSizesSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSizesSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetSizesSortArrayOutput struct{ *pulumi.OutputState }

func (GetSizesSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSizesSort)(nil)).Elem()
}

func (o GetSizesSortArrayOutput) ToGetSizesSortArrayOutput() GetSizesSortArrayOutput {
	return o
}

func (o GetSizesSortArrayOutput) ToGetSizesSortArrayOutputWithContext(ctx context.Context) GetSizesSortArrayOutput {
	return o
}

func (o GetSizesSortArrayOutput) Index(i pulumi.IntInput) GetSizesSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSizesSort {
		return vs[0].([]GetSizesSort)[vs[1].(int)]
	}).(GetSizesSortOutput)
}

type GetSpacesBucketsBucket struct {
	// The FQDN of the bucket (e.g. bucket-name.nyc3.digitaloceanspaces.com)
	BucketDomainName string `pulumi:"bucketDomainName"`
	// The name of the Spaces bucket
	Name string `pulumi:"name"`
	// The slug of the region where the bucket is stored.
	Region string `pulumi:"region"`
	// The uniform resource name of the bucket
	Urn string `pulumi:"urn"`
}

// GetSpacesBucketsBucketInput is an input type that accepts GetSpacesBucketsBucketArgs and GetSpacesBucketsBucketOutput values.
// You can construct a concrete instance of `GetSpacesBucketsBucketInput` via:
//
//          GetSpacesBucketsBucketArgs{...}
type GetSpacesBucketsBucketInput interface {
	pulumi.Input

	ToGetSpacesBucketsBucketOutput() GetSpacesBucketsBucketOutput
	ToGetSpacesBucketsBucketOutputWithContext(context.Context) GetSpacesBucketsBucketOutput
}

type GetSpacesBucketsBucketArgs struct {
	// The FQDN of the bucket (e.g. bucket-name.nyc3.digitaloceanspaces.com)
	BucketDomainName pulumi.StringInput `pulumi:"bucketDomainName"`
	// The name of the Spaces bucket
	Name pulumi.StringInput `pulumi:"name"`
	// The slug of the region where the bucket is stored.
	Region pulumi.StringInput `pulumi:"region"`
	// The uniform resource name of the bucket
	Urn pulumi.StringInput `pulumi:"urn"`
}

func (GetSpacesBucketsBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpacesBucketsBucket)(nil)).Elem()
}

func (i GetSpacesBucketsBucketArgs) ToGetSpacesBucketsBucketOutput() GetSpacesBucketsBucketOutput {
	return i.ToGetSpacesBucketsBucketOutputWithContext(context.Background())
}

func (i GetSpacesBucketsBucketArgs) ToGetSpacesBucketsBucketOutputWithContext(ctx context.Context) GetSpacesBucketsBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpacesBucketsBucketOutput)
}

// GetSpacesBucketsBucketArrayInput is an input type that accepts GetSpacesBucketsBucketArray and GetSpacesBucketsBucketArrayOutput values.
// You can construct a concrete instance of `GetSpacesBucketsBucketArrayInput` via:
//
//          GetSpacesBucketsBucketArray{ GetSpacesBucketsBucketArgs{...} }
type GetSpacesBucketsBucketArrayInput interface {
	pulumi.Input

	ToGetSpacesBucketsBucketArrayOutput() GetSpacesBucketsBucketArrayOutput
	ToGetSpacesBucketsBucketArrayOutputWithContext(context.Context) GetSpacesBucketsBucketArrayOutput
}

type GetSpacesBucketsBucketArray []GetSpacesBucketsBucketInput

func (GetSpacesBucketsBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpacesBucketsBucket)(nil)).Elem()
}

func (i GetSpacesBucketsBucketArray) ToGetSpacesBucketsBucketArrayOutput() GetSpacesBucketsBucketArrayOutput {
	return i.ToGetSpacesBucketsBucketArrayOutputWithContext(context.Background())
}

func (i GetSpacesBucketsBucketArray) ToGetSpacesBucketsBucketArrayOutputWithContext(ctx context.Context) GetSpacesBucketsBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpacesBucketsBucketArrayOutput)
}

type GetSpacesBucketsBucketOutput struct{ *pulumi.OutputState }

func (GetSpacesBucketsBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpacesBucketsBucket)(nil)).Elem()
}

func (o GetSpacesBucketsBucketOutput) ToGetSpacesBucketsBucketOutput() GetSpacesBucketsBucketOutput {
	return o
}

func (o GetSpacesBucketsBucketOutput) ToGetSpacesBucketsBucketOutputWithContext(ctx context.Context) GetSpacesBucketsBucketOutput {
	return o
}

// The FQDN of the bucket (e.g. bucket-name.nyc3.digitaloceanspaces.com)
func (o GetSpacesBucketsBucketOutput) BucketDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpacesBucketsBucket) string { return v.BucketDomainName }).(pulumi.StringOutput)
}

// The name of the Spaces bucket
func (o GetSpacesBucketsBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpacesBucketsBucket) string { return v.Name }).(pulumi.StringOutput)
}

// The slug of the region where the bucket is stored.
func (o GetSpacesBucketsBucketOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpacesBucketsBucket) string { return v.Region }).(pulumi.StringOutput)
}

// The uniform resource name of the bucket
func (o GetSpacesBucketsBucketOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpacesBucketsBucket) string { return v.Urn }).(pulumi.StringOutput)
}

type GetSpacesBucketsBucketArrayOutput struct{ *pulumi.OutputState }

func (GetSpacesBucketsBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpacesBucketsBucket)(nil)).Elem()
}

func (o GetSpacesBucketsBucketArrayOutput) ToGetSpacesBucketsBucketArrayOutput() GetSpacesBucketsBucketArrayOutput {
	return o
}

func (o GetSpacesBucketsBucketArrayOutput) ToGetSpacesBucketsBucketArrayOutputWithContext(ctx context.Context) GetSpacesBucketsBucketArrayOutput {
	return o
}

func (o GetSpacesBucketsBucketArrayOutput) Index(i pulumi.IntInput) GetSpacesBucketsBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpacesBucketsBucket {
		return vs[0].([]GetSpacesBucketsBucket)[vs[1].(int)]
	}).(GetSpacesBucketsBucketOutput)
}

type GetSpacesBucketsFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the images by this key. This may be one of `bucketDomainName`, `name`, `region`, or `urn`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves Spaces buckets
	// where the `key` field takes on one or more of the values provided here.
	Values []string `pulumi:"values"`
}

// GetSpacesBucketsFilterInput is an input type that accepts GetSpacesBucketsFilterArgs and GetSpacesBucketsFilterOutput values.
// You can construct a concrete instance of `GetSpacesBucketsFilterInput` via:
//
//          GetSpacesBucketsFilterArgs{...}
type GetSpacesBucketsFilterInput interface {
	pulumi.Input

	ToGetSpacesBucketsFilterOutput() GetSpacesBucketsFilterOutput
	ToGetSpacesBucketsFilterOutputWithContext(context.Context) GetSpacesBucketsFilterOutput
}

type GetSpacesBucketsFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the images by this key. This may be one of `bucketDomainName`, `name`, `region`, or `urn`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// A list of values to match against the `key` field. Only retrieves Spaces buckets
	// where the `key` field takes on one or more of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSpacesBucketsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpacesBucketsFilter)(nil)).Elem()
}

func (i GetSpacesBucketsFilterArgs) ToGetSpacesBucketsFilterOutput() GetSpacesBucketsFilterOutput {
	return i.ToGetSpacesBucketsFilterOutputWithContext(context.Background())
}

func (i GetSpacesBucketsFilterArgs) ToGetSpacesBucketsFilterOutputWithContext(ctx context.Context) GetSpacesBucketsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpacesBucketsFilterOutput)
}

// GetSpacesBucketsFilterArrayInput is an input type that accepts GetSpacesBucketsFilterArray and GetSpacesBucketsFilterArrayOutput values.
// You can construct a concrete instance of `GetSpacesBucketsFilterArrayInput` via:
//
//          GetSpacesBucketsFilterArray{ GetSpacesBucketsFilterArgs{...} }
type GetSpacesBucketsFilterArrayInput interface {
	pulumi.Input

	ToGetSpacesBucketsFilterArrayOutput() GetSpacesBucketsFilterArrayOutput
	ToGetSpacesBucketsFilterArrayOutputWithContext(context.Context) GetSpacesBucketsFilterArrayOutput
}

type GetSpacesBucketsFilterArray []GetSpacesBucketsFilterInput

func (GetSpacesBucketsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpacesBucketsFilter)(nil)).Elem()
}

func (i GetSpacesBucketsFilterArray) ToGetSpacesBucketsFilterArrayOutput() GetSpacesBucketsFilterArrayOutput {
	return i.ToGetSpacesBucketsFilterArrayOutputWithContext(context.Background())
}

func (i GetSpacesBucketsFilterArray) ToGetSpacesBucketsFilterArrayOutputWithContext(ctx context.Context) GetSpacesBucketsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpacesBucketsFilterArrayOutput)
}

type GetSpacesBucketsFilterOutput struct{ *pulumi.OutputState }

func (GetSpacesBucketsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpacesBucketsFilter)(nil)).Elem()
}

func (o GetSpacesBucketsFilterOutput) ToGetSpacesBucketsFilterOutput() GetSpacesBucketsFilterOutput {
	return o
}

func (o GetSpacesBucketsFilterOutput) ToGetSpacesBucketsFilterOutputWithContext(ctx context.Context) GetSpacesBucketsFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetSpacesBucketsFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSpacesBucketsFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the images by this key. This may be one of `bucketDomainName`, `name`, `region`, or `urn`.
func (o GetSpacesBucketsFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpacesBucketsFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetSpacesBucketsFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSpacesBucketsFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// A list of values to match against the `key` field. Only retrieves Spaces buckets
// where the `key` field takes on one or more of the values provided here.
func (o GetSpacesBucketsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpacesBucketsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSpacesBucketsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSpacesBucketsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpacesBucketsFilter)(nil)).Elem()
}

func (o GetSpacesBucketsFilterArrayOutput) ToGetSpacesBucketsFilterArrayOutput() GetSpacesBucketsFilterArrayOutput {
	return o
}

func (o GetSpacesBucketsFilterArrayOutput) ToGetSpacesBucketsFilterArrayOutputWithContext(ctx context.Context) GetSpacesBucketsFilterArrayOutput {
	return o
}

func (o GetSpacesBucketsFilterArrayOutput) Index(i pulumi.IntInput) GetSpacesBucketsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpacesBucketsFilter {
		return vs[0].([]GetSpacesBucketsFilter)[vs[1].(int)]
	}).(GetSpacesBucketsFilterOutput)
}

type GetSpacesBucketsSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the images by this key. This may be one of `bucketDomainName`, `name`, `region`, or `urn`.
	Key string `pulumi:"key"`
}

// GetSpacesBucketsSortInput is an input type that accepts GetSpacesBucketsSortArgs and GetSpacesBucketsSortOutput values.
// You can construct a concrete instance of `GetSpacesBucketsSortInput` via:
//
//          GetSpacesBucketsSortArgs{...}
type GetSpacesBucketsSortInput interface {
	pulumi.Input

	ToGetSpacesBucketsSortOutput() GetSpacesBucketsSortOutput
	ToGetSpacesBucketsSortOutputWithContext(context.Context) GetSpacesBucketsSortOutput
}

type GetSpacesBucketsSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the images by this key. This may be one of `bucketDomainName`, `name`, `region`, or `urn`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetSpacesBucketsSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpacesBucketsSort)(nil)).Elem()
}

func (i GetSpacesBucketsSortArgs) ToGetSpacesBucketsSortOutput() GetSpacesBucketsSortOutput {
	return i.ToGetSpacesBucketsSortOutputWithContext(context.Background())
}

func (i GetSpacesBucketsSortArgs) ToGetSpacesBucketsSortOutputWithContext(ctx context.Context) GetSpacesBucketsSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpacesBucketsSortOutput)
}

// GetSpacesBucketsSortArrayInput is an input type that accepts GetSpacesBucketsSortArray and GetSpacesBucketsSortArrayOutput values.
// You can construct a concrete instance of `GetSpacesBucketsSortArrayInput` via:
//
//          GetSpacesBucketsSortArray{ GetSpacesBucketsSortArgs{...} }
type GetSpacesBucketsSortArrayInput interface {
	pulumi.Input

	ToGetSpacesBucketsSortArrayOutput() GetSpacesBucketsSortArrayOutput
	ToGetSpacesBucketsSortArrayOutputWithContext(context.Context) GetSpacesBucketsSortArrayOutput
}

type GetSpacesBucketsSortArray []GetSpacesBucketsSortInput

func (GetSpacesBucketsSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpacesBucketsSort)(nil)).Elem()
}

func (i GetSpacesBucketsSortArray) ToGetSpacesBucketsSortArrayOutput() GetSpacesBucketsSortArrayOutput {
	return i.ToGetSpacesBucketsSortArrayOutputWithContext(context.Background())
}

func (i GetSpacesBucketsSortArray) ToGetSpacesBucketsSortArrayOutputWithContext(ctx context.Context) GetSpacesBucketsSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpacesBucketsSortArrayOutput)
}

type GetSpacesBucketsSortOutput struct{ *pulumi.OutputState }

func (GetSpacesBucketsSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpacesBucketsSort)(nil)).Elem()
}

func (o GetSpacesBucketsSortOutput) ToGetSpacesBucketsSortOutput() GetSpacesBucketsSortOutput {
	return o
}

func (o GetSpacesBucketsSortOutput) ToGetSpacesBucketsSortOutputWithContext(ctx context.Context) GetSpacesBucketsSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetSpacesBucketsSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSpacesBucketsSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the images by this key. This may be one of `bucketDomainName`, `name`, `region`, or `urn`.
func (o GetSpacesBucketsSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpacesBucketsSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetSpacesBucketsSortArrayOutput struct{ *pulumi.OutputState }

func (GetSpacesBucketsSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpacesBucketsSort)(nil)).Elem()
}

func (o GetSpacesBucketsSortArrayOutput) ToGetSpacesBucketsSortArrayOutput() GetSpacesBucketsSortArrayOutput {
	return o
}

func (o GetSpacesBucketsSortArrayOutput) ToGetSpacesBucketsSortArrayOutputWithContext(ctx context.Context) GetSpacesBucketsSortArrayOutput {
	return o
}

func (o GetSpacesBucketsSortArrayOutput) Index(i pulumi.IntInput) GetSpacesBucketsSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpacesBucketsSort {
		return vs[0].([]GetSpacesBucketsSort)[vs[1].(int)]
	}).(GetSpacesBucketsSortOutput)
}

type GetTagsFilter struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All *bool `pulumi:"all"`
	// Filter the tags by this key. This may be one of `name`, `totalResourceCount`,  `dropletsCount`, `imagesCount`, `volumesCount`, `volumeSnapshotsCount`, or `databasesCount`.
	Key string `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy *string `pulumi:"matchBy"`
	// Only retrieves tags which keys has value that matches
	// one of the values provided here.
	Values []string `pulumi:"values"`
}

// GetTagsFilterInput is an input type that accepts GetTagsFilterArgs and GetTagsFilterOutput values.
// You can construct a concrete instance of `GetTagsFilterInput` via:
//
//          GetTagsFilterArgs{...}
type GetTagsFilterInput interface {
	pulumi.Input

	ToGetTagsFilterOutput() GetTagsFilterOutput
	ToGetTagsFilterOutputWithContext(context.Context) GetTagsFilterOutput
}

type GetTagsFilterArgs struct {
	// Set to `true` to require that a field match all of the `values` instead of just one or more of
	// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
	// that all of the `values` are present in the list or set.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Filter the tags by this key. This may be one of `name`, `totalResourceCount`,  `dropletsCount`, `imagesCount`, `volumesCount`, `volumeSnapshotsCount`, or `databasesCount`.
	Key pulumi.StringInput `pulumi:"key"`
	// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
	// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
	// substrings to find within the string field.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// Only retrieves tags which keys has value that matches
	// one of the values provided here.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilter)(nil)).Elem()
}

func (i GetTagsFilterArgs) ToGetTagsFilterOutput() GetTagsFilterOutput {
	return i.ToGetTagsFilterOutputWithContext(context.Background())
}

func (i GetTagsFilterArgs) ToGetTagsFilterOutputWithContext(ctx context.Context) GetTagsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOutput)
}

// GetTagsFilterArrayInput is an input type that accepts GetTagsFilterArray and GetTagsFilterArrayOutput values.
// You can construct a concrete instance of `GetTagsFilterArrayInput` via:
//
//          GetTagsFilterArray{ GetTagsFilterArgs{...} }
type GetTagsFilterArrayInput interface {
	pulumi.Input

	ToGetTagsFilterArrayOutput() GetTagsFilterArrayOutput
	ToGetTagsFilterArrayOutputWithContext(context.Context) GetTagsFilterArrayOutput
}

type GetTagsFilterArray []GetTagsFilterInput

func (GetTagsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsFilter)(nil)).Elem()
}

func (i GetTagsFilterArray) ToGetTagsFilterArrayOutput() GetTagsFilterArrayOutput {
	return i.ToGetTagsFilterArrayOutputWithContext(context.Background())
}

func (i GetTagsFilterArray) ToGetTagsFilterArrayOutputWithContext(ctx context.Context) GetTagsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterArrayOutput)
}

type GetTagsFilterOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilter)(nil)).Elem()
}

func (o GetTagsFilterOutput) ToGetTagsFilterOutput() GetTagsFilterOutput {
	return o
}

func (o GetTagsFilterOutput) ToGetTagsFilterOutputWithContext(ctx context.Context) GetTagsFilterOutput {
	return o
}

// Set to `true` to require that a field match all of the `values` instead of just one or more of
// them. This is useful when matching against multi-valued fields such as lists or sets where you want to ensure
// that all of the `values` are present in the list or set.
func (o GetTagsFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTagsFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Filter the tags by this key. This may be one of `name`, `totalResourceCount`,  `dropletsCount`, `imagesCount`, `volumesCount`, `volumeSnapshotsCount`, or `databasesCount`.
func (o GetTagsFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsFilter) string { return v.Key }).(pulumi.StringOutput)
}

// One of `exact` (default), `re`, or `substring`. For string-typed fields, specify `re` to
// match by using the `values` as regular expressions, or specify `substring` to match by treating the `values` as
// substrings to find within the string field.
func (o GetTagsFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// Only retrieves tags which keys has value that matches
// one of the values provided here.
func (o GetTagsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetTagsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsFilter)(nil)).Elem()
}

func (o GetTagsFilterArrayOutput) ToGetTagsFilterArrayOutput() GetTagsFilterArrayOutput {
	return o
}

func (o GetTagsFilterArrayOutput) ToGetTagsFilterArrayOutputWithContext(ctx context.Context) GetTagsFilterArrayOutput {
	return o
}

func (o GetTagsFilterArrayOutput) Index(i pulumi.IntInput) GetTagsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsFilter {
		return vs[0].([]GetTagsFilter)[vs[1].(int)]
	}).(GetTagsFilterOutput)
}

type GetTagsSort struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction *string `pulumi:"direction"`
	// Sort the tags by this key. This may be one of `name`, `totalResourceCount`,  `dropletsCount`, `imagesCount`, `volumesCount`, `volumeSnapshotsCount`, or `databasesCount`.
	Key string `pulumi:"key"`
}

// GetTagsSortInput is an input type that accepts GetTagsSortArgs and GetTagsSortOutput values.
// You can construct a concrete instance of `GetTagsSortInput` via:
//
//          GetTagsSortArgs{...}
type GetTagsSortInput interface {
	pulumi.Input

	ToGetTagsSortOutput() GetTagsSortOutput
	ToGetTagsSortOutputWithContext(context.Context) GetTagsSortOutput
}

type GetTagsSortArgs struct {
	// The sort direction. This may be either `asc` or `desc`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Sort the tags by this key. This may be one of `name`, `totalResourceCount`,  `dropletsCount`, `imagesCount`, `volumesCount`, `volumeSnapshotsCount`, or `databasesCount`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetTagsSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsSort)(nil)).Elem()
}

func (i GetTagsSortArgs) ToGetTagsSortOutput() GetTagsSortOutput {
	return i.ToGetTagsSortOutputWithContext(context.Background())
}

func (i GetTagsSortArgs) ToGetTagsSortOutputWithContext(ctx context.Context) GetTagsSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsSortOutput)
}

// GetTagsSortArrayInput is an input type that accepts GetTagsSortArray and GetTagsSortArrayOutput values.
// You can construct a concrete instance of `GetTagsSortArrayInput` via:
//
//          GetTagsSortArray{ GetTagsSortArgs{...} }
type GetTagsSortArrayInput interface {
	pulumi.Input

	ToGetTagsSortArrayOutput() GetTagsSortArrayOutput
	ToGetTagsSortArrayOutputWithContext(context.Context) GetTagsSortArrayOutput
}

type GetTagsSortArray []GetTagsSortInput

func (GetTagsSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsSort)(nil)).Elem()
}

func (i GetTagsSortArray) ToGetTagsSortArrayOutput() GetTagsSortArrayOutput {
	return i.ToGetTagsSortArrayOutputWithContext(context.Background())
}

func (i GetTagsSortArray) ToGetTagsSortArrayOutputWithContext(ctx context.Context) GetTagsSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsSortArrayOutput)
}

type GetTagsSortOutput struct{ *pulumi.OutputState }

func (GetTagsSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsSort)(nil)).Elem()
}

func (o GetTagsSortOutput) ToGetTagsSortOutput() GetTagsSortOutput {
	return o
}

func (o GetTagsSortOutput) ToGetTagsSortOutputWithContext(ctx context.Context) GetTagsSortOutput {
	return o
}

// The sort direction. This may be either `asc` or `desc`.
func (o GetTagsSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Sort the tags by this key. This may be one of `name`, `totalResourceCount`,  `dropletsCount`, `imagesCount`, `volumesCount`, `volumeSnapshotsCount`, or `databasesCount`.
func (o GetTagsSortOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsSort) string { return v.Key }).(pulumi.StringOutput)
}

type GetTagsSortArrayOutput struct{ *pulumi.OutputState }

func (GetTagsSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsSort)(nil)).Elem()
}

func (o GetTagsSortArrayOutput) ToGetTagsSortArrayOutput() GetTagsSortArrayOutput {
	return o
}

func (o GetTagsSortArrayOutput) ToGetTagsSortArrayOutputWithContext(ctx context.Context) GetTagsSortArrayOutput {
	return o
}

func (o GetTagsSortArrayOutput) Index(i pulumi.IntInput) GetTagsSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsSort {
		return vs[0].([]GetTagsSort)[vs[1].(int)]
	}).(GetTagsSortOutput)
}

type GetTagsTag struct {
	// A count of the database clusters that the tag is applied to.
	DatabasesCount int `pulumi:"databasesCount"`
	// A count of the Droplets the tag is applied to.
	DropletsCount int `pulumi:"dropletsCount"`
	// A count of the images that the tag is applied to.
	ImagesCount int `pulumi:"imagesCount"`
	// The name of the tag.
	Name string `pulumi:"name"`
	// A count of the total number of resources that the tag is applied to.
	TotalResourceCount int `pulumi:"totalResourceCount"`
	// A count of the volume snapshots that the tag is applied to.
	VolumeSnapshotsCount int `pulumi:"volumeSnapshotsCount"`
	// A count of the volumes that the tag is applied to.
	VolumesCount int `pulumi:"volumesCount"`
}

// GetTagsTagInput is an input type that accepts GetTagsTagArgs and GetTagsTagOutput values.
// You can construct a concrete instance of `GetTagsTagInput` via:
//
//          GetTagsTagArgs{...}
type GetTagsTagInput interface {
	pulumi.Input

	ToGetTagsTagOutput() GetTagsTagOutput
	ToGetTagsTagOutputWithContext(context.Context) GetTagsTagOutput
}

type GetTagsTagArgs struct {
	// A count of the database clusters that the tag is applied to.
	DatabasesCount pulumi.IntInput `pulumi:"databasesCount"`
	// A count of the Droplets the tag is applied to.
	DropletsCount pulumi.IntInput `pulumi:"dropletsCount"`
	// A count of the images that the tag is applied to.
	ImagesCount pulumi.IntInput `pulumi:"imagesCount"`
	// The name of the tag.
	Name pulumi.StringInput `pulumi:"name"`
	// A count of the total number of resources that the tag is applied to.
	TotalResourceCount pulumi.IntInput `pulumi:"totalResourceCount"`
	// A count of the volume snapshots that the tag is applied to.
	VolumeSnapshotsCount pulumi.IntInput `pulumi:"volumeSnapshotsCount"`
	// A count of the volumes that the tag is applied to.
	VolumesCount pulumi.IntInput `pulumi:"volumesCount"`
}

func (GetTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTag)(nil)).Elem()
}

func (i GetTagsTagArgs) ToGetTagsTagOutput() GetTagsTagOutput {
	return i.ToGetTagsTagOutputWithContext(context.Background())
}

func (i GetTagsTagArgs) ToGetTagsTagOutputWithContext(ctx context.Context) GetTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagOutput)
}

// GetTagsTagArrayInput is an input type that accepts GetTagsTagArray and GetTagsTagArrayOutput values.
// You can construct a concrete instance of `GetTagsTagArrayInput` via:
//
//          GetTagsTagArray{ GetTagsTagArgs{...} }
type GetTagsTagArrayInput interface {
	pulumi.Input

	ToGetTagsTagArrayOutput() GetTagsTagArrayOutput
	ToGetTagsTagArrayOutputWithContext(context.Context) GetTagsTagArrayOutput
}

type GetTagsTagArray []GetTagsTagInput

func (GetTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTag)(nil)).Elem()
}

func (i GetTagsTagArray) ToGetTagsTagArrayOutput() GetTagsTagArrayOutput {
	return i.ToGetTagsTagArrayOutputWithContext(context.Background())
}

func (i GetTagsTagArray) ToGetTagsTagArrayOutputWithContext(ctx context.Context) GetTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagArrayOutput)
}

type GetTagsTagOutput struct{ *pulumi.OutputState }

func (GetTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTag)(nil)).Elem()
}

func (o GetTagsTagOutput) ToGetTagsTagOutput() GetTagsTagOutput {
	return o
}

func (o GetTagsTagOutput) ToGetTagsTagOutputWithContext(ctx context.Context) GetTagsTagOutput {
	return o
}

// A count of the database clusters that the tag is applied to.
func (o GetTagsTagOutput) DatabasesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.DatabasesCount }).(pulumi.IntOutput)
}

// A count of the Droplets the tag is applied to.
func (o GetTagsTagOutput) DropletsCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.DropletsCount }).(pulumi.IntOutput)
}

// A count of the images that the tag is applied to.
func (o GetTagsTagOutput) ImagesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.ImagesCount }).(pulumi.IntOutput)
}

// The name of the tag.
func (o GetTagsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.Name }).(pulumi.StringOutput)
}

// A count of the total number of resources that the tag is applied to.
func (o GetTagsTagOutput) TotalResourceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.TotalResourceCount }).(pulumi.IntOutput)
}

// A count of the volume snapshots that the tag is applied to.
func (o GetTagsTagOutput) VolumeSnapshotsCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.VolumeSnapshotsCount }).(pulumi.IntOutput)
}

// A count of the volumes that the tag is applied to.
func (o GetTagsTagOutput) VolumesCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.VolumesCount }).(pulumi.IntOutput)
}

type GetTagsTagArrayOutput struct{ *pulumi.OutputState }

func (GetTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTag)(nil)).Elem()
}

func (o GetTagsTagArrayOutput) ToGetTagsTagArrayOutput() GetTagsTagArrayOutput {
	return o
}

func (o GetTagsTagArrayOutput) ToGetTagsTagArrayOutputWithContext(ctx context.Context) GetTagsTagArrayOutput {
	return o
}

func (o GetTagsTagArrayOutput) Index(i pulumi.IntInput) GetTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsTag {
		return vs[0].([]GetTagsTag)[vs[1].(int)]
	}).(GetTagsTagOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSpecOutput{})
	pulumi.RegisterOutputType(AppSpecPtrOutput{})
	pulumi.RegisterOutputType(AppSpecDatabaseOutput{})
	pulumi.RegisterOutputType(AppSpecDatabaseArrayOutput{})
	pulumi.RegisterOutputType(AppSpecServiceOutput{})
	pulumi.RegisterOutputType(AppSpecServiceArrayOutput{})
	pulumi.RegisterOutputType(AppSpecServiceEnvOutput{})
	pulumi.RegisterOutputType(AppSpecServiceEnvArrayOutput{})
	pulumi.RegisterOutputType(AppSpecServiceGitOutput{})
	pulumi.RegisterOutputType(AppSpecServiceGitPtrOutput{})
	pulumi.RegisterOutputType(AppSpecServiceGithubOutput{})
	pulumi.RegisterOutputType(AppSpecServiceGithubPtrOutput{})
	pulumi.RegisterOutputType(AppSpecServiceHealthCheckOutput{})
	pulumi.RegisterOutputType(AppSpecServiceHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(AppSpecServiceRoutesOutput{})
	pulumi.RegisterOutputType(AppSpecServiceRoutesPtrOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteArrayOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteEnvOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteEnvArrayOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteGitOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteGitPtrOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteGithubOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteGithubPtrOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteRoutesOutput{})
	pulumi.RegisterOutputType(AppSpecStaticSiteRoutesPtrOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerArrayOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerEnvOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerEnvArrayOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerGitOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerGitPtrOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerGithubOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerGithubPtrOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerRoutesOutput{})
	pulumi.RegisterOutputType(AppSpecWorkerRoutesPtrOutput{})
	pulumi.RegisterOutputType(DatabaseClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(DatabaseClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(DatabaseFirewallRuleOutput{})
	pulumi.RegisterOutputType(DatabaseFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallInboundRuleOutput{})
	pulumi.RegisterOutputType(FirewallInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallOutboundRuleOutput{})
	pulumi.RegisterOutputType(FirewallOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallPendingChangeOutput{})
	pulumi.RegisterOutputType(FirewallPendingChangeArrayOutput{})
	pulumi.RegisterOutputType(KubernetesClusterKubeConfigOutput{})
	pulumi.RegisterOutputType(KubernetesClusterKubeConfigArrayOutput{})
	pulumi.RegisterOutputType(KubernetesClusterNodePoolOutput{})
	pulumi.RegisterOutputType(KubernetesClusterNodePoolPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterNodePoolNodeOutput{})
	pulumi.RegisterOutputType(KubernetesClusterNodePoolNodeArrayOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolNodeOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolNodeArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerForwardingRuleOutput{})
	pulumi.RegisterOutputType(LoadBalancerForwardingRuleArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthcheckOutput{})
	pulumi.RegisterOutputType(LoadBalancerHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerStickySessionsOutput{})
	pulumi.RegisterOutputType(LoadBalancerStickySessionsPtrOutput{})
	pulumi.RegisterOutputType(SpacesBucketCorsRuleOutput{})
	pulumi.RegisterOutputType(SpacesBucketCorsRuleArrayOutput{})
	pulumi.RegisterOutputType(SpacesBucketLifecycleRuleOutput{})
	pulumi.RegisterOutputType(SpacesBucketLifecycleRuleArrayOutput{})
	pulumi.RegisterOutputType(SpacesBucketLifecycleRuleExpirationOutput{})
	pulumi.RegisterOutputType(SpacesBucketLifecycleRuleExpirationPtrOutput{})
	pulumi.RegisterOutputType(SpacesBucketLifecycleRuleNoncurrentVersionExpirationOutput{})
	pulumi.RegisterOutputType(SpacesBucketLifecycleRuleNoncurrentVersionExpirationPtrOutput{})
	pulumi.RegisterOutputType(SpacesBucketVersioningOutput{})
	pulumi.RegisterOutputType(SpacesBucketVersioningPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecOutput{})
	pulumi.RegisterOutputType(GetAppSpecDatabaseOutput{})
	pulumi.RegisterOutputType(GetAppSpecDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceEnvOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceEnvArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceGitOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceGitPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceGithubOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceGithubPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceHealthCheckOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecServiceRoutesOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteEnvOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteEnvArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteGitOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteGitPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteGithubOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteGithubPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecStaticSiteRoutesOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerEnvOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerEnvArrayOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerGitOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerGitPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerGithubOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerGithubPtrOutput{})
	pulumi.RegisterOutputType(GetAppSpecWorkerRoutesOutput{})
	pulumi.RegisterOutputType(GetDatabaseClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetDatabaseClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsFilterOutput{})
	pulumi.RegisterOutputType(GetDomainsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsSortOutput{})
	pulumi.RegisterOutputType(GetDomainsSortArrayOutput{})
	pulumi.RegisterOutputType(GetDropletsDropletOutput{})
	pulumi.RegisterOutputType(GetDropletsDropletArrayOutput{})
	pulumi.RegisterOutputType(GetDropletsFilterOutput{})
	pulumi.RegisterOutputType(GetDropletsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDropletsSortOutput{})
	pulumi.RegisterOutputType(GetDropletsSortArrayOutput{})
	pulumi.RegisterOutputType(GetImagesFilterOutput{})
	pulumi.RegisterOutputType(GetImagesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetImagesImageOutput{})
	pulumi.RegisterOutputType(GetImagesImageArrayOutput{})
	pulumi.RegisterOutputType(GetImagesSortOutput{})
	pulumi.RegisterOutputType(GetImagesSortArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterKubeConfigOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterKubeConfigArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterNodePoolOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterNodePoolArrayOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterNodePoolNodeOutput{})
	pulumi.RegisterOutputType(GetKubernetesClusterNodePoolNodeArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerForwardingRuleOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerForwardingRuleArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerHealthcheckOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerStickySessionsOutput{})
	pulumi.RegisterOutputType(GetProjectsFilterOutput{})
	pulumi.RegisterOutputType(GetProjectsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsSortOutput{})
	pulumi.RegisterOutputType(GetProjectsSortArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsFilterOutput{})
	pulumi.RegisterOutputType(GetRegionsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsSortOutput{})
	pulumi.RegisterOutputType(GetRegionsSortArrayOutput{})
	pulumi.RegisterOutputType(GetSizesFilterOutput{})
	pulumi.RegisterOutputType(GetSizesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSizesSizeOutput{})
	pulumi.RegisterOutputType(GetSizesSizeArrayOutput{})
	pulumi.RegisterOutputType(GetSizesSortOutput{})
	pulumi.RegisterOutputType(GetSizesSortArrayOutput{})
	pulumi.RegisterOutputType(GetSpacesBucketsBucketOutput{})
	pulumi.RegisterOutputType(GetSpacesBucketsBucketArrayOutput{})
	pulumi.RegisterOutputType(GetSpacesBucketsFilterOutput{})
	pulumi.RegisterOutputType(GetSpacesBucketsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSpacesBucketsSortOutput{})
	pulumi.RegisterOutputType(GetSpacesBucketsSortArrayOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOutput{})
	pulumi.RegisterOutputType(GetTagsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetTagsSortOutput{})
	pulumi.RegisterOutputType(GetTagsSortArrayOutput{})
	pulumi.RegisterOutputType(GetTagsTagOutput{})
	pulumi.RegisterOutputType(GetTagsTagArrayOutput{})
}
